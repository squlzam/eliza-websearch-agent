{"version":3,"sources":["../src/environment.ts","../src/assets/cadence/scripts/evm/call.cdc","../src/assets/cadence/scripts/evm/erc20/balance_of.cdc","../src/assets/cadence/scripts/evm/erc20/get_decimals.cdc","../src/assets/cadence/scripts/evm/erc20/total_supply.cdc","../src/assets/cadence/scripts/main-account/get_acct_info.cdc","../src/assets/script.defs.ts","../src/assets/cadence/transactions/evm/call.cdc","../src/assets/cadence/transactions/main-account/account/create_new_account_with_coa.cdc","../src/assets/cadence/transactions/main-account/account/setup_coa.cdc","../src/assets/cadence/transactions/main-account/evm/transfer_erc20.cdc","../src/assets/cadence/transactions/main-account/flow-token/dynamic_vm_transfer.cdc","../src/assets/cadence/transactions/main-account/ft/generic_transfer_with_address.cdc","../src/assets/transaction.defs.ts","../src/queries.ts","../src/providers/connector.provider.ts","../src/providers/utils/flow.connector.ts","../src/types/exception.ts","../flow.json","../src/providers/wallet.provider.ts","../src/providers/utils/pure.signer.ts","../src/actions/transfer.ts","../src/templates/index.ts","../src/index.ts"],"sourcesContent":["import { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\nconst FLOW_MAINNET_PUBLIC_RPC = \"https://mainnet.onflow.org\";\n\nexport const flowEnvSchema = z.object({\n    FLOW_ADDRESS: z\n        .string()\n        .min(1, \"Flow native address is required\")\n        .startsWith(\"0x\", \"Flow address must start with 0x\"),\n    FLOW_PRIVATE_KEY: z\n        .string()\n        .min(1, \"Flow private key for the address is required\")\n        .startsWith(\"0x\", \"Flow private key must start with 0x\"),\n    FLOW_NETWORK: z.string().optional().default(\"mainnet\"),\n    FLOW_ENDPOINT_URL: z.string().optional().default(FLOW_MAINNET_PUBLIC_RPC),\n});\n\nexport type FlowConfig = z.infer<typeof flowEnvSchema>;\n\nexport async function validateFlowConfig(\n    runtime: IAgentRuntime\n): Promise<FlowConfig> {\n    try {\n        const config = {\n            FLOW_ADDRESS:\n                runtime.getSetting(\"FLOW_ADDRESS\") || process.env.FLOW_ADDRESS,\n            FLOW_PRIVATE_KEY:\n                runtime.getSetting(\"FLOW_PRIVATE_KEY\") ||\n                process.env.FLOW_PRIVATE_KEY,\n            FLOW_NETWORK:\n                runtime.getSetting(\"FLOW_NETWORK\") ||\n                process.env.FLOW_NETWORK ||\n                \"mainnet\",\n            FLOW_ENDPOINT_URL:\n                runtime.getSetting(\"FLOW_ENDPOINT_URL\") ||\n                process.env.FLOW_ENDPOINT_URL ||\n                FLOW_MAINNET_PUBLIC_RPC,\n        };\n\n        return flowEnvSchema.parse(config);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `Flow Blockchain configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}\n","import \"EVM\"\n\naccess(all) fun getTypeArray(_ identifiers: [String]): [Type] {\n    var types: [Type] = []\n    for identifier in identifiers {\n        let type = CompositeType(identifier)\n            ?? panic(\"Invalid identifier: \".concat(identifier))\n        types.append(type)\n    }\n    return types\n}\n\n/// Supports generic calls to EVM contracts that might have return values\n///\naccess(all) fun main(\n    gatewayAddress: Address,\n    evmContractAddressHex: String,\n    calldata: String,\n    gasLimit: UInt64,\n    typeIdentifiers: [String]\n): [AnyStruct] {\n\n    let evmAddress = EVM.addressFromString(evmContractAddressHex)\n\n    let data = calldata.decodeHex()\n\n    let gatewayCOA = getAuthAccount<auth(BorrowValue) &Account>(gatewayAddress)\n        .storage.borrow<auth(EVM.Call) &EVM.CadenceOwnedAccount>(\n            from: /storage/evm\n        ) ?? panic(\"Could not borrow COA from provided gateway address\")\n\n    let evmResult = gatewayCOA.call(\n        to: evmAddress,\n        data: data,\n        gasLimit: gasLimit,\n        value: EVM.Balance(attoflow: 0)\n    )\n\n    return EVM.decodeABI(types: getTypeArray(typeIdentifiers), data: evmResult.data)\n}\n","import \"EVM\"\n\nimport \"FlowEVMBridgeUtils\"\n\n/// Returns the balance of the owner (hex-encoded EVM address) of a given ERC20 fungible token defined\n/// at the hex-encoded EVM contract address\n///\n/// @param owner: The hex-encoded EVM address of the owner\n/// @param evmContractAddress: The hex-encoded EVM contract address of the ERC20 contract\n///\n/// @return The balance of the address, reverting if the given contract address does not implement the ERC20 method\n///     \"balanceOf(address)(uint256)\"\n///\naccess(all) fun main(owner: String, evmContractAddress: String): UInt256 {\n    return FlowEVMBridgeUtils.balanceOf(\n        owner: EVM.addressFromString(owner),\n        evmContractAddress: EVM.addressFromString(evmContractAddress)\n    )\n}\n","import \"EVM\"\n\nimport \"FlowEVMBridgeUtils\"\n\naccess(all)\nfun main(erc20ContractAddressHex: String): UInt8 {\n    return FlowEVMBridgeUtils.getTokenDecimals(\n        evmContractAddress: EVM.addressFromString(erc20ContractAddressHex)\n    )\n}\n","import \"EVM\"\n\nimport \"FlowEVMBridgeUtils\"\n\n/// Retrieves the total supply of the ERC20 contract at the given EVM contract address. Reverts on EVM call failure.\n///\n/// @param evmContractAddress: The EVM contract address to retrieve the total supply from\n///\n/// @return the total supply of the ERC20\n///\naccess(all) fun main(evmContractAddressHex: String): UInt256 {\n    return FlowEVMBridgeUtils.totalSupply(\n        evmContractAddress: EVM.addressFromString(evmContractAddressHex)\n    )\n}\n","import \"FungibleToken\"\nimport \"EVM\"\n\n/// Returns the hex encoded address of the COA in the given Flow address\n///\naccess(all) fun main(flowAddress: Address): AccountInfo {\n    var flowBalance: UFix64 = 0.0\n    if let flowVaultRef = getAccount(flowAddress)\n        .capabilities.get<&{FungibleToken.Balance}>(/public/flowTokenBalance)\n        .borrow() {\n        flowBalance = flowVaultRef.balance\n    }\n\n    var coaAddress: String? = nil\n    var coaBalance: UFix64? = nil\n\n    if let address: EVM.EVMAddress = getAuthAccount<auth(BorrowValue) &Account>(flowAddress)\n        .storage.borrow<&EVM.CadenceOwnedAccount>(from: /storage/evm)?.address() {\n        let bytes: [UInt8] = []\n        for byte in address.bytes {\n            bytes.append(byte)\n        }\n        coaAddress = String.encodeHex(bytes)\n        coaBalance = address.balance().inFLOW()\n    }\n    return AccountInfo(\n        flowAddress,\n        flowBalance,\n        coaAddress,\n        coaBalance\n    )\n}\n\naccess(all) struct AccountInfo {\n    access(all) let address: Address\n    access(all) let balance: UFix64\n    access(all) let coaAddress: String?\n    access(all) let coaBalance: UFix64?\n\n    init(\n        _ address: Address,\n        _ balance: UFix64,\n        _ coaAddress: String?,\n        _ coaBalance: UFix64?\n    ) {\n        self.address = address\n        self.balance = balance\n        self.coaAddress = coaAddress\n        self.coaBalance = coaBalance\n    }\n}\n","// Source:\n//\n// This file contains the definitions of the Cadence scripts used in the plugin.\n// The scripts are defined as strings and exported as a dictionary.\n\n// Scripts for EVM\nimport evmCall from \"./cadence/scripts/evm/call.cdc?raw\";\nimport evmERC20BalanceOf from \"./cadence/scripts/evm/erc20/balance_of.cdc?raw\";\nimport evmERC20GetDecimals from \"./cadence/scripts/evm/erc20/get_decimals.cdc?raw\";\nimport evmERC20GetTotalSupply from \"./cadence/scripts/evm/erc20/total_supply.cdc?raw\";\n\n// Scripts for main account\nimport mainGetAccountInfo from \"./cadence/scripts/main-account/get_acct_info.cdc?raw\";\n\nexport const scripts = {\n    evmCall,\n    evmERC20BalanceOf,\n    evmERC20GetDecimals,\n    evmERC20GetTotalSupply,\n    mainGetAccountInfo,\n};\n","import \"EVM\"\n\n/// Executes the calldata from the signer's COA\n///\ntransaction(evmContractAddressHex: String, calldata: String, gasLimit: UInt64, value: UFix64) {\n\n    let evmAddress: EVM.EVMAddress\n    let coa: auth(EVM.Call) &EVM.CadenceOwnedAccount\n\n    prepare(signer: auth(BorrowValue) &Account) {\n        self.evmAddress = EVM.addressFromString(evmContractAddressHex)\n\n        let storagePath = StoragePath(identifier: \"evm\")!\n        let publicPath = PublicPath(identifier: \"evm\")!\n\n        // Reference signer's COA if one exists\n        let coa = signer.storage.borrow<auth(EVM.Withdraw) &EVM.CadenceOwnedAccount>(from: storagePath)\n        if coa == nil {\n            let coa <- EVM.createCadenceOwnedAccount()\n            signer.storage.save<@EVM.CadenceOwnedAccount>(<-coa, to: storagePath)\n            let addressableCap = signer.capabilities.storage.issue<&EVM.CadenceOwnedAccount>(storagePath)\n            signer.capabilities.unpublish(publicPath)\n            signer.capabilities.publish(addressableCap, at: publicPath)\n        }\n\n        self.coa = signer.storage.borrow<auth(EVM.Call) &EVM.CadenceOwnedAccount>(from: storagePath)\n            ?? panic(\"Could not borrow COA from provided gateway address\")\n    }\n\n    execute {\n        let valueBalance = EVM.Balance(attoflow: 0)\n        valueBalance.setFLOW(flow: value)\n        let callResult = self.coa.call(\n            to: self.evmAddress,\n            data: calldata.decodeHex(),\n            gasLimit: gasLimit,\n            value: valueBalance\n        )\n        assert(callResult.status == EVM.Status.successful, message: \"Call failed\")\n    }\n}\n","import Crypto\n\nimport \"EVM\"\n\n/// Creates a new Flow Address with a single full-weight key and its EVM account, which is\n/// a Cadence Owned Account (COA) stored in the account's storage.\n///\ntransaction(\n    key: String,  // key to be used for the account\n    signatureAlgorithm: UInt8, // signature algorithm to be used for the account\n    hashAlgorithm: UInt8, // hash algorithm to be used for the account\n) {\n    let auth: auth(BorrowValue) &Account\n\n    prepare(signer: auth(BorrowValue) &Account) {\n        pre {\n            signatureAlgorithm == 1 || signatureAlgorithm == 2:\n                \"Cannot add Key: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(signatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256), 2 (ECDSA_secp256k1).\")\n            hashAlgorithm == 1 || hashAlgorithm == 3:\n                \"Cannot add Key: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(hashAlgorithm.toString())\n                .concat(\" but the options are 1 (SHA2_256), 3 (SHA3_256).\")\n        }\n\n        self.auth = signer\n    }\n\n    execute {\n        // Create a new public key\n        let publicKey = PublicKey(\n            publicKey: key.decodeHex(),\n            signatureAlgorithm: SignatureAlgorithm(rawValue: signatureAlgorithm)!\n        )\n\n        // Create a new account\n        let account = Account(payer: self.auth)\n\n        // Add the public key to the account\n        account.keys.add(\n            publicKey: publicKey,\n            hashAlgorithm: HashAlgorithm(rawValue: hashAlgorithm)!,\n            weight: 1000.0\n        )\n\n        // Create a new COA\n        let coa <- EVM.createCadenceOwnedAccount()\n\n        // Save the COA to the new account\n        let storagePath = StoragePath(identifier: \"evm\")!\n        let publicPath = PublicPath(identifier: \"evm\")!\n        account.storage.save<@EVM.CadenceOwnedAccount>(<-coa, to: storagePath)\n        let addressableCap = account.capabilities.storage.issue<&EVM.CadenceOwnedAccount>(storagePath)\n        account.capabilities.unpublish(publicPath)\n        account.capabilities.publish(addressableCap, at: publicPath)\n    }\n}\n","import \"EVM\"\nimport \"FungibleToken\"\nimport \"FlowToken\"\n\n/// Creates a COA and saves it in the signer's Flow account & passing the given value of Flow into FlowEVM\n///\ntransaction() {\n\n    prepare(signer: auth(BorrowValue, IssueStorageCapabilityController, PublishCapability, SaveValue, UnpublishCapability) &Account) {\n        let storagePath = StoragePath(identifier: \"evm\")!\n        let publicPath = PublicPath(identifier: \"evm\")!\n\n        // Reference signer's COA if one exists\n        let coa = signer.storage.borrow<auth(EVM.Withdraw) &EVM.CadenceOwnedAccount>(from: storagePath)\n        if coa == nil {\n            let coa <- EVM.createCadenceOwnedAccount()\n            signer.storage.save<@EVM.CadenceOwnedAccount>(<-coa, to: storagePath)\n            let addressableCap = signer.capabilities.storage.issue<&EVM.CadenceOwnedAccount>(storagePath)\n            signer.capabilities.unpublish(publicPath)\n            signer.capabilities.publish(addressableCap, at: publicPath)\n        }\n    }\n}\n","import \"EVM\"\n\nimport \"FlowEVMBridgeUtils\"\n\n/// Executes a token transfer to the defined recipient address against the specified ERC20 contract.\n///\ntransaction(evmContractAddressHex: String, recipientAddressHex: String, amount: UInt256) {\n\n    let evmContractAddress: EVM.EVMAddress\n    let recipientAddress: EVM.EVMAddress\n    let coa: auth(EVM.Call) &EVM.CadenceOwnedAccount\n    let preBalance: UInt256\n    var postBalance: UInt256\n\n    prepare(signer: auth(BorrowValue) &Account) {\n        self.evmContractAddress = EVM.addressFromString(evmContractAddressHex)\n        self.recipientAddress = EVM.addressFromString(recipientAddressHex)\n\n        self.coa = signer.storage.borrow<auth(EVM.Call) &EVM.CadenceOwnedAccount>(from: /storage/evm)\n            ?? panic(\"Could not borrow CadenceOwnedAccount reference\")\n\n        self.preBalance = FlowEVMBridgeUtils.balanceOf(owner: self.coa.address(), evmContractAddress: self.evmContractAddress)\n        self.postBalance = 0\n    }\n\n    execute {\n        let calldata = EVM.encodeABIWithSignature(\"transfer(address,uint256)\", [self.recipientAddress, amount])\n        let callResult = self.coa.call(\n            to: self.evmContractAddress,\n            data: calldata,\n            gasLimit: 15_000_000,\n            value: EVM.Balance(attoflow: 0)\n        )\n        assert(callResult.status == EVM.Status.successful, message: \"Call to ERC20 contract failed\")\n        self.postBalance = FlowEVMBridgeUtils.balanceOf(owner: self.coa.address(), evmContractAddress: self.evmContractAddress)\n    }\n\n    post {\n        self.postBalance == self.preBalance - amount: \"Transfer failed\"\n    }\n}\n","import \"FungibleToken\"\nimport \"FlowToken\"\n\nimport \"EVM\"\n\n// Transfers $FLOW from the signer's account to the recipient's address, determining the target VM based on the format\n// of the recipient's hex address. Note that the sender's funds are sourced by default from the target VM, pulling any\n// difference from the alternate VM if available. e.g. Transfers to Flow addresses will first attempt to withdraw from\n// the signer's Flow vault, pulling any remaining funds from the signer's EVM account if available. Transfers to EVM\n// addresses will first attempt to withdraw from the signer's EVM account, pulling any remaining funds from the signer's\n// Flow vault if available. If the signer's balance across both VMs is insufficient, the transaction will revert.\n///\n/// @param addressString: The recipient's address in hex format - this should be either an EVM address or a Flow address\n/// @param amount: The amount of $FLOW to transfer as a UFix64 value\n///\ntransaction(addressString: String, amount: UFix64) {\n\n    let sentVault: @FlowToken.Vault\n    let evmRecipient: EVM.EVMAddress?\n    var receiver: &{FungibleToken.Receiver}?\n\n    prepare(signer: auth(BorrowValue, SaveValue) &Account) {\n        // Reference signer's COA if one exists\n        let coa = signer.storage.borrow<auth(EVM.Withdraw) &EVM.CadenceOwnedAccount>(from: /storage/evm)\n\n        // Reference signer's FlowToken Vault\n        let sourceVault = signer.storage.borrow<auth(FungibleToken.Withdraw) &FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Could not borrow signer's FlowToken.Vault\")\n        let cadenceBalance = sourceVault.balance\n\n        // Define optional recipients for both VMs\n        self.receiver = nil\n        let cadenceRecipient = Address.fromString(addressString)\n        self.evmRecipient = cadenceRecipient == nil ? EVM.addressFromString(addressString) : nil\n        // Validate exactly one target address is assigned\n        if cadenceRecipient != nil && self.evmRecipient != nil {\n            panic(\"Malformed recipient address - assignable as both Cadence and EVM addresses\")\n        } else if cadenceRecipient == nil && self.evmRecipient == nil {\n            panic(\"Malformed recipient address - not assignable as either Cadence or EVM address\")\n        }\n\n        // Create empty FLOW vault to capture funds\n        self.sentVault <- FlowToken.createEmptyVault(vaultType: Type<@FlowToken.Vault>())\n        /// If the target VM is Flow, does the Vault have sufficient balance to cover?\n        if cadenceRecipient != nil {\n            // Assign the Receiver of the $FLOW transfer\n            self.receiver = getAccount(cadenceRecipient!).capabilities.borrow<&{FungibleToken.Receiver}>(\n                    /public/flowTokenReceiver\n                ) ?? panic(\"Could not borrow reference to recipient's FungibleToken.Receiver\")\n\n            // Withdraw from the signer's Cadence Vault and deposit to sentVault\n            var withdrawAmount = amount < cadenceBalance ? amount : cadenceBalance\n            self.sentVault.deposit(from: <-sourceVault.withdraw(amount: withdrawAmount))\n\n            // If the cadence balance didn't cover the amount, check the signer's EVM balance\n            if amount > self.sentVault.balance {\n                let difference = amount - cadenceBalance\n                // Revert if the signer doesn't have an EVM account or EVM balance is insufficient\n                if coa == nil || difference < coa!.balance().inFLOW() {\n                    panic(\"Insufficient balance across Flow and EVM accounts\")\n                }\n\n                // Withdraw from the signer's EVM account and deposit to sentVault\n                let withdrawFromEVM = EVM.Balance(attoflow: 0)\n                withdrawFromEVM.setFLOW(flow: difference)\n                self.sentVault.deposit(from: <-coa!.withdraw(balance: withdrawFromEVM))\n            }\n        } else if self.evmRecipient != nil {\n            // Check signer's balance can cover the amount\n            if coa != nil {\n                // Determine the amount to withdraw from the signer's EVM account\n                let balance = coa!.balance()\n                let withdrawAmount = amount < balance.inFLOW() ? amount : balance.inFLOW()\n                balance.setFLOW(flow: withdrawAmount)\n\n                // Withdraw funds from EVM to the sentVault\n                self.sentVault.deposit(from: <-coa!.withdraw(balance: balance))\n            }\n            if amount > self.sentVault.balance {\n                // Insufficient amount withdrawn from EVM, check signer's Flow balance\n                let difference = amount - self.sentVault.balance\n                if difference > cadenceBalance {\n                    panic(\"Insufficient balance across Flow and EVM accounts\")\n                }\n                // Withdraw from the signer's Cadence Vault and deposit to sentVault\n                self.sentVault.deposit(from: <-sourceVault.withdraw(amount: difference))\n            }\n        }\n    }\n\n    pre {\n        self.sentVault.balance == amount: \"Attempting to send an incorrect amount of $FLOW\"\n    }\n\n    execute {\n        // Complete Cadence transfer if the FungibleToken Receiver is assigned\n        if self.receiver != nil {\n            self.receiver!.deposit(from: <-self.sentVault)\n        } else {\n            // Otherwise, complete EVM transfer\n            self.evmRecipient!.deposit(from: <-self.sentVault)\n        }\n    }\n}\n","import \"FungibleToken\"\nimport \"FungibleTokenMetadataViews\"\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic FT Transfer with Contract Address and Name\",\n\tdescription: \"Transfer any Fungible Token by providing the contract address and name\",\n\tlanguage: \"en-US\",\n)\n\n/// Can pass in any contract address and name to transfer a token from that contract\n/// This lets you choose the token you want to send\n///\n/// Any contract can be chosen here, so wallets should check argument values\n/// to make sure the intended token contract name and address is passed in\n/// Contracts that are used must implement the FTVaultData Metadata View\n///\n/// Note: This transaction only will work for Fungible Tokens that\n///       have their token's resource name set as \"Vault\".\n///       Tokens with other names will need to use a different transaction\n///       that additionally specifies the identifier\n///\n/// @param amount: The amount of tokens to transfer\n/// @param to: The address to transfer the tokens to\n/// @param contractAddress: The address of the contract that defines the tokens being transferred\n/// @param contractName: The name of the contract that defines the tokens being transferred. Ex: \"FlowToken\"\n///\ntransaction(amount: UFix64, to: Address, contractAddress: Address, contractName: String) {\n\n    // The Vault resource that holds the tokens that are being transferred\n    let tempVault: @{FungibleToken.Vault}\n\n    // FTVaultData struct to get paths from\n    let vaultData: FungibleTokenMetadataViews.FTVaultData\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        // Borrow a reference to the vault stored on the passed account at the passed publicPath\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{FungibleToken}>(name: contractName)\n                ?? panic(\"Could not borrow FungibleToken reference to the contract. Make sure the provided contract name (\"\n                          .concat(contractName).concat(\") and address (\").concat(contractAddress.toString()).concat(\") are correct!\"))\n\n        // Use that reference to retrieve the FTView\n        self.vaultData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<FungibleTokenMetadataViews.FTVaultData>()) as! FungibleTokenMetadataViews.FTVaultData?\n            ?? panic(\"Could not resolve FTVaultData view. The \".concat(contractName)\n                .concat(\" contract needs to implement the FTVaultData Metadata view in order to execute this transaction.\"))\n\n        // Get a reference to the signer's stored vault\n        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: self.vaultData.storagePath)\n\t\t\t?? panic(\"The signer does not store a FungibleToken.Provider object at the path \"\n                .concat(self.vaultData.storagePath.toString()).concat(\"For the \").concat(contractName)\n                .concat(\" contract at address \").concat(contractAddress.toString())\n                .concat(\". The signer must initialize their account with this object first!\"))\n\n        self.tempVault <- vaultRef.withdraw(amount: amount)\n\n        // Get the string representation of the address without the 0x\n        var addressString = contractAddress.toString()\n        if addressString.length == 18 {\n            addressString = addressString.slice(from: 2, upTo: 18)\n        }\n        let typeString: String = \"A.\".concat(addressString).concat(\".\").concat(contractName).concat(\".Vault\")\n        let type = CompositeType(typeString)\n        assert(\n            type != nil,\n            message: \"Could not create a type out of the contract name and address!\"\n        )\n\n        assert(\n            self.tempVault.getType() == type!,\n            message: \"The Vault that was withdrawn to transfer is not the type that was requested!\"\n        )\n    }\n\n    execute {\n        let recipient = getAccount(to)\n        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(self.vaultData.receiverPath)\n            ?? panic(\"Could not borrow a Receiver reference to the FungibleToken Vault in account \"\n                .concat(to.toString()).concat(\" at path \").concat(self.vaultData.receiverPath.toString())\n                .concat(\". Make sure you are sending to an address that has \")\n                .concat(\"a FungibleToken Vault set up properly at the specified path.\"))\n\n        // Transfer tokens from the signer's stored vault to the receiver capability\n        receiverRef.deposit(from: <-self.tempVault)\n    }\n}\n","import evmCall from \"./cadence/transactions/evm/call.cdc\";\n// Transactions for main account\nimport mainAccountCreateNewWithCOA from \"./cadence/transactions/main-account/account/create_new_account_with_coa.cdc\";\nimport mainAccountSetupCOA from \"./cadence/transactions/main-account/account/setup_coa.cdc\";\nimport mainEVMTransferERC20 from \"./cadence/transactions/main-account/evm/transfer_erc20.cdc\";\nimport mainFlowTokenDynamicTransfer from \"./cadence/transactions/main-account/flow-token/dynamic_vm_transfer.cdc\";\nimport mainFTGenericTransfer from \"./cadence/transactions/main-account/ft/generic_transfer_with_address.cdc\";\n\nexport const transactions = {\n    evmCall,\n    mainAccountCreateNewWithCOA,\n    mainAccountSetupCOA,\n    mainEVMTransferERC20,\n    mainFlowTokenDynamicTransfer,\n    mainFTGenericTransfer,\n};\n","import { scripts } from \"./assets/script.defs\";\nimport { FlowAccountBalanceInfo, IFlowScriptExecutor } from \"./types\";\n\n/**\n * Query the balance of an EVM ERC20 token\n * @param executor\n * @param owner\n * @param evmContractAddress\n */\nexport async function queryEvmERC20BalanceOf(\n    executor: IFlowScriptExecutor,\n    owner: string,\n    evmContractAddress: string\n): Promise<bigint> {\n    const ret = await executor.executeScript(\n        scripts.evmERC20BalanceOf,\n        (arg, t) => [arg(owner, t.String), arg(evmContractAddress, t.String)],\n        BigInt(0)\n    );\n    return BigInt(ret);\n}\n\n/**\n * Query the decimals of an EVM ERC20 token\n * @param executor\n * @param evmContractAddress\n */\nexport async function queryEvmERC20Decimals(\n    executor: IFlowScriptExecutor,\n    evmContractAddress: string\n): Promise<number> {\n    const ret = await executor.executeScript(\n        scripts.evmERC20GetDecimals,\n        (arg, t) => [arg(evmContractAddress, t.String)],\n        \"0\"\n    );\n    return parseInt(ret);\n}\n\n/**\n * Query the total supply of an EVM ERC20 token\n * @param executor\n * @param evmContractAddress\n */\nexport async function queryEvmERC20TotalSupply(\n    executor: IFlowScriptExecutor,\n    evmContractAddress: string\n): Promise<bigint> {\n    const ret = await executor.executeScript(\n        scripts.evmERC20GetTotalSupply,\n        (arg, t) => [arg(evmContractAddress, t.String)],\n        BigInt(0)\n    );\n    return BigInt(ret);\n}\n\n/**\n * Query the account info of a Flow address\n * @param executor\n * @param address\n */\nexport async function queryAccountBalanceInfo(\n    executor: IFlowScriptExecutor,\n    address: string\n): Promise<FlowAccountBalanceInfo | undefined> {\n    const ret = await executor.executeScript(\n        scripts.mainGetAccountInfo,\n        (arg, t) => [arg(address, t.Address)],\n        undefined\n    );\n    if (!ret) {\n        return undefined;\n    }\n    return {\n        address: ret.address,\n        balance: parseFloat(ret.balance),\n        coaAddress: ret.coaAddress,\n        coaBalance: ret.coaBalance ? parseFloat(ret.coaBalance) : undefined,\n    };\n}\n","import {\n    elizaLogger,\n    IAgentRuntime,\n    Memory,\n    Provider,\n    State,\n} from \"@elizaos/core\";\n\nimport FlowConnector, { NetworkType } from \"./utils/flow.connector\";\n\n// Here is the configuration file for fixes.\nimport flowJSON from \"../../flow.json\" assert { type: \"json\" };\n\n// Singleton instance for the Flow connector\nlet _instance: FlowConnector;\n\n/**\n * Get the singleton instance of the Flow connector\n * @param runtime The runtime object\n */\nasync function _getDefaultConnectorInstance(\n    runtime: IAgentRuntime\n): Promise<FlowConnector> {\n    if (!_instance) {\n        _instance = await _createFlowConnector(runtime, flowJSON);\n    }\n    return _instance;\n}\n\n/**\n * Create a new instance of the Flow connector\n * @param runtime\n * @param flowJSON\n */\nasync function _createFlowConnector(\n    runtime: IAgentRuntime,\n    flowJSON: object\n): Promise<FlowConnector> {\n    const rpcEndpoint = runtime.getSetting(\"FLOW_ENDPOINT_URL\");\n    const network = runtime.getSetting(\"FLOW_NETWORK\") as NetworkType;\n    const instance = new FlowConnector(flowJSON, network, rpcEndpoint);\n    await instance.onModuleInit();\n    return instance;\n}\n\n/**\n * Get the singleton instance of the Flow connector\n * @param runtime\n */\nexport async function getFlowConnectorInstance(\n    runtime: IAgentRuntime,\n    inputedFlowJSON: { [key: string]: unknown } = undefined\n): Promise<FlowConnector> {\n    let connector: FlowConnector;\n    if (\n        inputedFlowJSON &&\n        typeof inputedFlowJSON === \"object\" &&\n        typeof inputedFlowJSON?.networks === \"object\" &&\n        typeof inputedFlowJSON?.dependencies === \"object\"\n    ) {\n        connector = await _createFlowConnector(runtime, inputedFlowJSON);\n    } else {\n        connector = await _getDefaultConnectorInstance(runtime);\n    }\n    return connector;\n}\n\n/**\n * Flow connector provider for AI agents\n */\nexport class FlowConnectorProvider {\n    constructor(private readonly instance: FlowConnector) {}\n\n    getConnectorStatus(runtime: IAgentRuntime): string {\n        let output = `Now user<${runtime.character.name}> connected to\\n`;\n        output += `Flow network: ${this.instance.network}\\n`;\n        output += `Flow Endpoint: ${this.instance.rpcEndpoint}\\n`;\n        return output;\n    }\n\n    // async getFormattedPortfolio(_runtime: IAgentRuntime): Promise<string> {\n    //     return Promise.resolve(this.getConnectorStatus(_runtime));\n    // }\n}\n\nconst flowConnectorProvider: Provider = {\n    get: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ): Promise<string | null> => {\n        try {\n            const provider = new FlowConnectorProvider(\n                await getFlowConnectorInstance(runtime)\n            );\n            return provider.getConnectorStatus(runtime);\n        } catch (error) {\n            elizaLogger.error(\n                \"Error in Flow connector provider:\",\n                error.message\n            );\n            return null;\n        }\n    },\n};\n\n// Module exports\nexport { flowConnectorProvider, FlowConnector };\n","import * as fcl from \"@onflow/fcl\";\nimport type { Account, TransactionStatus } from \"@onflow/typedefs\";\nimport { IFlowScriptExecutor } from \"../../types\";\nimport Exception from \"../../types/exception\";\n\nexport type NetworkType = \"mainnet\" | \"testnet\" | \"emulator\";\n\nlet isGloballyInited = false;\nlet globallyPromise = null;\n\nexport class FlowConnector implements IFlowScriptExecutor {\n    /**\n     * Initialize the Flow SDK\n     */\n    constructor(\n        private readonly flowJSON: object,\n        public readonly network: NetworkType = \"mainnet\",\n        private readonly defaultRpcEndpoint: string = undefined\n    ) {}\n\n    /**\n     * Get the RPC endpoint\n     */\n    get rpcEndpoint() {\n        switch (this.network) {\n            case \"mainnet\":\n                return this.defaultRpcEndpoint ?? \"https://mainnet.onflow.org\";\n            case \"testnet\":\n                return \"https://testnet.onflow.org\";\n            case \"emulator\":\n                return \"http://localhost:8888\";\n            default:\n                throw new Exception(\n                    50000,\n                    `Network type ${this.network} is not supported`\n                );\n        }\n    }\n\n    /**\n     * Initialize the Flow SDK\n     */\n    async onModuleInit() {\n        if (isGloballyInited) return;\n\n        const cfg = fcl.config();\n        // Required\n        await cfg.put(\"flow.network\", this.network);\n        // Set the maximum of gas limit\n        await cfg.put(\"fcl.limit\", 9999);\n        // Set the RPC endpoint\n        await cfg.put(\"accessNode.api\", this.rpcEndpoint);\n        // Load Flow JSON\n        await cfg.load({ flowJSON: this.flowJSON });\n\n        isGloballyInited = true;\n    }\n\n    /**\n     * Ensure the Flow SDK is initialized\n     */\n    private async ensureInited() {\n        if (isGloballyInited) return;\n        if (!globallyPromise) {\n            globallyPromise = this.onModuleInit();\n        }\n        return await globallyPromise;\n    }\n\n    /**\n     * Get account information\n     */\n    async getAccount(addr: string): Promise<Account> {\n        await this.ensureInited();\n        return await fcl.send([fcl.getAccount(addr)]).then(fcl.decode);\n    }\n\n    /**\n     * General method of sending transaction\n     */\n    async sendTransaction(\n        code: string,\n        args: fcl.ArgumentFunction,\n        mainAuthz?: fcl.FclAuthorization,\n        extraAuthz?: fcl.FclAuthorization[]\n    ) {\n        await this.ensureInited();\n        if (typeof mainAuthz !== \"undefined\") {\n            return await fcl.mutate({\n                cadence: code,\n                args: args,\n                proposer: mainAuthz,\n                payer: mainAuthz,\n                authorizations:\n                    (extraAuthz?.length ?? 0) === 0\n                        ? [mainAuthz]\n                        : [mainAuthz, ...extraAuthz],\n            });\n        } else {\n            return await fcl.mutate({\n                cadence: code,\n                args: args,\n            });\n        }\n    }\n\n    /**\n     * Get transaction status\n     */\n    async getTransactionStatus(\n        transactionId: string\n    ): Promise<TransactionStatus> {\n        await this.ensureInited();\n        return await fcl.tx(transactionId).onceExecuted();\n    }\n\n    /**\n     * Get chain id\n     */\n    async getChainId() {\n        await this.ensureInited();\n        return await fcl.getChainId();\n    }\n\n    /**\n     * Send transaction with single authorization\n     */\n    async onceTransactionSealed(\n        transactionId: string\n    ): Promise<TransactionStatus> {\n        await this.ensureInited();\n        return fcl.tx(transactionId).onceSealed();\n    }\n\n    /**\n     * Get block object\n     * @param blockId\n     */\n    async getBlockHeaderObject(\n        blockId: string\n    ): Promise<fcl.BlockHeaderObject> {\n        await this.ensureInited();\n        return await fcl\n\n            .send([fcl.getBlockHeader(), fcl.atBlockId(blockId)])\n            .then(fcl.decode);\n    }\n\n    /**\n     * Send script\n     */\n    async executeScript<T>(\n        code: string,\n        args: fcl.ArgumentFunction,\n        defaultValue: T\n    ): Promise<T> {\n        await this.ensureInited();\n        try {\n            const queryResult = await fcl.query({\n                cadence: code,\n                args,\n            });\n            return (queryResult as T) ?? defaultValue;\n        } catch (e) {\n            console.error(e);\n            return defaultValue;\n        }\n    }\n}\n\nexport default FlowConnector;\n","export default class Exception extends Error {\n    constructor(\n        readonly code: number,\n        message?: string,\n        options?: ErrorOptions\n    ) {\n        super(message, options);\n    }\n}\n","{\n    \"dependencies\": {\n        \"ArrayUtils\": {\n            \"source\": \"mainnet://a340dc0a4ec828ab.ArrayUtils\",\n            \"hash\": \"9e8f2d3e35be82da42b685045af834e16d23bcef1f322603ff91cedd1c9bbad9\",\n            \"aliases\": {\n                \"mainnet\": \"a340dc0a4ec828ab\",\n                \"testnet\": \"31ad40c07a2a9788\"\n            }\n        },\n        \"Burner\": {\n            \"source\": \"mainnet://f233dcee88fe0abe.Burner\",\n            \"hash\": \"71af18e227984cd434a3ad00bb2f3618b76482842bae920ee55662c37c8bf331\",\n            \"aliases\": {\n                \"emulator\": \"f8d6e0586b0a20c7\",\n                \"mainnet\": \"f233dcee88fe0abe\",\n                \"testnet\": \"9a0766d93b6608b7\"\n            }\n        },\n        \"CapabilityDelegator\": {\n            \"source\": \"mainnet://d8a7e05a7ac670c0.CapabilityDelegator\",\n            \"hash\": \"ad3bf8671a74a836b428da7840540c0ce419349be5f6410b18546e9a9217a9d2\",\n            \"aliases\": {\n                \"mainnet\": \"d8a7e05a7ac670c0\",\n                \"testnet\": \"294e44e1ec6993c6\"\n            }\n        },\n        \"CapabilityFactory\": {\n            \"source\": \"mainnet://d8a7e05a7ac670c0.CapabilityFactory\",\n            \"hash\": \"33d6b142c1db548a193cc06ff9828a24ca2ff8726301e292a8b6863dd0e1e73e\",\n            \"aliases\": {\n                \"mainnet\": \"d8a7e05a7ac670c0\",\n                \"testnet\": \"294e44e1ec6993c6\"\n            }\n        },\n        \"CapabilityFilter\": {\n            \"source\": \"mainnet://d8a7e05a7ac670c0.CapabilityFilter\",\n            \"hash\": \"77b59eb8245102a84a49d47a67e83eeeaafea920b120cdd6aa175d9ff120c388\",\n            \"aliases\": {\n                \"mainnet\": \"d8a7e05a7ac670c0\",\n                \"testnet\": \"294e44e1ec6993c6\"\n            }\n        },\n        \"CrossVMNFT\": {\n            \"source\": \"mainnet://1e4aa0b87d10b141.CrossVMNFT\",\n            \"hash\": \"a9e2ba34ecffda196c58f5c1439bc257d48d0c81457597eb58eb5f879dd95e5a\",\n            \"aliases\": {\n                \"mainnet\": \"1e4aa0b87d10b141\",\n                \"testnet\": \"dfc20aee650fcbdf\"\n            }\n        },\n        \"CrossVMToken\": {\n            \"source\": \"mainnet://1e4aa0b87d10b141.CrossVMToken\",\n            \"hash\": \"6d5c16804247ab9f1234b06383fa1bed42845211dba22582748abd434296650c\",\n            \"aliases\": {\n                \"mainnet\": \"1e4aa0b87d10b141\",\n                \"testnet\": \"dfc20aee650fcbdf\"\n            }\n        },\n        \"EVM\": {\n            \"source\": \"mainnet://e467b9dd11fa00df.EVM\",\n            \"hash\": \"5c69921fa06088b477e2758e122636b39d3d3eb5316807c206c5680d9ac74c7e\",\n            \"aliases\": {\n                \"emulator\": \"f8d6e0586b0a20c7\",\n                \"mainnet\": \"e467b9dd11fa00df\",\n                \"testnet\": \"8c5303eaa26202d6\"\n            }\n        },\n        \"FTViewUtils\": {\n            \"source\": \"mainnet://15a918087ab12d86.FTViewUtils\",\n            \"hash\": \"ef8343697ebcb455a835bc9f87b8060f574c3d968644de47f6613cebf05d7749\",\n            \"aliases\": {\n                \"mainnet\": \"15a918087ab12d86\",\n                \"testnet\": \"b86f928a1fa7798e\"\n            }\n        },\n        \"FlowEVMBridge\": {\n            \"source\": \"mainnet://1e4aa0b87d10b141.FlowEVMBridge\",\n            \"hash\": \"83d4d1f7c715cfe7b1a65241e94ae4b8cb40e6ce135ce4c3981e4d39e59ba33e\",\n            \"aliases\": {\n                \"mainnet\": \"1e4aa0b87d10b141\",\n                \"testnet\": \"dfc20aee650fcbdf\"\n            }\n        },\n        \"FlowEVMBridgeConfig\": {\n            \"source\": \"mainnet://1e4aa0b87d10b141.FlowEVMBridgeConfig\",\n            \"hash\": \"279513a6c107da2af4c847a42169f862ee67105e5a56512872fb6b9a9be3305d\",\n            \"aliases\": {\n                \"mainnet\": \"1e4aa0b87d10b141\",\n                \"testnet\": \"dfc20aee650fcbdf\"\n            }\n        },\n        \"FlowEVMBridgeHandlerInterfaces\": {\n            \"source\": \"mainnet://1e4aa0b87d10b141.FlowEVMBridgeHandlerInterfaces\",\n            \"hash\": \"fcbcd095c8145acf6fd07c336d44502f2946e32f4a1bf7e9bd0772fdd1bea778\",\n            \"aliases\": {\n                \"mainnet\": \"1e4aa0b87d10b141\",\n                \"testnet\": \"dfc20aee650fcbdf\"\n            }\n        },\n        \"FlowEVMBridgeNFTEscrow\": {\n            \"source\": \"mainnet://1e4aa0b87d10b141.FlowEVMBridgeNFTEscrow\",\n            \"hash\": \"ea7054bd06f978d09672ab2d6a1e7ad04df4b46410943088d555dd9ca6e64240\",\n            \"aliases\": {\n                \"mainnet\": \"1e4aa0b87d10b141\",\n                \"testnet\": \"dfc20aee650fcbdf\"\n            }\n        },\n        \"FlowEVMBridgeTemplates\": {\n            \"source\": \"mainnet://1e4aa0b87d10b141.FlowEVMBridgeTemplates\",\n            \"hash\": \"8f27b22450f57522d93d3045038ac9b1935476f4216f57fe3bb82929c71d7aa6\",\n            \"aliases\": {\n                \"mainnet\": \"1e4aa0b87d10b141\",\n                \"testnet\": \"dfc20aee650fcbdf\"\n            }\n        },\n        \"FlowEVMBridgeTokenEscrow\": {\n            \"source\": \"mainnet://1e4aa0b87d10b141.FlowEVMBridgeTokenEscrow\",\n            \"hash\": \"b5ec7c0a16e1c49004b2ed072c5eadc8c382e43351982b4a3050422f116b8f46\",\n            \"aliases\": {\n                \"mainnet\": \"1e4aa0b87d10b141\",\n                \"testnet\": \"dfc20aee650fcbdf\"\n            }\n        },\n        \"FlowEVMBridgeUtils\": {\n            \"source\": \"mainnet://1e4aa0b87d10b141.FlowEVMBridgeUtils\",\n            \"hash\": \"cd17ed82ae6d6f708a8d022d4228e0b53d2349f7f330c18e9c45e777553d2173\",\n            \"aliases\": {\n                \"mainnet\": \"1e4aa0b87d10b141\",\n                \"testnet\": \"dfc20aee650fcbdf\"\n            }\n        },\n        \"FlowStorageFees\": {\n            \"source\": \"mainnet://e467b9dd11fa00df.FlowStorageFees\",\n            \"hash\": \"e38d8a95f6518b8ff46ce57dfa37b4b850b3638f33d16333096bc625b6d9b51a\",\n            \"aliases\": {\n                \"emulator\": \"f8d6e0586b0a20c7\",\n                \"mainnet\": \"e467b9dd11fa00df\",\n                \"testnet\": \"8c5303eaa26202d6\"\n            }\n        },\n        \"FlowToken\": {\n            \"source\": \"mainnet://1654653399040a61.FlowToken\",\n            \"hash\": \"cefb25fd19d9fc80ce02896267eb6157a6b0df7b1935caa8641421fe34c0e67a\",\n            \"aliases\": {\n                \"emulator\": \"0ae53cb6e3f42a79\",\n                \"mainnet\": \"1654653399040a61\",\n                \"testnet\": \"7e60df042a9c0868\"\n            }\n        },\n        \"FungibleToken\": {\n            \"source\": \"mainnet://f233dcee88fe0abe.FungibleToken\",\n            \"hash\": \"050328d01c6cde307fbe14960632666848d9b7ea4fef03ca8c0bbfb0f2884068\",\n            \"aliases\": {\n                \"emulator\": \"ee82856bf20e2aa6\",\n                \"mainnet\": \"f233dcee88fe0abe\",\n                \"testnet\": \"9a0766d93b6608b7\"\n            }\n        },\n        \"FungibleTokenMetadataViews\": {\n            \"source\": \"mainnet://f233dcee88fe0abe.FungibleTokenMetadataViews\",\n            \"hash\": \"dff704a6e3da83997ed48bcd244aaa3eac0733156759a37c76a58ab08863016a\",\n            \"aliases\": {\n                \"emulator\": \"ee82856bf20e2aa6\",\n                \"mainnet\": \"f233dcee88fe0abe\",\n                \"testnet\": \"9a0766d93b6608b7\"\n            }\n        },\n        \"HybridCustody\": {\n            \"source\": \"mainnet://d8a7e05a7ac670c0.HybridCustody\",\n            \"hash\": \"c8a129eec11c57ee25487fcce38efc54c3b12eb539ba61a52f4ee620173bb67b\",\n            \"aliases\": {\n                \"mainnet\": \"d8a7e05a7ac670c0\",\n                \"testnet\": \"294e44e1ec6993c6\"\n            }\n        },\n        \"IBridgePermissions\": {\n            \"source\": \"mainnet://1e4aa0b87d10b141.IBridgePermissions\",\n            \"hash\": \"431a51a6cca87773596f79832520b19499fe614297eaef347e49383f2ae809af\",\n            \"aliases\": {\n                \"mainnet\": \"1e4aa0b87d10b141\",\n                \"testnet\": \"dfc20aee650fcbdf\"\n            }\n        },\n        \"ICrossVM\": {\n            \"source\": \"mainnet://1e4aa0b87d10b141.ICrossVM\",\n            \"hash\": \"e14dcb25f974e216fd83afdc0d0f576ae7014988755a4777b06562ffb06537bc\",\n            \"aliases\": {\n                \"mainnet\": \"1e4aa0b87d10b141\",\n                \"testnet\": \"dfc20aee650fcbdf\"\n            }\n        },\n        \"ICrossVMAsset\": {\n            \"source\": \"mainnet://1e4aa0b87d10b141.ICrossVMAsset\",\n            \"hash\": \"aa1fbd979c9d7806ea8ea66311e2a4257c5a4051eef020524a0bda4d8048ed57\",\n            \"aliases\": {\n                \"mainnet\": \"1e4aa0b87d10b141\",\n                \"testnet\": \"dfc20aee650fcbdf\"\n            }\n        },\n        \"IEVMBridgeNFTMinter\": {\n            \"source\": \"mainnet://1e4aa0b87d10b141.IEVMBridgeNFTMinter\",\n            \"hash\": \"65ec734429c12b70cd97ad8ea2c2bc4986fab286744921ed139d9b45da92e77e\",\n            \"aliases\": {\n                \"mainnet\": \"1e4aa0b87d10b141\",\n                \"testnet\": \"dfc20aee650fcbdf\"\n            }\n        },\n        \"IEVMBridgeTokenMinter\": {\n            \"source\": \"mainnet://1e4aa0b87d10b141.IEVMBridgeTokenMinter\",\n            \"hash\": \"223adb675415984e9c163d15c5922b5c77dc5036bf6548d0b87afa27f4f0a9d9\",\n            \"aliases\": {\n                \"mainnet\": \"1e4aa0b87d10b141\",\n                \"testnet\": \"dfc20aee650fcbdf\"\n            }\n        },\n        \"IFlowEVMNFTBridge\": {\n            \"source\": \"mainnet://1e4aa0b87d10b141.IFlowEVMNFTBridge\",\n            \"hash\": \"3d5bfa663a7059edee8c51d95bc454adf37f17c6d32be18eb42134b550e537b3\",\n            \"aliases\": {\n                \"mainnet\": \"1e4aa0b87d10b141\",\n                \"testnet\": \"dfc20aee650fcbdf\"\n            }\n        },\n        \"IFlowEVMTokenBridge\": {\n            \"source\": \"mainnet://1e4aa0b87d10b141.IFlowEVMTokenBridge\",\n            \"hash\": \"573a038b1e9c26504f6aa32a091e88168591b7f93feeff9ac0343285488a8eb3\",\n            \"aliases\": {\n                \"mainnet\": \"1e4aa0b87d10b141\",\n                \"testnet\": \"dfc20aee650fcbdf\"\n            }\n        },\n        \"MetadataViews\": {\n            \"source\": \"mainnet://1d7e57aa55817448.MetadataViews\",\n            \"hash\": \"10a239cc26e825077de6c8b424409ae173e78e8391df62750b6ba19ffd048f51\",\n            \"aliases\": {\n                \"emulator\": \"f8d6e0586b0a20c7\",\n                \"mainnet\": \"1d7e57aa55817448\",\n                \"testnet\": \"631e88ae7f1d7c20\"\n            }\n        },\n        \"NonFungibleToken\": {\n            \"source\": \"mainnet://1d7e57aa55817448.NonFungibleToken\",\n            \"hash\": \"b63f10e00d1a814492822652dac7c0574428a200e4c26cb3c832c4829e2778f0\",\n            \"aliases\": {\n                \"emulator\": \"f8d6e0586b0a20c7\",\n                \"mainnet\": \"1d7e57aa55817448\",\n                \"testnet\": \"631e88ae7f1d7c20\"\n            }\n        },\n        \"OracleConfig\": {\n            \"source\": \"mainnet://cec15c814971c1dc.OracleConfig\",\n            \"hash\": \"48c252a858ce1c1fb44a377f338a4e558a70f1c22cecea9b7bf8cb74e9b16b79\",\n            \"aliases\": {\n                \"mainnet\": \"cec15c814971c1dc\",\n                \"testnet\": \"2a9b59c3e2b72ee0\"\n            }\n        },\n        \"OracleInterface\": {\n            \"source\": \"mainnet://cec15c814971c1dc.OracleInterface\",\n            \"hash\": \"1ca66227b60dcf59e9d84404398c8151b1ff6395408094669ef1251c78ca2465\",\n            \"aliases\": {\n                \"mainnet\": \"cec15c814971c1dc\",\n                \"testnet\": \"2a9b59c3e2b72ee0\"\n            }\n        },\n        \"PublicPriceOracle\": {\n            \"source\": \"mainnet://ec67451f8a58216a.PublicPriceOracle\",\n            \"hash\": \"3f0b75a98cc8a75835125421bcf602a3f278eaf94001bca7b7a8503b73cbc9a7\",\n            \"aliases\": {\n                \"mainnet\": \"ec67451f8a58216a\",\n                \"testnet\": \"8232ce4a3aff4e94\"\n            }\n        },\n        \"ScopedFTProviders\": {\n            \"source\": \"mainnet://a340dc0a4ec828ab.ScopedFTProviders\",\n            \"hash\": \"9a143138f5a5f51a5402715f7d84dbe363b5744be153ee09343aed71cf241c42\",\n            \"aliases\": {\n                \"mainnet\": \"a340dc0a4ec828ab\",\n                \"testnet\": \"31ad40c07a2a9788\"\n            }\n        },\n        \"Serialize\": {\n            \"source\": \"mainnet://1e4aa0b87d10b141.Serialize\",\n            \"hash\": \"d12a5957ab5352024bb08b281c4de4f9a88ecde74b159a7da0c69d0c8ca51589\",\n            \"aliases\": {\n                \"mainnet\": \"1e4aa0b87d10b141\",\n                \"testnet\": \"dfc20aee650fcbdf\"\n            }\n        },\n        \"SerializeMetadata\": {\n            \"source\": \"mainnet://1e4aa0b87d10b141.SerializeMetadata\",\n            \"hash\": \"eb7ec0ab5abfc66dd636c07a5ed2c7a65723a8d876842035bf9bebd6b0060e3a\",\n            \"aliases\": {\n                \"mainnet\": \"1e4aa0b87d10b141\",\n                \"testnet\": \"dfc20aee650fcbdf\"\n            }\n        },\n        \"StableSwapFactory\": {\n            \"source\": \"mainnet://b063c16cac85dbd1.StableSwapFactory\",\n            \"hash\": \"46318aee6fd29616c8048c23210d4c4f5b172eb99a0ca911fbd849c831a52a0b\",\n            \"aliases\": {\n                \"mainnet\": \"b063c16cac85dbd1\",\n                \"testnet\": \"cbed4c301441ded2\"\n            }\n        },\n        \"StringUtils\": {\n            \"source\": \"mainnet://a340dc0a4ec828ab.StringUtils\",\n            \"hash\": \"b401c4b0f711344ed9cd02ff77c91e026f5dfbca6045f140b9ca9d4966707e83\",\n            \"aliases\": {\n                \"mainnet\": \"a340dc0a4ec828ab\",\n                \"testnet\": \"31ad40c07a2a9788\"\n            }\n        },\n        \"SwapConfig\": {\n            \"source\": \"mainnet://b78ef7afa52ff906.SwapConfig\",\n            \"hash\": \"ccafdb89804887e4e39a9b8fdff5c0ff0d0743505282f2a8ecf86c964e691c82\",\n            \"aliases\": {\n                \"mainnet\": \"b78ef7afa52ff906\",\n                \"testnet\": \"ddb929038d45d4b3\"\n            }\n        },\n        \"SwapError\": {\n            \"source\": \"mainnet://b78ef7afa52ff906.SwapError\",\n            \"hash\": \"7d13a652a1308af387513e35c08b4f9a7389a927bddf08431687a846e4c67f21\",\n            \"aliases\": {\n                \"mainnet\": \"b78ef7afa52ff906\",\n                \"testnet\": \"ddb929038d45d4b3\"\n            }\n        },\n        \"SwapFactory\": {\n            \"source\": \"mainnet://b063c16cac85dbd1.SwapFactory\",\n            \"hash\": \"6d319e77f5eed0c49c960b1ef887c01dd7c2cce8a0b39f7e31fb2af0113eedc5\",\n            \"aliases\": {\n                \"mainnet\": \"b063c16cac85dbd1\",\n                \"testnet\": \"cbed4c301441ded2\"\n            }\n        },\n        \"SwapInterfaces\": {\n            \"source\": \"mainnet://b78ef7afa52ff906.SwapInterfaces\",\n            \"hash\": \"570bb4b9c8da8e0caa8f428494db80779fb906a66cc1904c39a2b9f78b89c6fa\",\n            \"aliases\": {\n                \"mainnet\": \"b78ef7afa52ff906\",\n                \"testnet\": \"ddb929038d45d4b3\"\n            }\n        },\n        \"SwapPair\": {\n            \"source\": \"mainnet://ecbda466e7f191c7.SwapPair\",\n            \"hash\": \"69b99c4a8abc123a0a88b1c354f9da414a32e2f73194403e67e89d51713923c0\",\n            \"aliases\": {\n                \"mainnet\": \"ecbda466e7f191c7\",\n                \"testnet\": \"c20df20fabe06457\"\n            }\n        },\n        \"TokenList\": {\n            \"source\": \"mainnet://15a918087ab12d86.TokenList\",\n            \"hash\": \"ac9298cfdf02e785e92334858fab0f388e5a72136c3bc4d4ed7f2039ac152bd5\",\n            \"aliases\": {\n                \"mainnet\": \"15a918087ab12d86\",\n                \"testnet\": \"b86f928a1fa7798e\"\n            }\n        },\n        \"ViewResolver\": {\n            \"source\": \"mainnet://1d7e57aa55817448.ViewResolver\",\n            \"hash\": \"374a1994046bac9f6228b4843cb32393ef40554df9bd9907a702d098a2987bde\",\n            \"aliases\": {\n                \"emulator\": \"f8d6e0586b0a20c7\",\n                \"mainnet\": \"1d7e57aa55817448\",\n                \"testnet\": \"631e88ae7f1d7c20\"\n            }\n        },\n        \"ViewResolvers\": {\n            \"source\": \"mainnet://15a918087ab12d86.ViewResolvers\",\n            \"hash\": \"37ef9b2a71c1b0daa031c261f731466fcbefad998590177c798b56b61a95489a\",\n            \"aliases\": {\n                \"mainnet\": \"15a918087ab12d86\",\n                \"testnet\": \"b86f928a1fa7798e\"\n            }\n        },\n        \"stFlowToken\": {\n            \"source\": \"mainnet://d6f80565193ad727.stFlowToken\",\n            \"hash\": \"09b1350a55646fdee652fddf7927fc4b305da5a265cb1bd887e112d84fb5e2be\",\n            \"aliases\": {\n                \"mainnet\": \"d6f80565193ad727\",\n                \"testnet\": \"e45c64ecfe31e465\"\n            }\n        }\n    },\n    \"networks\": {\n        \"emulator\": \"127.0.0.1:3569\",\n        \"mainnet\": \"access.mainnet.nodes.onflow.org:9000\",\n        \"testing\": \"127.0.0.1:3569\",\n        \"testnet\": \"access.devnet.nodes.onflow.org:9000\"\n    }\n}\n","import {\n    elizaLogger,\n    IAgentRuntime,\n    Memory,\n    Provider,\n    State,\n} from \"@elizaos/core\";\nimport NodeCache from \"node-cache\";\nimport * as fcl from \"@onflow/fcl\";\nimport type { CompositeSignature, Account } from \"@onflow/typedefs\";\nimport type { FlowConnector } from \"./utils/flow.connector\";\nimport { IFlowScriptExecutor, IFlowSigner } from \"../types\";\nimport { getFlowConnectorInstance } from \"./connector.provider\";\nimport PureSigner from \"./utils/pure.signer\";\nimport Exception from \"../types/exception\";\nimport * as queries from \"../queries\";\n\n/**\n * Flow wallet Provider\n */\nexport class FlowWalletProvider implements IFlowSigner, IFlowScriptExecutor {\n    runtime: IAgentRuntime;\n    private readonly privateKeyHex?: string;\n    public readonly address: string;\n    // Runtime data\n    private account: Account | null = null;\n    public maxKeyIndex = 0;\n\n    constructor(\n        runtime: IAgentRuntime,\n        private readonly connector: FlowConnector,\n        private readonly cache: NodeCache = new NodeCache({ stdTTL: 300 }) // Cache TTL set to 5 minutes\n    ) {\n        this.address = getSignerAddress(runtime);\n        this.runtime = runtime;\n\n        const privateKey = runtime.getSetting(\"FLOW_PRIVATE_KEY\");\n        if (!privateKey) {\n            elizaLogger.warn(\n                `The default Flow wallet ${this.address} has no private key`\n            );\n        } else {\n            this.privateKeyHex = privateKey.startsWith(\"0x\")\n                ? privateKey.slice(2)\n                : privateKey;\n        }\n    }\n\n    /**\n     * Get the network type\n     */\n    get network() {\n        return this.connector.network;\n    }\n\n    /**\n     * Send a transaction\n     * @param code Cadence code\n     * @param args Cadence arguments\n     */\n    async sendTransaction(\n        code: string,\n        args: fcl.ArgumentFunction,\n        authz?: fcl.FclAuthorization\n    ) {\n        return await this.connector.sendTransaction(\n            code,\n            args,\n            authz ?? this.buildAuthorization()\n        );\n    }\n\n    /**\n     * Execute a script\n     * @param code Cadence code\n     * @param args Cadence arguments\n     */\n    async executeScript<T>(\n        code: string,\n        args: fcl.ArgumentFunction,\n        defaultValue: T\n    ): Promise<T> {\n        return await this.connector.executeScript(code, args, defaultValue);\n    }\n\n    /**\n     * Build authorization\n     */\n    buildAuthorization(accountIndex = 0, privateKey = this.privateKeyHex) {\n        if (this.account) {\n            if (accountIndex > this.maxKeyIndex) {\n                throw new Exception(50200, \"Invalid account index\");\n            }\n        }\n        const address = this.address;\n        if (!privateKey) {\n            throw new Exception(50200, \"No private key provided\");\n        }\n        return (account: any) => {\n            return {\n                ...account,\n                tempId: `${address}-${accountIndex}`,\n                addr: fcl.sansPrefix(address),\n                keyId: Number(accountIndex),\n                signingFunction: (\n                    signable: any\n                ): Promise<CompositeSignature> => {\n                    return Promise.resolve({\n                        f_type: \"CompositeSignature\",\n                        f_vsn: \"1.0.0\",\n                        addr: fcl.withPrefix(address),\n                        keyId: Number(accountIndex),\n                        signature: this.signMessage(\n                            signable.message,\n                            privateKey\n                        ),\n                    });\n                },\n            };\n        };\n    }\n\n    /**\n     * Sign a message\n     * @param message Message to sign\n     */\n    signMessage(message: string, privateKey = this.privateKeyHex) {\n        return PureSigner.signWithKey(privateKey, message);\n    }\n\n    // -----  methods -----\n\n    /**\n     * Sync account info\n     */\n    async syncAccountInfo() {\n        this.account = await this.connector.getAccount(this.address);\n        this.maxKeyIndex = this.account.keys.length - 1;\n        this.cache.set(\"balance\", this.account.balance / 1e8);\n        elizaLogger.debug(\"Flow account info synced\", {\n            address: this.address,\n            balance: this.account.balance,\n            maxKeyIndex: this.maxKeyIndex,\n            keys: this.account.keys,\n        });\n    }\n\n    /**\n     * Get the wallet balance\n     * @returns Wallet balance\n     */\n    async getWalletBalance(forceRefresh = false): Promise<number> {\n        const cachedBalance = await this.cache.get<number>(\"balance\");\n        if (!forceRefresh && cachedBalance) {\n            return cachedBalance;\n        }\n        await this.syncAccountInfo();\n        return this.account ? this.account.balance / 1e8 : 0;\n    }\n\n    /**\n     * Query the balance of this wallet\n     */\n    async queryAccountBalanceInfo() {\n        return await queries.queryAccountBalanceInfo(this, this.address);\n    }\n}\n\n// ----- Helpers -----\n\n/**\n * Check if an address is a Flow address\n * @param address Address to check\n */\nexport function isFlowAddress(address: string) {\n    const regExp = /^0x[a-fA-F0-9]{16}$/gi;\n    return regExp.test(address);\n}\n\n/**\n * Check if an address is an EVM address\n * @param address Address to check\n */\nexport function isEVMAddress(address: string) {\n    const regExp = /^0x[a-fA-F0-9]{40}$/gi;\n    return regExp.test(address);\n}\n\n/**\n * Check if a string is a Cadence identifier\n * @param str String to check\n */\nexport function isCadenceIdentifier(str: string) {\n    const cadenceIdentifier = /^A\\.[0-9a-fA-F]{16}\\.[0-9a-zA-Z_]+/;\n    return cadenceIdentifier.test(str);\n}\n\n/**\n * Get the signer address\n */\nfunction getSignerAddress(runtime: IAgentRuntime): string {\n    const signerAddr = runtime.getSetting(\"FLOW_ADDRESS\");\n    if (!signerAddr) {\n        elizaLogger.error(\"No signer address\");\n        throw new Exception(50200, \"No signer info\");\n    }\n    return signerAddr;\n}\n\nconst flowWalletProvider: Provider = {\n    get: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ): Promise<string | null> => {\n        // Check if the user has an Flow wallet\n        if (\n            !runtime.getSetting(\"FLOW_ADDRESS\") ||\n            !runtime.getSetting(\"FLOW_PRIVATE_KEY\")\n        ) {\n            elizaLogger.error(\n                \"FLOW_ADDRESS or FLOW_PRIVATE_KEY not configured, skipping wallet injection\"\n            );\n            return null;\n        }\n\n        try {\n            const connector = await getFlowConnectorInstance(runtime);\n            const walletProvider = new FlowWalletProvider(runtime, connector);\n            const info = await walletProvider.queryAccountBalanceInfo();\n            if (!info || info?.address !== walletProvider.address) {\n                elizaLogger.error(\"Invalid account info\");\n                return null;\n            }\n            let output = `Here is user<${runtime.character.name}>'s wallet status:\\n`;\n            output += `Flow wallet address: ${walletProvider.address}\\n`;\n            output += `FLOW balance: ${info.balance} FLOW\\n`;\n            output += `Flow wallet's COA(EVM) address: ${info.coaAddress || \"unknown\"}\\n`;\n            output += `FLOW balance in COA(EVM) address: ${info.coaBalance ?? 0} FLOW`;\n            return output;\n        } catch (error) {\n            elizaLogger.error(\"Error in Flow wallet provider:\", error.message);\n            return null;\n        }\n    },\n};\n\n// Module exports\nexport { flowWalletProvider };\n","import elliptic from \"elliptic\";\nimport { SHA3 } from \"sha3\";\n\nexport default class PureSigner {\n    /**\n     * Sign a message with a private key\n     */\n    static signWithKey(privateKeyHex: string, msg: string) {\n        const ec = new elliptic.ec(\"p256\");\n        const key = ec.keyFromPrivate(Buffer.from(privateKeyHex, \"hex\"));\n        const sig = key.sign(this._hashMsg(msg));\n        const n = 32;\n        const r = sig.r.toArrayLike(Buffer, \"be\", n);\n        const s = sig.s.toArrayLike(Buffer, \"be\", n);\n        return Buffer.concat([r.valueOf(), s.valueOf()]).toString(\"hex\");\n    }\n\n    /**\n     * Hash a message\n     */\n    private static _hashMsg(msg: string) {\n        const sha = new SHA3(256);\n        sha.update(Buffer.from(msg, \"hex\"));\n        return sha.digest();\n    }\n}\n","import {\n    composeContext,\n    Content,\n    elizaLogger,\n    generateObjectArray,\n    ModelClass,\n    type Action,\n    type ActionExample,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport Exception from \"../types/exception\";\nimport { getFlowConnectorInstance } from \"../providers/connector.provider\";\nimport {\n    FlowWalletProvider,\n    isCadenceIdentifier,\n    isEVMAddress,\n    isFlowAddress,\n} from \"../providers/wallet.provider\";\nimport { transferTemplate } from \"../templates\";\nimport { validateFlowConfig } from \"../environment\";\nimport { TransactionResponse } from \"../types\";\nimport { transactions } from \"../assets/transaction.defs\";\nimport * as queries from \"../queries\";\n\n/**\n * The generated content for the transfer action\n */\nexport interface TransferContent extends Content {\n    token: string | null;\n    amount: string;\n    to: string;\n    matched: boolean;\n}\n\n/**\n * Check if the content is a transfer content\n */\nfunction isTransferContent(\n    runtime: IAgentRuntime,\n    content: any\n): content is TransferContent {\n    elizaLogger.log(\"Content for transfer\", content);\n    return (\n        (!content.token ||\n            (typeof content.token === \"string\" &&\n                (isCadenceIdentifier(content.token) ||\n                    isEVMAddress(content.token)))) &&\n        typeof content.to === \"string\" &&\n        (isEVMAddress(content.to) || isFlowAddress(content.to)) &&\n        (typeof content.amount === \"string\" ||\n            typeof content.amount === \"number\") &&\n        typeof content.matched === \"boolean\"\n    );\n}\n\n// FIXME: We need to use dynamic key index\nconst USE_KEY_INDEX = 0;\n\nexport class TransferAction {\n    constructor(\n        private walletProvider: FlowWalletProvider,\n        public readonly useKeyIndex: number = USE_KEY_INDEX\n    ) {}\n\n    /**\n     * Process the messages and generate the transfer content\n     */\n    async processMessages(\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State\n    ): Promise<TransferContent> {\n        // Initialize or update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        // Compose transfer context\n        const transferContext = composeContext({\n            state,\n            template: transferTemplate,\n        });\n\n        // Generate transfer content\n        const recommendations = await generateObjectArray({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.MEDIUM,\n        });\n\n        elizaLogger.debug(\"Recommendations\", recommendations);\n\n        // Convert array to object\n        const content = recommendations[recommendations.length - 1];\n\n        // Validate transfer content\n        if (!isTransferContent(runtime, content)) {\n            elizaLogger.error(\"Invalid content for SEND_COIN action.\");\n            throw new Exception(50100, \"Invalid transfer content\");\n        }\n\n        // Check if the content is matched\n        if (!content.matched) {\n            elizaLogger.error(\"Content does not match the transfer template.\");\n            throw new Exception(\n                50100,\n                \"Content does not match the transfer template\"\n            );\n        }\n        return content;\n    }\n\n    async transfer(\n        content: TransferContent,\n        callback?: HandlerCallback\n    ): Promise<TransactionResponse> {\n        elizaLogger.log(\"Starting Flow Plugin's SEND_COIN handler...\");\n\n        const resp: TransactionResponse = {\n            signer: {\n                address: this.walletProvider.address,\n                keyIndex: this.useKeyIndex,\n            },\n            txid: \"\",\n        };\n        const logPrefix = `Address: ${resp.signer.address}, using keyIdex: ${resp.signer.keyIndex}\\n`;\n\n        // Parsed fields\n        const recipient = content.to;\n        const amount =\n            typeof content.amount === \"number\"\n                ? content.amount\n                : parseFloat(content.amount);\n\n        // Check if the wallet has enough balance to transfer\n        const accountInfo = await queries.queryAccountBalanceInfo(\n            this.walletProvider,\n            this.walletProvider.address\n        );\n        const totalBalance =\n            accountInfo.balance + (accountInfo.coaBalance ?? 0);\n\n        // Check if the amount is valid\n        if (totalBalance < amount) {\n            elizaLogger.error(\"Insufficient balance to transfer.\");\n            if (callback) {\n                callback({\n                    text: `${logPrefix} Unable to process transfer request. Insufficient balance.`,\n                    content: {\n                        error: \"Insufficient balance\",\n                    },\n                });\n            }\n            throw new Exception(50100, \"Insufficient balance to transfer\");\n        }\n\n        try {\n            // Execute transfer\n            const authz = this.walletProvider.buildAuthorization(\n                this.useKeyIndex\n            ); // use default private key\n\n            // For different token types, we need to handle the token differently\n            if (!content.token) {\n                elizaLogger.log(\n                    `${logPrefix} Sending ${amount} FLOW to ${recipient}...`\n                );\n                // Transfer FLOW token\n                resp.txid = await this.walletProvider.sendTransaction(\n                    transactions.mainFlowTokenDynamicTransfer,\n                    (arg, t) => [\n                        arg(recipient, t.String),\n                        arg(amount.toFixed(1), t.UFix64),\n                    ],\n                    authz\n                );\n            } else if (isCadenceIdentifier(content.token)) {\n                // Transfer Fungible Token on Cadence side\n                const [_, tokenAddr, tokenContractName] =\n                    content.token.split(\".\");\n                elizaLogger.log(\n                    `${logPrefix} Sending ${amount} A.${tokenAddr}.${tokenContractName} to ${recipient}...`\n                );\n                resp.txid = await this.walletProvider.sendTransaction(\n                    transactions.mainFTGenericTransfer,\n                    (arg, t) => [\n                        arg(amount.toFixed(1), t.UFix64),\n                        arg(recipient, t.Address),\n                        arg(\"0x\" + tokenAddr, t.Address),\n                        arg(tokenContractName, t.String),\n                    ],\n                    authz\n                );\n            } else if (isEVMAddress(content.token)) {\n                // Transfer ERC20 token on EVM side\n                // we need to update the amount to be in the smallest unit\n                const decimals = await queries.queryEvmERC20Decimals(\n                    this.walletProvider,\n                    content.token\n                );\n                const adjustedAmount = BigInt(amount * Math.pow(10, decimals));\n\n                elizaLogger.log(\n                    `${logPrefix} Sending ${adjustedAmount} ${content.token}(EVM) to ${recipient}...`\n                );\n\n                resp.txid = await this.walletProvider.sendTransaction(\n                    transactions.mainEVMTransferERC20,\n                    (arg, t) => [\n                        arg(content.token, t.String),\n                        arg(recipient, t.String),\n                        // Convert the amount to string, the string should be pure number, not a scientific notation\n                        arg(adjustedAmount.toString(), t.UInt256),\n                    ],\n                    authz\n                );\n            }\n\n            elizaLogger.log(`${logPrefix} Sent transaction: ${resp.txid}`);\n\n            // call the callback with the transaction response\n            if (callback) {\n                const tokenName = content.token || \"FLOW\";\n                const baseUrl =\n                    this.walletProvider.network === \"testnet\"\n                        ? \"https://testnet.flowscan.io\"\n                        : \"https://flowscan.io\";\n                const txURL = `${baseUrl}/tx/${resp.txid}/events`;\n                callback({\n                    text: `${logPrefix} Successfully transferred ${content.amount} ${tokenName} to ${content.to}\\nTransaction: [${resp.txid}](${txURL})`,\n                    content: {\n                        success: true,\n                        txid: resp.txid,\n                        token: content.token,\n                        to: content.to,\n                        amount: content.amount,\n                    },\n                });\n            }\n        } catch (e: any) {\n            elizaLogger.error(\"Error in sending transaction:\", e.message);\n            if (callback) {\n                callback({\n                    text: `${logPrefix} Unable to process transfer request. Error in sending transaction.`,\n                    content: {\n                        error: e.message,\n                    },\n                });\n            }\n            if (e instanceof Exception) {\n                throw e;\n            } else {\n                throw new Exception(\n                    50100,\n                    \"Error in sending transaction: \" + e.message\n                );\n            }\n        }\n\n        elizaLogger.log(\"Completed Flow Plugin's SEND_COIN handler.\");\n\n        return resp;\n    }\n}\n\nexport const transferAction = {\n    name: \"SEND_COIN\",\n    similes: [\n        \"SEND_TOKEN\",\n        \"SEND_TOKEN_ON_FLOW\",\n        \"TRANSFER_TOKEN_ON_FLOW\",\n        \"TRANSFER_TOKENS_ON_FLOW\",\n        \"TRANSFER_FLOW\",\n        \"SEND_FLOW\",\n        \"PAY_BY_FLOW\",\n    ],\n    description:\n        \"Call this action to transfer any fungible token/coin from the agent's Flow wallet to another address\",\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        await validateFlowConfig(runtime);\n        const flowConnector = await getFlowConnectorInstance(runtime);\n        const walletProvider = new FlowWalletProvider(runtime, flowConnector);\n        try {\n            await walletProvider.syncAccountInfo();\n            // TODO: We need to check if the key index is valid\n        } catch {\n            elizaLogger.error(\"Failed to sync account info\");\n            return false;\n        }\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        const flowConnector = await getFlowConnectorInstance(runtime);\n        const walletProvider = new FlowWalletProvider(runtime, flowConnector);\n        const action = new TransferAction(walletProvider);\n        let content: TransferContent;\n        try {\n            content = await action.processMessages(runtime, message, state);\n        } catch (err) {\n            elizaLogger.error(\"Error in processing messages:\", err.message);\n            if (callback) {\n                callback({\n                    text:\n                        \"Unable to process transfer request. Invalid content: \" +\n                        err.message,\n                    content: {\n                        error: \"Invalid content\",\n                    },\n                });\n            }\n            return false;\n        }\n\n        try {\n            const res = await action.transfer(content, callback);\n            elizaLogger.log(\n                `Transfer action response: ${res.signer.address}[${res.signer.keyIndex}] - ${res.txid}`\n            );\n        } catch {\n            return false;\n        }\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send 1 FLOW to 0xa2de93114bae3e73\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Sending 1 FLOW tokens now, pls wait...\",\n                    action: \"SEND_COIN\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send 1 FLOW - A.1654653399040a61.FlowToken to 0xa2de93114bae3e73\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Sending 1 FLOW tokens now, pls wait...\",\n                    action: \"SEND_COIN\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send 1000 FROTH - 0xb73bf8e6a4477a952e0338e6cc00cc0ce5ad04ba to 0x000000000000000000000002e44fbfbd00395de5\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Sending 1000 FROTH tokens now, pls wait...\",\n                    action: \"SEND_COIN\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","export const transferTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested transfer:\n- Field \"token\": Cadence Resource Identifier or ERC20 contract address (if not native token). this field should be null if the token is native token: $FLOW or FLOW. Examples for this field:\n    1. For Cadence resource identifier, the field should be \"A.1654653399040a61.ContractName\"\n    2. For ERC20 contract address, the field should be \"0xe6ffc15a5bde7dd33c127670ba2b9fcb82db971a\"\n- Field \"amount\": Amount to transfer, it should be a number or a string. Examples for this field:\n    1. \"1000\"\n    2. 1000\n- Field \"to\": Recipient wallet address, can be EVM address or Cadence address. Examples for this field:\n    1. Cadence address: \"0x1654653399040a61\"\n    2. EVM address: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\"\n- Field \"matched\": Boolean value indicating if field \"token\" matches the field \"to\" or not. Here is the rules:\n    1. if field \"token\" is \"null\" or Cadence resource identifier, field \"to\" can be EVM address or Cadence address, so the value of \"matched\" should be true.\n    2. if field \"token\" is ERC20 contract address, field \"to\" should be EVM address, so the value of \"matched\" should be true, otherwise false.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"token\": string | null\n    \"amount\": number | string | null,\n    \"to\": string | null,\n    \"matched\": boolean\n}\n\\`\\`\\`\n`;\n","// Definitions\nexport * from \"./environment\";\nexport * from \"./types\";\nexport * from \"./assets/script.defs\";\nexport * from \"./assets/transaction.defs\";\nexport * as queries from \"./queries\";\n// Providers\nexport * from \"./providers/connector.provider\";\nexport * from \"./providers/wallet.provider\";\n\nimport type { Plugin } from \"@elizaos/core\";\nimport { flowWalletProvider } from \"./providers/wallet.provider\";\nimport { flowConnectorProvider } from \"./providers/connector.provider\";\nimport { transferAction } from \"./actions/transfer\";\n\nexport const flowPlugin: Plugin = {\n    name: \"flow\",\n    description: \"Flow Plugin for Eliza\",\n    providers: [flowWalletProvider, flowConnectorProvider],\n    actions: [transferAction],\n    evaluators: [],\n    services: [],\n};\n\nexport default flowPlugin;\n"],"mappings":"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","names":["config","call_default","call_default","elizaLogger","fcl","elizaLogger","elizaLogger","elizaLogger"]}