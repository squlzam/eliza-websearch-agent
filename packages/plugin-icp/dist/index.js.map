{"version":3,"sources":["../src/providers/wallet.ts","../src/actions/createToken.ts","../src/canisters/pick-pump/index.did.ts","../src/utils/common/types/options.ts","../src/utils/ic/principals.ts","../src/utils/common/data/json.ts","../src/utils/common/types/results.ts","../src/constants/apis.ts","../src/apis/uploadFile.ts","../src/actions/prompts/token.ts","../src/constants/canisters.ts","../src/index.ts"],"sourcesContent":["// src/providers/wallet.ts\nimport { Actor, ActorSubclass, HttpAgent } from \"@dfinity/agent\";\nimport { Ed25519KeyIdentity } from \"@dfinity/identity\";\nimport { IDL } from \"@dfinity/candid\";\nimport { Principal } from \"@dfinity/principal\";\nimport { IAgentRuntime, Memory, Provider, State } from \"@elizaos/core\";\n\nexport class WalletProvider {\n    private privateKey: string;\n    private identity: Ed25519KeyIdentity;\n    private host: string;\n\n    constructor(privateKey: string, host: string = \"https://ic0.app\") {\n        this.privateKey = privateKey;\n        this.host = host;\n        this.identity = this.createIdentity();\n    }\n\n    private createIdentity = (): Ed25519KeyIdentity => {\n        if (!this.privateKey) {\n            throw new Error(\"Private key is required\");\n        }\n        try {\n            const privateKeyBytes = Buffer.from(this.privateKey, \"hex\");\n            if (privateKeyBytes.length !== 32) {\n                throw new Error(\"Invalid private key length\");\n            }\n            return Ed25519KeyIdentity.fromSecretKey(privateKeyBytes);\n        } catch (error) {\n            throw new Error(\"Failed to create ICP identity\");\n        }\n    };\n\n    public createAgent = async (): Promise<HttpAgent> => {\n        return HttpAgent.create({\n            identity: this.identity,\n            host: this.host,\n        });\n    };\n\n    public getIdentity = (): Ed25519KeyIdentity => {\n        return this.identity;\n    };\n\n    public getPrincipal = (): Principal => {\n        return this.identity.getPrincipal();\n    };\n\n    public createActor = async <T>(\n        idlFactory: IDL.InterfaceFactory,\n        canisterId: string,\n        fetchRootKey = false\n    ): Promise<ActorSubclass<T>> => {\n        const agent = await this.createAgent();\n        if (fetchRootKey) {\n            await agent.fetchRootKey();\n        }\n        return Actor.createActor<T>(idlFactory, {\n            agent,\n            canisterId,\n        });\n    };\n}\n\n// Add the new provider instance\nexport const icpWalletProvider: Provider = {\n    async get(\n        runtime: IAgentRuntime,\n        message: Memory,\n        state?: State\n    ): Promise<any> {\n        try {\n            const privateKey = runtime.getSetting(\n                \"INTERNET_COMPUTER_PRIVATE_KEY\"\n            );\n            if (!privateKey) {\n                throw new Error(\"INTERNET_COMPUTER_PRIVATE_KEY not found\");\n            }\n\n            const wallet = new WalletProvider(privateKey);\n\n            return {\n                wallet,\n                identity: wallet.getIdentity(),\n                principal: wallet.getPrincipal().toString(),\n                isAuthenticated: true,\n                createActor: wallet.createActor,\n            };\n        } catch (error: any) {\n            return {\n                wallet: null,\n                identity: null,\n                principal: null,\n                isAuthenticated: false,\n                error: error.message,\n            };\n        }\n    },\n};\n\n// Export utility function\nexport const createAnonymousActor = async <T>(\n    idlFactory: IDL.InterfaceFactory,\n    canisterId: string,\n    host: string = \"https://ic0.app\",\n    fetchRootKey = false\n): Promise<ActorSubclass<T>> => {\n    const anonymousAgent = new HttpAgent({\n        host,\n        retryTimes: 1,\n        verifyQuerySignatures: false,\n    });\n\n    if (fetchRootKey) {\n        await anonymousAgent.fetchRootKey();\n    }\n\n    return Actor.createActor<T>(idlFactory, {\n        agent: anonymousAgent,\n        canisterId,\n    });\n};\n","import {\n    composeContext,\n    generateImage,\n    generateText,\n    generateObjectDeprecated,\n} from \"@elizaos/core\";\nimport {\n    ActionExample,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n    type Action,\n} from \"@elizaos/core\";\nimport { idlFactory } from \"../canisters/pick-pump/index.did\";\nimport { _SERVICE } from \"../canisters/pick-pump/index.did.d\";\nimport { ActorCreator, CreateMemeTokenArg } from \"../types\";\nimport { unwrapOption, wrapOption } from \"../utils/common/types/options\";\nimport { unwrapRustResultMap } from \"../utils/common/types/results\";\nimport { icpWalletProvider } from \"../providers/wallet\";\nimport { uploadFileToWeb3Storage } from \"../apis/uploadFile\";\nimport { createTokenTemplate, logoPromptTemplate } from \"./prompts/token\";\nimport { CANISTER_IDS } from \"../constants/canisters\";\n\nasync function createTokenTransaction(\n    creator: ActorCreator,\n    tokenInfo: CreateMemeTokenArg\n) {\n    const actor: _SERVICE = await creator(idlFactory, CANISTER_IDS.PICK_PUMP);\n    const result = await actor.create_token({\n        ...tokenInfo,\n        name: tokenInfo.name,\n        symbol: tokenInfo.symbol,\n        description: tokenInfo.description,\n        logo: tokenInfo.logo,\n        twitter: wrapOption(tokenInfo.twitter),\n        website: wrapOption(tokenInfo.website),\n        telegram: wrapOption(tokenInfo.telegram),\n    });\n\n    return unwrapRustResultMap(\n        result,\n        (ok) => ({\n            ...ok,\n            id: ok.id.toString(),\n            created_at: ok.created_at.toString(),\n            available_token: ok.available_token.toString(),\n            volume_24h: ok.volume_24h.toString(),\n            last_tx_time: ok.last_tx_time.toString(),\n            market_cap_icp: ok.market_cap_icp.toString(),\n            twitter: unwrapOption(ok.twitter),\n            website: unwrapOption(ok.website),\n            telegram: unwrapOption(ok.telegram),\n        }),\n        (err) => {\n            throw new Error(`Token creation failed: ${err}`);\n        }\n    );\n}\n\nasync function generateTokenLogo(\n    description: string,\n    runtime: IAgentRuntime\n): Promise<string | null> {\n    const logoPrompt = `Create a fun and memorable logo for a cryptocurrency token with these characteristics: ${description}. The logo should be simple, iconic, and suitable for a meme token. Style: minimal, bold colors, crypto-themed.`;\n\n    const result = await generateImage(\n        {\n            prompt: logoPrompt,\n            width: 512,\n            height: 512,\n            count: 1,\n        },\n        runtime as any\n    );\n\n    if (result.success && result.data && result.data.length > 0) {\n        return result.data[0];\n    }\n\n    return null;\n}\n\nexport const executeCreateToken: Action = {\n    name: \"CREATE_TOKEN\",\n    similes: [\n        \"CREATE_PICKPUMP_TOKEN\",\n        \"MINT_PICKPUMP\",\n        \"PICKPUMP_TOKEN\",\n        \"PP_TOKEN\",\n        \"PICKPUMP发币\",\n        \"PP发币\",\n        \"在PICKPUMP上发币\",\n        \"PICKPUMP代币\",\n    ],\n    description:\n        \"Create a new meme token on PickPump platform (Internet Computer). This action helps users create and launch tokens specifically on the PickPump platform.\",\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        const keywords = [\n            \"pickpump\",\n            \"pp\",\n            \"皮克帮\",\n            \"token\",\n            \"coin\",\n            \"代币\",\n            \"币\",\n            \"create\",\n            \"mint\",\n            \"launch\",\n            \"deploy\",\n            \"创建\",\n            \"发行\",\n            \"铸造\",\n        ];\n\n        const messageText = (\n            typeof message.content === \"string\"\n                ? message.content\n                : message.content.text || \"\"\n        ).toLowerCase();\n\n        return keywords.some((keyword) =>\n            messageText.includes(keyword.toLowerCase())\n        );\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        _options: { [key: string]: unknown } | undefined,\n        callback?: HandlerCallback\n    ): Promise<void> => {\n        callback?.({\n            text: \"🔄 Creating meme token...\",\n            action: \"CREATE_TOKEN\",\n            type: \"processing\",\n        });\n\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        const createTokenContext = composeContext({\n            state,\n            template: createTokenTemplate,\n        });\n\n        const response = await generateObjectDeprecated({\n            runtime,\n            context: createTokenContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const logoPromptContext = composeContext({\n            state,\n            template: logoPromptTemplate.replace(\n                \"{{description}}\",\n                response.description\n            ),\n        });\n\n        const logoPrompt = await generateText({\n            runtime,\n            context: logoPromptContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const logo = await generateTokenLogo(logoPrompt, runtime);\n        if (!logo) {\n            throw new Error(\"Failed to generate token logo\");\n        }\n\n        const logoUploadResult = await uploadFileToWeb3Storage(logo);\n        if (!logoUploadResult.urls?.gateway) {\n            throw new Error(\"Failed to upload logo to Web3Storage\");\n        }\n\n        try {\n            const { wallet } = await icpWalletProvider.get(\n                runtime,\n                message,\n                state\n            );\n\n            const creator = wallet.createActor;\n            const createTokenResult = await createTokenTransaction(creator, {\n                name: response.name,\n                symbol: response.symbol,\n                description: response.description,\n                logo: logoUploadResult.urls.gateway,\n            });\n\n            const responseMsg = {\n                text: `✨ Created new meme token:\\n🪙 ${response.name} (${response.symbol})\\n📝 ${response.description}`,\n                data: createTokenResult,\n                action: \"CREATE_TOKEN\",\n                type: \"success\",\n            };\n            callback?.(responseMsg);\n        } catch (error: any) {\n            const responseMsg = {\n                text: `Failed to create token: ${error.message}`,\n                action: \"CREATE_TOKEN\",\n                type: \"error\",\n            };\n            callback?.(responseMsg);\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: \"I want to create a space cat token on PickPump\",\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Creating space cat token on PickPump...\",\n                    action: \"CREATE_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"✨ Token created successfully!\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: \"Help me create a pizza-themed funny token on PP\",\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Creating pizza token on PickPump...\",\n                    action: \"CREATE_TOKEN\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","// biome-ignore lint/suspicious/noExplicitAny: <explanation>\nexport const idlFactory = ({ IDL }: { IDL: any }) => {\n    const Result = IDL.Variant({ Ok: IDL.Nat, Err: IDL.Text });\n    const CreateMemeTokenArg = IDL.Record({\n        twitter: IDL.Opt(IDL.Text),\n        logo: IDL.Text,\n        name: IDL.Text,\n        description: IDL.Text,\n        website: IDL.Opt(IDL.Text),\n        telegram: IDL.Opt(IDL.Text),\n        symbol: IDL.Text,\n    });\n    const MemeToken = IDL.Record({\n        id: IDL.Nat64,\n        creator: IDL.Text,\n        available_token: IDL.Nat,\n        twitter: IDL.Opt(IDL.Text),\n        volume_24h: IDL.Nat,\n        logo: IDL.Text,\n        name: IDL.Text,\n        liquidity: IDL.Float64,\n        description: IDL.Text,\n        created_at: IDL.Nat64,\n        website: IDL.Opt(IDL.Text),\n        last_tx_time: IDL.Nat64,\n        canister: IDL.Opt(IDL.Text),\n        market_cap_icp: IDL.Nat,\n        market_cap_usd: IDL.Float64,\n        price: IDL.Float64,\n        telegram: IDL.Opt(IDL.Text),\n        symbol: IDL.Text,\n    });\n    const Result_1 = IDL.Variant({ Ok: MemeToken, Err: IDL.Text });\n    const Transaction = IDL.Record({\n        token_amount: IDL.Nat,\n        token_id: IDL.Nat64,\n        token_symbol: IDL.Text,\n        from: IDL.Text,\n        timestamp: IDL.Nat64,\n        icp_amount: IDL.Nat,\n        tx_type: IDL.Text,\n    });\n    const CreateCommentArg = IDL.Record({\n        token: IDL.Text,\n        content: IDL.Text,\n        image: IDL.Opt(IDL.Text),\n    });\n    const Sort = IDL.Variant({\n        CreateTimeDsc: IDL.Null,\n        LastTradeDsc: IDL.Null,\n        MarketCapDsc: IDL.Null,\n    });\n    const Candle = IDL.Record({\n        low: IDL.Float64,\n        high: IDL.Float64,\n        close: IDL.Float64,\n        open: IDL.Float64,\n        timestamp: IDL.Nat64,\n    });\n    const Comment = IDL.Record({\n        creator: IDL.Text,\n        token: IDL.Text,\n        content: IDL.Text,\n        created_at: IDL.Nat64,\n        image: IDL.Opt(IDL.Text),\n    });\n    const Holder = IDL.Record({ balance: IDL.Nat, owner: IDL.Text });\n    const User = IDL.Record({\n        principal: IDL.Text,\n        name: IDL.Text,\n        last_login_seconds: IDL.Nat64,\n        register_at_second: IDL.Nat64,\n        avatar: IDL.Text,\n    });\n    const MemeTokenView = IDL.Record({\n        token: MemeToken,\n        balance: IDL.Nat,\n    });\n    const WalletReceiveResult = IDL.Record({ accepted: IDL.Nat64 });\n    return IDL.Service({\n        buy: IDL.Func([IDL.Nat64, IDL.Float64], [Result], []),\n        calculate_buy: IDL.Func([IDL.Nat64, IDL.Float64], [Result], [\"query\"]),\n        calculate_sell: IDL.Func([IDL.Nat64, IDL.Float64], [Result], [\"query\"]),\n        create_token: IDL.Func([CreateMemeTokenArg], [Result_1], []),\n        king_of_hill: IDL.Func([], [IDL.Opt(MemeToken)], [\"query\"]),\n        last_txs: IDL.Func([IDL.Nat64], [IDL.Vec(Transaction)], [\"query\"]),\n        post_comment: IDL.Func([CreateCommentArg], [], []),\n        query_all_tokens: IDL.Func(\n            [IDL.Nat64, IDL.Nat64, IDL.Opt(Sort)],\n            [IDL.Vec(MemeToken), IDL.Nat64],\n            [\"query\"]\n        ),\n        query_token: IDL.Func([IDL.Nat64], [IDL.Opt(MemeToken)], [\"query\"]),\n        query_token_candle: IDL.Func(\n            [IDL.Nat64, IDL.Opt(IDL.Nat64)],\n            [IDL.Vec(Candle)],\n            [\"query\"]\n        ),\n        query_token_comments: IDL.Func(\n            [IDL.Principal, IDL.Nat64, IDL.Nat64],\n            [IDL.Vec(Comment), IDL.Nat64],\n            [\"query\"]\n        ),\n        query_token_holders: IDL.Func(\n            [IDL.Nat64, IDL.Nat64, IDL.Nat64],\n            [IDL.Vec(Holder), IDL.Nat64],\n            [\"query\"]\n        ),\n        query_token_transactions: IDL.Func(\n            [IDL.Nat64, IDL.Nat64, IDL.Nat64],\n            [IDL.Vec(Transaction), IDL.Nat64],\n            [\"query\"]\n        ),\n        query_user: IDL.Func([IDL.Opt(IDL.Principal)], [User], [\"query\"]),\n        query_user_launched: IDL.Func(\n            [IDL.Opt(IDL.Principal)],\n            [IDL.Vec(MemeToken)],\n            [\"query\"]\n        ),\n        query_user_tokens: IDL.Func(\n            [IDL.Opt(IDL.Principal)],\n            [IDL.Vec(MemeTokenView)],\n            [\"query\"]\n        ),\n        sell: IDL.Func([IDL.Nat64, IDL.Float64], [Result], []),\n        wallet_balance: IDL.Func([], [IDL.Nat], [\"query\"]),\n        wallet_receive: IDL.Func([], [WalletReceiveResult], []),\n    });\n};\n","export type Option<T> = [] | [T];\n\n// Unwrap\nexport const unwrapOption = <T>(v: [] | [T]): T | undefined =>\n    v.length ? v[0] : undefined;\n// Unwrap and map\nexport const unwrapOptionMap = <T, R>(\n    v: [] | [T],\n    map: (t: T) => R\n): R | undefined => (v.length ? map(v[0]) : undefined);\n\n// Wrap\nexport const wrapOption = <T>(v?: T): [] | [T] => (v !== undefined ? [v] : []);\n// Wrap and map\nexport const wrapOptionMap = <T, R>(\n    v: T | undefined,\n    map: (t: T) => R\n): [] | [R] => (v !== undefined ? [map(v)] : []);\n","import { Principal } from \"@dfinity/principal\";\n\n// Check if string is a Principal\nexport const isPrincipalText = (text: string | undefined): boolean => {\n    if (!text) return false;\n    try {\n        Principal.fromText(text);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\n// Check if string is a Canister Id\nexport const isCanisterIdText = (text: string | undefined): boolean => {\n    if (!text) return false;\n    if (text.length !== 27) return false;\n    return isPrincipalText(text);\n};\n","import { isPrincipalText } from \"../../ic/principals\";\n// ? 1. bigint -> string\n// ? 2. principal -> string\n\nexport const customStringify = (v: any): string =>\n    JSON.stringify(v, (_key, value) => {\n        if (typeof value === \"bigint\") {\n            return `${value}`;\n        } else if (value && typeof value === \"object\" && value._isPrincipal === true) {\n            return value.toText();\n        } else if (\n            value &&\n            typeof value === \"object\" &&\n            value.__principal__ &&\n            isPrincipalText(value.__principal__)\n        ) {\n            return value.__principal__;\n        }\n        return value;\n    });","import { customStringify } from \"../data/json\";\n\n// Motoko result object\nexport type MotokoResult<T, E> =\n    | { ok: T; err?: undefined }\n    | { ok?: undefined; err: E };\n\n// Rust result object\nexport type RustResult<T, E> =\n    | { Ok: T; Err?: undefined }\n    | { Ok?: undefined; Err: E };\n\n// ================ motoko ================\n\n// Map values\nexport const parseMotokoResult = <Ok, Err, T, E>(\n    result: MotokoResult<Ok, Err>,\n    transform_ok: (t: Ok) => T,\n    transform_err: (e: Err) => E\n): MotokoResult<T, E> => {\n    if (result.ok !== undefined) return { ok: transform_ok(result.ok) };\n    if (result.err !== undefined) return { err: transform_err(result.err) };\n    throw new Error(`wrong motoko result: ${customStringify(result)}`);\n};\n\n// Unwrap\nexport const unwrapMotokoResult = <T, E>(\n    result: MotokoResult<T, E>,\n    handle_error: (e: E) => T\n): T => {\n    if (result.ok !== undefined) return result.ok;\n    if (result.err !== undefined) return handle_error(result.err);\n    throw new Error(`wrong motoko result: ${customStringify(result)}`);\n};\n\n// Unwrap and map\nexport const unwrapMotokoResultMap = <O, E, T>(\n    result: MotokoResult<O, E>,\n    transform_ok: (o: O) => T,\n    transform_err: (e: E) => T\n): T => {\n    if (result.ok !== undefined) return transform_ok(result.ok);\n    if (result.err !== undefined) return transform_err(result.err);\n    throw new Error(`wrong motoko result: ${customStringify(result)}`);\n};\n\n// ================ rust ================\n\nexport const parseRustResult = <Ok, Err, T, E>(\n    result: RustResult<Ok, Err>,\n    transform_ok: (t: Ok) => T,\n    transform_err: (e: Err) => E\n): RustResult<T, E> => {\n    if (result.Ok !== undefined) return { Ok: transform_ok(result.Ok) };\n    if (result.Err !== undefined) return { Err: transform_err(result.Err) };\n    throw new Error(`wrong rust result: ${customStringify(result)}`);\n};\n\n// Unwrap\nexport const unwrapRustResult = <T, E>(\n    result: RustResult<T, E>,\n    handle_error: (e: E) => T\n): T => {\n    if (result.Ok !== undefined) return result.Ok;\n    if (result.Err !== undefined) return handle_error(result.Err);\n    throw new Error(`wrong rust result: ${customStringify(result)}`);\n};\n\n// Unwrap and map\nexport const unwrapRustResultMap = <O, E, T>(\n    result: RustResult<O, E>,\n    transform_ok: (o: O) => T,\n    transform_err: (e: E) => T\n): T => {\n    if (result.Ok !== undefined) return transform_ok(result.Ok);\n    if (result.Err !== undefined) return transform_err(result.Err);\n    throw new Error(`wrong rust result: ${customStringify(result)}`);\n};\n","// use your own web3 storage api host\nexport const WEB3_STORAGE_API_HOST = \"\";","import { WEB3_STORAGE_API_HOST } from '../constants/apis';\n\ninterface UploadResponse {\n    success: boolean;\n    cid?: string;\n    urls?: {\n        direct: string;\n        raw: string;\n        gateway: string;\n    };\n    type?: string;\n    name?: string;\n    size?: number;\n    error?: string;\n}\n\nexport async function uploadFileToWeb3Storage(\n    base64Data: string,\n    fileName: string = \"image.png\"\n): Promise<UploadResponse> {\n    try {\n        // Remove base64 URL prefix (if exists)\n        const cleanBase64 = base64Data.replace(/^data:image\\/\\w+;base64,/, \"\");\n\n        // Convert base64 to Blob\n        const byteCharacters = atob(cleanBase64);\n        const byteNumbers = new Array(byteCharacters.length);\n\n        for (let i = 0; i < byteCharacters.length; i++) {\n            byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n\n        const byteArray = new Uint8Array(byteNumbers);\n        const blob = new Blob([byteArray], { type: \"image/png\" });\n\n        // Create file object\n        const file = new File([blob], fileName, { type: \"image/png\" });\n\n        const formData = new FormData();\n        formData.append(\"file\", file);\n\n        const response = await fetch(WEB3_STORAGE_API_HOST, {\n            method: \"POST\",\n            body: formData,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Upload failed with status: ${response.status}`);\n        }\n\n        const result: UploadResponse = await response.json();\n        return result;\n    } catch (error) {\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"upload failed\",\n        };\n    }\n}\n","export const createTokenTemplate = `Based on the user's description, generate creative and memorable values for a new meme token on PickPump:\n\nUser's idea: \"{{recentMessages}}\"\n\nPlease generate:\n1. A catchy and fun token name that reflects the theme\n2. A 3-4 letter symbol based on the name (all caps)\n3. An engaging and humorous description (include emojis)\n4. Set other fields to null\n\nExample response:\n\\`\\`\\`json\n{\n    \"name\": \"CatLaser\",\n    \"symbol\": \"PAWS\",\n    \"description\": \"The first meme token powered by feline laser-chasing energy! Watch your investment zoom around like a red dot! 😺🔴✨\",\n    \"logo\": null,\n    \"website\": null,\n    \"twitter\": null,\n    \"telegram\": null\n}\n\\`\\`\\`\n\nGenerate appropriate meme token information based on the user's description.\nRespond with a JSON markdown block containing only the generated values.`;\n\nexport const logoPromptTemplate = `Based on this token idea: \"{{description}}\", create a detailed prompt for generating a logo image.\nThe prompt should describe visual elements, style, and mood for the logo.\nFocus on making it memorable and suitable for a cryptocurrency token.\nKeep the response short and specific.\nRespond with only the prompt text, no additional formatting.\n\nExample for a dog-themed token:\n\"A playful cartoon dog face with a cryptocurrency symbol on its collar, using vibrant colors and bold outlines, crypto-themed minimal style\"`;\n","export const CANISTER_IDS = {\n    PICK_PUMP: \"tl65e-yyaaa-aaaah-aq2pa-cai\"\n} as const;","import { Plugin } from \"@elizaos/core\";\nimport { icpWalletProvider } from \"./providers/wallet\";\nimport { executeCreateToken } from \"./actions/createToken\";\n\nexport const icpPlugin: Plugin = {\n    name: \"icp\",\n    description: \"Internet Computer Protocol Plugin for Eliza\",\n    providers: [icpWalletProvider],\n    actions: [executeCreateToken],\n    evaluators: [],\n};\n\nexport default icpPlugin;\n"],"mappings":"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","names":["idlFactory"]}