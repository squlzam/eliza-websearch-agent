{"version":3,"sources":["../src/index.ts","../src/constants.ts"],"sourcesContent":["import { elizaLogger } from \"@elizaos/core\";\nimport {\n    Action,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    Plugin,\n    State,\n} from \"@elizaos/core\";\nimport fs from \"fs\";\nimport { LUMA_CONSTANTS } from \"./constants\";\n\nconst generateVideo = async (prompt: string, runtime: IAgentRuntime) => {\n    const API_KEY = runtime.getSetting(LUMA_CONSTANTS.API_KEY_SETTING);\n\n    try {\n        elizaLogger.log(\"Starting video generation with prompt:\", prompt);\n\n        const response = await fetch(LUMA_CONSTANTS.API_URL, {\n            method: \"POST\",\n            headers: {\n                Authorization: `Bearer ${API_KEY}`,\n                accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ prompt }),\n        });\n\n        if (!response.ok) {\n            const errorText = await response.text();\n            elizaLogger.error(\"Luma API error:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorText,\n            });\n            throw new Error(\n                `Luma API error: ${response.statusText} - ${errorText}`\n            );\n        }\n\n        const data = await response.json();\n        elizaLogger.log(\n            \"Generation request successful, received response:\",\n            data\n        );\n\n        // Poll for completion\n        let status = data.status;\n        let videoUrl = null;\n        const generationId = data.id;\n\n        while (status !== \"completed\" && status !== \"failed\") {\n            await new Promise((resolve) => setTimeout(resolve, 5000)); // Wait 5 seconds\n\n            const statusResponse = await fetch(\n                `${LUMA_CONSTANTS.API_URL}/${generationId}`,\n                {\n                    method: \"GET\",\n                    headers: {\n                        Authorization: `Bearer ${API_KEY}`,\n                        accept: \"application/json\",\n                    },\n                }\n            );\n\n            if (!statusResponse.ok) {\n                const errorText = await statusResponse.text();\n                elizaLogger.error(\"Status check error:\", {\n                    status: statusResponse.status,\n                    statusText: statusResponse.statusText,\n                    error: errorText,\n                });\n                throw new Error(\n                    \"Failed to check generation status: \" + errorText\n                );\n            }\n\n            const statusData = await statusResponse.json();\n            elizaLogger.log(\"Status check response:\", statusData);\n\n            status = statusData.state;\n            if (status === \"completed\") {\n                videoUrl = statusData.assets?.video;\n            }\n        }\n\n        if (status === \"failed\") {\n            throw new Error(\"Video generation failed\");\n        }\n\n        if (!videoUrl) {\n            throw new Error(\"No video URL in completed response\");\n        }\n\n        return {\n            success: true,\n            data: videoUrl,\n        };\n    } catch (error) {\n        elizaLogger.error(\"Video generation error:\", error);\n        return {\n            success: false,\n            error: error.message || \"Unknown error occurred\",\n        };\n    }\n};\n\nconst videoGeneration: Action = {\n    name: \"GENERATE_VIDEO\",\n    similes: [\n        \"VIDEO_GENERATION\",\n        \"VIDEO_GEN\",\n        \"CREATE_VIDEO\",\n        \"MAKE_VIDEO\",\n        \"RENDER_VIDEO\",\n        \"ANIMATE\",\n        \"CREATE_ANIMATION\",\n        \"VIDEO_CREATE\",\n        \"VIDEO_MAKE\",\n    ],\n    description: \"Generate a video based on a text prompt\",\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        elizaLogger.log(\"Validating video generation action\");\n        const lumaApiKey = runtime.getSetting(\"LUMA_API_KEY\");\n        elizaLogger.log(\"LUMA_API_KEY present:\", !!lumaApiKey);\n        return !!lumaApiKey;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state: State,\n        _options: any,\n        callback: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Video generation request:\", message);\n\n        // Clean up the prompt by removing mentions and commands\n        const videoPrompt = message.content.text\n            .replace(/<@\\d+>/g, \"\") // Remove mentions\n            .replace(\n                /generate video|create video|make video|render video/gi,\n                \"\"\n            ) // Remove commands\n            .trim();\n\n        if (!videoPrompt || videoPrompt.length < 5) {\n            callback({\n                text: \"Could you please provide more details about what kind of video you'd like me to generate? For example: 'Generate a video of a sunset on a beach' or 'Create a video of a futuristic city'\",\n            });\n            return;\n        }\n\n        elizaLogger.log(\"Video prompt:\", videoPrompt);\n\n        callback({\n            text: `I'll generate a video based on your prompt: \"${videoPrompt}\". This might take a few minutes...`,\n        });\n\n        try {\n            const result = await generateVideo(videoPrompt, runtime);\n\n            if (result.success && result.data) {\n                // Download the video file\n                const response = await fetch(result.data);\n                const arrayBuffer = await response.arrayBuffer();\n                const videoFileName = `content_cache/generated_video_${Date.now()}.mp4`;\n\n                // Save video file\n                fs.writeFileSync(videoFileName, Buffer.from(arrayBuffer));\n\n                callback(\n                    {\n                        text: \"Here's your generated video!\",\n                        attachments: [\n                            {\n                                id: crypto.randomUUID(),\n                                url: result.data,\n                                title: \"Generated Video\",\n                                source: \"videoGeneration\",\n                                description: videoPrompt,\n                                text: videoPrompt,\n                            },\n                        ],\n                    },\n                    [videoFileName]\n                ); // Add the video file to the attachments\n            } else {\n                callback({\n                    text: `Video generation failed: ${result.error}`,\n                    error: true,\n                });\n            }\n        } catch (error) {\n            elizaLogger.error(`Failed to generate video. Error: ${error}`);\n            callback({\n                text: `Video generation failed: ${error.message}`,\n                error: true,\n            });\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Generate a video of a cat playing piano\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll create a video of a cat playing piano for you\",\n                    action: \"GENERATE_VIDEO\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Can you make a video of a sunset at the beach?\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll generate a beautiful beach sunset video for you\",\n                    action: \"GENERATE_VIDEO\",\n                },\n            },\n        ],\n    ],\n} as Action;\n\nexport const videoGenerationPlugin: Plugin = {\n    name: \"videoGeneration\",\n    description: \"Generate videos using Luma AI\",\n    actions: [videoGeneration],\n    evaluators: [],\n    providers: [],\n};\n","export const LUMA_CONSTANTS = {\n    API_URL: \"https://api.lumalabs.ai/dream-machine/v1/generations\",\n    API_KEY_SETTING: \"LUMA_API_KEY\", // The setting name to fetch from runtime\n};\n"],"mappings":"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","names":[]}