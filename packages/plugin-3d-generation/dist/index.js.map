{"version":3,"sources":["../src/index.ts","../src/constants.ts"],"sourcesContent":["import { elizaLogger } from \"@elizaos/core\";\nimport {\n    Action,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    Plugin,\n    State,\n} from \"@elizaos/core\";\nimport { fal } from \"@fal-ai/client\";\nimport { FAL_CONSTANTS } from \"./constants\";\n\nimport * as fs from 'fs';\nimport { Buffer } from 'buffer';\nimport * as path from 'path';\nimport * as process from 'process';\n\nconst generate3D = async (prompt: string, runtime: IAgentRuntime) => {\n    process.env['FAL_KEY'] = FAL_CONSTANTS.API_KEY_SETTING || runtime.getSetting(\"FAL_API_KEY\");\n\n    try {\n        elizaLogger.log(\"Starting 3D generation with prompt:\", prompt);\n\n        const response = await fal.subscribe(FAL_CONSTANTS.API_3D_ENDPOINT, {\n            input: {\n                prompt: prompt,\n                input_image_urls: [],\n                condition_mode: \"concat\",    // fuse concat\n                geometry_file_format: \"glb\", // glb usdz fbx obj stl\n                material: \"PBR\",             // PBR Shaded\n                quality: \"medium\",           // extra-low, low, medium, high\n                tier: \"Regular\"              // Regular, Sketch\n              },\n            logs: true,\n            onQueueUpdate: (update) => {\n              if (update.status === \"IN_PROGRESS\") {\n                update.logs.map((log) => log.message).forEach(elizaLogger.log);\n              }\n            },\n        });\n\n\n        elizaLogger.log(\n            \"Generation request successful, received response:\",\n            response\n        );\n\n\n        return {success: true, \n                url: response.data.model_mesh.url, \n                file_name: response.data.model_mesh.file_name};\n\n    } catch (error) {\n        elizaLogger.error(\"3D generation error:\", error);\n        return {\n            success: false,\n            error: error.message || \"Unknown error occurred\",\n        };\n    }\n};\n\nconst ThreeDGeneration: Action = {\n    name: \"GENERATE_3D\",\n    similes: [\n        \"3D_GENERATION\",\n        \"3D_GEN\",\n        \"CREATE_3D\",\n        \"MAKE_3D\",\n        \"TEXT23D\",\n        \"TEXT_TO_3D\",\n        \"3D_CREATE\",\n        \"3D_MAKE\",\n    ],\n    description: \"Generate a 3D object based on a text prompt\",\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        elizaLogger.log(\"Validating 3D generation action\");\n        const FalApiKey = runtime.getSetting(\"FAL_API_KEY\");\n        elizaLogger.log(\"FAL_API_KEY present:\", !!FalApiKey);\n        return !!FalApiKey;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state: State,\n        _options: any,\n        callback: HandlerCallback\n    ) => {\n        elizaLogger.log(\"3D generation request:\", message);\n\n        // Clean up the prompt by removing mentions and commands\n        const ThreeDPrompt = message.content.text\n            .replace(/<@\\d+>/g, \"\") // Remove mentions\n            .replace(\n                /generate 3D|create 3D|make 3D|render 3D/gi,\n                \"\"\n            ) // Remove commands\n            .trim();\n\n        if (!ThreeDPrompt || ThreeDPrompt.length < 3) {\n            callback({\n                text: \"Could you please provide more details about what kind of 3D object you'd like me to generate? For example: 'Generate a lovely cat'\",\n            });\n            return;\n        }\n\n        elizaLogger.log(\"3D prompt:\", ThreeDPrompt);\n\n        callback({\n            text: `I'll generate a 3D object based on your prompt: \"${ThreeDPrompt}\". This might take a few minutes...`,\n        });\n\n        try {\n            const result = await generate3D(ThreeDPrompt, runtime);\n\n            if (result.success && result.url && result.file_name) {\n                // Download the 3D file\n                const response = await fetch(result.url);\n                const arrayBuffer = await response.arrayBuffer();\n                const ThreeDFileName = `content_cache/generated_3d_${result.file_name}`;\n                \n                // ensure the directory is existed\n                const directoryPath = path.dirname(ThreeDFileName);\n                if (!fs.existsSync(directoryPath)) {\n                    fs.mkdirSync(directoryPath, { recursive: true });\n                }\n\n                // Save 3D file\n                fs.writeFileSync(ThreeDFileName, Buffer.from(arrayBuffer));\n\n                callback(\n                    {\n                        text: \"Here's your generated 3D object!\",\n                        attachments: [\n                            {\n                                id: crypto.randomUUID(),\n                                url: result.url,\n                                title: \"Generated 3D\",\n                                source: \"ThreeDGeneration\",\n                                description: ThreeDPrompt,\n                                text: ThreeDPrompt,\n                            },\n                        ],\n                    },\n                    [ThreeDFileName]\n                ); // Add the 3D file to the attachments\n            } else {\n                callback({\n                    text: `3D generation failed: ${result.error}`,\n                    error: true,\n                });\n            }\n        } catch (error) {\n            elizaLogger.error(`Failed to generate 3D. Error: ${error}`);\n            callback({\n                text: `3D generation failed: ${error.message}`,\n                error: true,\n            });\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Generate a 3D object of a cat playing piano\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll create a 3D object of a cat playing piano for you\",\n                    action: \"GENERATE_3D\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Can you make a 3D object of a anime character Goku?\",\n                },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll generate a 3D object of a anime character Goku for you\",\n                    action: \"GENERATE_3D\",\n                },\n            },\n        ],\n    ],\n} as Action;\n\nexport const ThreeDGenerationPlugin: Plugin = {\n    name: \"3DGeneration\",\n    description: \"Generate 3D using Hyper 3D\",\n    actions: [ThreeDGeneration],\n    evaluators: [],\n    providers: [],\n};\n","export const FAL_CONSTANTS = {\n    API_3D_ENDPOINT: \"fal-ai/hyper3d/rodin\",\n    API_KEY_SETTING: \"FAL_API_KEY\", // The setting name to fetch from runtime\n};\n"],"mappings":"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","names":[]}