{"version":3,"sources":["../src/actions/swap.ts","../src/utils/index.ts","../src/environment.ts","../src/actions/transfer.ts","../src/utils/ERC20Token.ts","../src/utils/erc20.json","../src/utils/starknetId.ts","../src/actions/unruggable.ts","../src/actions/subdomain.ts","../src/index.ts"],"sourcesContent":["import {\n    Action,\n    ActionExample,\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n} from \"@elizaos/core\";\nimport {\n    executeSwap as executeAvnuSwap,\n    fetchQuotes,\n    QuoteRequest,\n} from \"@avnu/avnu-sdk\";\n\nimport { getStarknetAccount } from \"../utils/index.ts\";\nimport { validateStarknetConfig } from \"../environment.ts\";\n\ninterface SwapContent {\n    sellTokenAddress: string;\n    buyTokenAddress: string;\n    sellAmount: string;\n}\n\nexport function isSwapContent(content: SwapContent): content is SwapContent {\n    // Validate types\n    const validTypes =\n        typeof content.sellTokenAddress === \"string\" &&\n        typeof content.buyTokenAddress === \"string\" &&\n        typeof content.sellAmount === \"string\";\n    if (!validTypes) {\n        return false;\n    }\n\n    // Validate addresses (must be 32-bytes long with 0x prefix)\n    const validAddresses =\n        content.sellTokenAddress.startsWith(\"0x\") &&\n        content.sellTokenAddress.length === 66 &&\n        content.buyTokenAddress.startsWith(\"0x\") &&\n        content.buyTokenAddress.length === 66;\n\n    return validAddresses;\n}\n\nconst swapTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nThese are known addresses you will get asked to swap, use these addresses for sellTokenAddress and buyTokenAddress:\n- BROTHER/brother/$brother: 0x03b405a98c9e795d427fe82cdeeeed803f221b52471e3a757574a2b4180793ee\n- BTC/btc: 0x03fe2b97c1fd336e750087d68b9b867997fd64a2661ff3ca5a7c771641e8e7ac\n- ETH/eth: 0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\n- STRK/strk: 0x04718f5a0fc34cc1af16a1cdee98ffb20c31f5cd61d6ab07201858f4287c938d\n- LORDS/lords: 0x0124aeb495b947201f5fac96fd1138e326ad86195b98df6dec9009158a533b49\n\nExample response:\n\\`\\`\\`json\n{\n    \"sellTokenAddress\": \"0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\",\n    \"buyTokenAddress\": \"0x124aeb495b947201f5fac96fd1138e326ad86195b98df6dec9009158a533b49\",\n    \"sellAmount\": \"1000000000000000000\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nExtract the following information about the requested token swap:\n- Sell token address\n- Buy token address\n- Amount to sell (in wei)\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.`;\n\nexport const executeSwap: Action = {\n    name: \"EXECUTE_STARKNET_SWAP\",\n    similes: [\n        \"STARKNET_SWAP_TOKENS\",\n        \"STARKNET_TOKEN_SWAP\",\n        \"STARKNET_TRADE_TOKENS\",\n        \"STARKNET_EXCHANGE_TOKENS\",\n    ],\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        await validateStarknetConfig(runtime);\n        return true;\n    },\n    description:\n        \"Perform a token swap on starknet. Use this action when a user asks you to swap tokens anything.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting EXECUTE_STARKNET_SWAP handler...\");\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        const swapContext = composeContext({\n            state,\n            template: swapTemplate,\n        });\n\n        const response = await generateObjectDeprecated({\n            runtime,\n            context: swapContext,\n            modelClass: ModelClass.MEDIUM,\n        });\n\n        elizaLogger.debug(\"Response:\", response);\n\n        if (!isSwapContent(response)) {\n            callback?.({ text: \"Invalid swap content, please try again.\" });\n            return false;\n        }\n\n        try {\n            // Get quote\n            const quoteParams: QuoteRequest = {\n                sellTokenAddress: response.sellTokenAddress,\n                buyTokenAddress: response.buyTokenAddress,\n                sellAmount: BigInt(response.sellAmount),\n            };\n\n            const quote = await fetchQuotes(quoteParams);\n\n            // Execute swap\n            const swapResult = await executeAvnuSwap(\n                getStarknetAccount(runtime),\n                quote[0],\n                {\n                    slippage: 0.05, // 5% slippage\n                    executeApprove: true,\n                }\n            );\n\n            elizaLogger.log(\n                \"Swap completed successfully! tx: \" + swapResult.transactionHash\n            );\n            callback?.({\n                text:\n                    \"Swap completed successfully! tx: \" +\n                    swapResult.transactionHash,\n            });\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during token swap:\", error);\n            callback?.({ text: `Error during swap:` });\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Swap 10 ETH for LORDS\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Ok, I'll swap 10 ETH for LORDS\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Swap 100 $lords on starknet\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Ok, I'll swap 100 $lords on starknet\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Swap 0.5 BTC for LORDS\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Ok, I'll swap 0.5 BTC for LORDS\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import { elizaLogger, IAgentRuntime } from \"@elizaos/core\";\nimport { Fraction, Percent } from \"@uniswap/sdk-core\";\nimport { Account, Contract, RpcProvider } from \"starknet\";\n\nexport const getTokenBalance = async (\n    runtime: IAgentRuntime,\n    tokenAddress: string\n) => {\n    const provider = getStarknetProvider(runtime);\n\n    const { abi: tokenAbi } = await provider.getClassAt(tokenAddress);\n    if (tokenAbi === undefined) {\n        throw new Error(\"no abi.\");\n    }\n\n    const tokenContract = new Contract(tokenAbi, tokenAddress, provider);\n\n    tokenContract.connect(getStarknetAccount(runtime));\n\n    return await tokenContract.balanceOf(tokenAddress);\n};\n\nexport const getStarknetProvider = (runtime: IAgentRuntime) => {\n    return new RpcProvider({\n        nodeUrl: runtime.getSetting(\"STARKNET_RPC_URL\"),\n    });\n};\n\nexport const getStarknetAccount = (runtime: IAgentRuntime) => {\n    return new Account(\n        getStarknetProvider(runtime),\n        runtime.getSetting(\"STARKNET_ADDRESS\"),\n        runtime.getSetting(\"STARKNET_PRIVATE_KEY\")\n    );\n};\n\nexport const getPercent = (amount: string | number, decimals: number) => {\n    return new Percent(amount, decimals);\n};\n\nexport const parseFormatedAmount = (amount: string) => amount.replace(/,/g, \"\");\n\nexport const PERCENTAGE_INPUT_PRECISION = 2;\n\nexport const parseFormatedPercentage = (percent: string) =>\n    new Percent(\n        +percent * 10 ** PERCENTAGE_INPUT_PRECISION,\n        100 * 10 ** PERCENTAGE_INPUT_PRECISION\n    );\n\ninterface ParseCurrencyAmountOptions {\n    fixed: number;\n    significant?: number;\n}\n\nexport const formatCurrenyAmount = (\n    amount: Fraction,\n    { fixed, significant = 1 }: ParseCurrencyAmountOptions\n) => {\n    const fixedAmount = amount.toFixed(fixed);\n    const significantAmount = amount.toSignificant(significant);\n\n    if (+significantAmount > +fixedAmount) return significantAmount;\n    else return +fixedAmount.toString();\n};\n\nexport const formatPercentage = (percentage: Percent) => {\n    const formatedPercentage = +percentage.toFixed(2);\n    const exact = percentage.equalTo(\n        new Percent(Math.round(formatedPercentage * 100), 10000)\n    );\n\n    return `${exact ? \"\" : \"~\"}${formatedPercentage}%`;\n};\n\nexport type RetryConfig = {\n    maxRetries?: number;\n    delay?: number;\n    maxDelay?: number;\n    backoff?: (retryCount: number, delay: number, maxDelay: number) => number;\n};\n\nexport async function fetchWithRetry<T>(\n    url: string,\n    options?: RequestInit,\n    config: RetryConfig = {}\n): Promise<T> {\n    const {\n        maxRetries = 3,\n        delay = 1000,\n        maxDelay = 10000,\n        backoff = (retryCount, baseDelay, maxDelay) =>\n            Math.min(baseDelay * Math.pow(2, retryCount), maxDelay),\n    } = config;\n\n    let lastError: Error | null = null;\n\n    for (let retryCount = 0; retryCount <= maxRetries; retryCount++) {\n        try {\n            const response = await fetch(url, options);\n\n            if (!response.ok) {\n                throw new Error(\n                    `Coingecko API HTTP status: ${response.status}`\n                );\n            }\n\n            return await response.json();\n        } catch (error) {\n            elizaLogger.debug(`Error fetching ${url}:`, error);\n            lastError = error as Error;\n\n            if (retryCount === maxRetries) break;\n\n            await new Promise((resolve) =>\n                setTimeout(resolve, backoff(retryCount, delay, maxDelay))\n            );\n            elizaLogger.debug(`Retry #${retryCount + 1} to fetch ${url}...`);\n        }\n    }\n\n    throw lastError;\n}\n","import { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\nconst STARKNET_PUBLIC_RPC = \"https://starknet-mainnet.public.blastapi.io\";\n\nexport const starknetEnvSchema = z.object({\n    STARKNET_ADDRESS: z.string().min(1, \"Starknet address is required\"),\n    STARKNET_PRIVATE_KEY: z.string().min(1, \"Starknet private key is required\"),\n    STARKNET_RPC_URL: z.string().min(1, \"Starknet RPC URL is required\"),\n});\n\nexport type StarknetConfig = z.infer<typeof starknetEnvSchema>;\n\nexport async function validateStarknetConfig(\n    runtime: IAgentRuntime\n): Promise<StarknetConfig> {\n    try {\n        const config = {\n            STARKNET_ADDRESS:\n                runtime.getSetting(\"STARKNET_ADDRESS\") ||\n                process.env.STARKNET_ADDRESS,\n            STARKNET_PRIVATE_KEY:\n                runtime.getSetting(\"STARKNET_PRIVATE_KEY\") ||\n                process.env.STARKNET_PRIVATE_KEY,\n            STARKNET_RPC_URL:\n                runtime.getSetting(\"STARKNET_RPC_URL\") ||\n                process.env.STARKNET_RPC_URL ||\n                STARKNET_PUBLIC_RPC,\n        };\n\n        return starknetEnvSchema.parse(config);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `Starknet configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}\n","// TODO: Implement this for Starknet.\n// It should just transfer tokens from the agent's wallet to the recipient.\n\nimport {\n    type Action,\n    ActionExample,\n    composeContext,\n    Content,\n    elizaLogger,\n    generateObjectDeprecated,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n} from \"@elizaos/core\";\nimport { getStarknetAccount } from \"../utils\";\nimport { ERC20Token } from \"../utils/ERC20Token\";\nimport { validateStarknetConfig } from \"../environment\";\nimport { getAddressFromName, isStarkDomain } from \"../utils/starknetId\";\n\nexport interface TransferContent extends Content {\n    tokenAddress: string;\n    recipient?: string;\n    starkName?: string;\n    amount: string | number;\n}\n\nexport function isTransferContent(\n    content: TransferContent\n): content is TransferContent {\n    // Validate types\n    const validTypes =\n        typeof content.tokenAddress === \"string\" &&\n        (typeof content.recipient === \"string\" ||\n            typeof content.starkName === \"string\") &&\n        (typeof content.amount === \"string\" ||\n            typeof content.amount === \"number\");\n    if (!validTypes) {\n        return false;\n    }\n\n    // Validate tokenAddress (must be 32-bytes long with 0x prefix)\n    const validTokenAddress =\n        content.tokenAddress.startsWith(\"0x\") &&\n        content.tokenAddress.length === 66;\n    if (!validTokenAddress) {\n        return false;\n    }\n\n    // Additional checks based on whether recipient or starkName is defined\n    if (content.recipient) {\n        // Validate recipient address (must be 32-bytes long with 0x prefix)\n        const validRecipient =\n            content.recipient.startsWith(\"0x\") &&\n            content.recipient.length === 66;\n        if (!validRecipient) {\n            return false;\n        }\n    } else if (content.starkName) {\n        // .stark name validation\n        const validStarkName = isStarkDomain(content.starkName);\n        if (!validStarkName) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nFor the amount to send, use a value from 1 - 100. Determine this based on your judgement of the recipient.\n\nthese are known addresses, if you get asked about them, use these:\n- BTC/btc: 0x03fe2b97c1fd336e750087d68b9b867997fd64a2661ff3ca5a7c771641e8e7ac\n- ETH/eth: 0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\n- STRK/strk: 0x04718f5a0fc34cc1af16a1cdee98ffb20c31f5cd61d6ab07201858f4287c938d\n- LORDS/lords: 0x0124aeb495b947201f5fac96fd1138e326ad86195b98df6dec9009158a533b49\n\nExample response:\n\\`\\`\\`json\n{\n    \"tokenAddress\": \"0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\",\n    \"recipient\": \"0x1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF\",\n    \"starkName\": \"domain.stark\",\n    \"amount\": \"0.001\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested token transfer:\n- Token contract address\n- Recipient wallet address\n- Recipient .stark name\n\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n    name: \"SEND_TOKEN\",\n    similes: [\n        \"TRANSFER_TOKEN_ON_STARKNET\",\n        \"TRANSFER_TOKENS_ON_STARKNET\",\n        \"SEND_TOKENS_ON_STARKNET\",\n        \"SEND_ETH_ON_STARKNET\",\n        \"PAY_ON_STARKNET\",\n    ],\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        await validateStarknetConfig(runtime);\n        return true;\n    },\n    description:\n        \"MUST use this action if the user requests send a token or transfer a token, the request might be varied, but it will always be a token transfer. If the user requests a transfer of lords, use this action.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting SEND_TOKEN handler...\");\n\n        // Initialize or update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        // Compose transfer context\n        const transferContext = composeContext({\n            state,\n            template: transferTemplate,\n        });\n\n        // Generate transfer content\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.MEDIUM,\n        });\n\n        elizaLogger.debug(\"Transfer content:\", content);\n\n        // Validate transfer content\n        if (!isTransferContent(content)) {\n            elizaLogger.error(\"Invalid content for TRANSFER_TOKEN action.\");\n            if (callback) {\n                callback({\n                    text: \"Not enough information to transfer tokens. Please respond with token address, recipient address or stark name, and amount.\",\n                    content: { error: \"Invalid transfer content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n            const account = getStarknetAccount(runtime);\n            const erc20Token = new ERC20Token(content.tokenAddress, account);\n            const decimals = await erc20Token.decimals();\n            // Convert decimal amount to integer before converting to BigInt\n            const amountInteger = Math.floor(\n                Number(content.amount) * Math.pow(10, Number(decimals))\n            );\n            const amountWei = BigInt(amountInteger.toString());\n            const recipient =\n                content.recipient ??\n                (await getAddressFromName(account, content.starkName));\n            const transferCall = erc20Token.transferCall(recipient, amountWei);\n\n            elizaLogger.success(\n                \"Transferring\",\n                amountWei,\n                \"of\",\n                content.tokenAddress,\n                \"to\",\n                recipient\n            );\n\n            const tx = await account.execute(transferCall);\n\n            elizaLogger.success(\n                \"Transfer completed successfully! tx: \" + tx.transaction_hash\n            );\n            if (callback) {\n                callback({\n                    text:\n                        \"Transfer completed successfully! tx: \" +\n                        tx.transaction_hash,\n                    content: {},\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during token transfer:\", error);\n            if (callback) {\n                callback({\n                    text: `Error transferring tokens: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send 10 ETH to 0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll transfer 10 ETH to that address right away. Let me process that for you.\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send 10 ETH to domain.stark\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll transfer 10 ETH to domain.stark et address 0x0124aeb495b947201f5fac96fd1138e326ad86195b98df6dec9009158a533b49 right away. Let me process that for you.\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Can you transfer 50 LORDS tokens to 0x0124aeb495b947201f5fac96fd1138e326ad86195b98df6dec9009158a533b49?\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Executing transfer of 50 LORDS tokens to the specified address. One moment please.\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Can you transfer 50 LORDS tokens to domain.stark?\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Executing transfer of 50 LORDS tokens to domain.stark at address 0x0124aeb495b947201f5fac96fd1138e326ad86195b98df6dec9009158a533b49. One moment please.\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Please send 0.5 BTC to 0x03fe2b97c1fd336e750087d68b9b867997fd64a2661ff3ca5a7c771641e8e7ac\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Got it, initiating transfer of 0.5 BTC to the provided address. I'll confirm once it's complete.\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Please send 0.5 BTC to domain.stark\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Got it, initiating transfer of 0.5 BTC to domain.stark at address 0x03fe2b97c1fd336e750087d68b9b867997fd64a2661ff3ca5a7c771641e8e7ac. I'll confirm once it's complete.\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import {\n    AccountInterface,\n    cairo,\n    CallData,\n    Calldata,\n    Contract,\n    ProviderInterface,\n} from \"starknet\";\nimport erc20Abi from \"./erc20.json\";\n\nexport type ApproveCall = {\n    contractAddress: string;\n    entrypoint: \"approve\";\n    calldata: Calldata;\n};\n\nexport type TransferCall = {\n    contractAddress: string;\n    entrypoint: \"transfer\";\n    calldata: Calldata;\n};\n\nexport class ERC20Token {\n    abi: any;\n    contract: Contract;\n    calldata: CallData;\n    constructor(\n        token: string,\n        providerOrAccount?: ProviderInterface | AccountInterface\n    ) {\n        this.contract = new Contract(erc20Abi, token, providerOrAccount);\n        this.calldata = new CallData(this.contract.abi);\n    }\n\n    public address() {\n        return this.contract.address;\n    }\n\n    public async balanceOf(account: string): Promise<bigint> {\n        const result = await this.contract.call(\"balance_of\", [account]);\n        return result as bigint;\n    }\n\n    public async decimals() {\n        const result = await this.contract.call(\"decimals\");\n        return result as bigint;\n    }\n\n    public approveCall(spender: string, amount: bigint): ApproveCall {\n        return {\n            contractAddress: this.contract.address,\n            entrypoint: \"approve\",\n            calldata: this.calldata.compile(\"approve\", {\n                spender: spender,\n                amount: cairo.uint256(amount),\n            }),\n        };\n    }\n\n    public transferCall(recipient: string, amount: bigint): TransferCall {\n        return {\n            contractAddress: this.contract.address,\n            entrypoint: \"transfer\",\n            calldata: this.calldata.compile(\"transfer\", {\n                recipient: recipient,\n                amount: cairo.uint256(amount),\n            }),\n        };\n    }\n}\n","[\n    {\n        \"name\": \"MintableToken\",\n        \"type\": \"impl\",\n        \"interface_name\": \"src::mintable_token_interface::IMintableToken\"\n    },\n    {\n        \"name\": \"core::integer::u256\",\n        \"type\": \"struct\",\n        \"members\": [\n            {\n                \"name\": \"low\",\n                \"type\": \"core::integer::u128\"\n            },\n            {\n                \"name\": \"high\",\n                \"type\": \"core::integer::u128\"\n            }\n        ]\n    },\n    {\n        \"name\": \"src::mintable_token_interface::IMintableToken\",\n        \"type\": \"interface\",\n        \"items\": [\n            {\n                \"name\": \"permissioned_mint\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"account\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    },\n                    {\n                        \"name\": \"amount\",\n                        \"type\": \"core::integer::u256\"\n                    }\n                ],\n                \"outputs\": [],\n                \"state_mutability\": \"external\"\n            },\n            {\n                \"name\": \"permissioned_burn\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"account\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    },\n                    {\n                        \"name\": \"amount\",\n                        \"type\": \"core::integer::u256\"\n                    }\n                ],\n                \"outputs\": [],\n                \"state_mutability\": \"external\"\n            }\n        ]\n    },\n    {\n        \"name\": \"MintableTokenCamelImpl\",\n        \"type\": \"impl\",\n        \"interface_name\": \"src::mintable_token_interface::IMintableTokenCamel\"\n    },\n    {\n        \"name\": \"src::mintable_token_interface::IMintableTokenCamel\",\n        \"type\": \"interface\",\n        \"items\": [\n            {\n                \"name\": \"permissionedMint\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"account\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    },\n                    {\n                        \"name\": \"amount\",\n                        \"type\": \"core::integer::u256\"\n                    }\n                ],\n                \"outputs\": [],\n                \"state_mutability\": \"external\"\n            },\n            {\n                \"name\": \"permissionedBurn\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"account\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    },\n                    {\n                        \"name\": \"amount\",\n                        \"type\": \"core::integer::u256\"\n                    }\n                ],\n                \"outputs\": [],\n                \"state_mutability\": \"external\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Replaceable\",\n        \"type\": \"impl\",\n        \"interface_name\": \"src::replaceability_interface::IReplaceable\"\n    },\n    {\n        \"name\": \"core::array::Span::<core::felt252>\",\n        \"type\": \"struct\",\n        \"members\": [\n            {\n                \"name\": \"snapshot\",\n                \"type\": \"@core::array::Array::<core::felt252>\"\n            }\n        ]\n    },\n    {\n        \"name\": \"src::replaceability_interface::EICData\",\n        \"type\": \"struct\",\n        \"members\": [\n            {\n                \"name\": \"eic_hash\",\n                \"type\": \"core::starknet::class_hash::ClassHash\"\n            },\n            {\n                \"name\": \"eic_init_data\",\n                \"type\": \"core::array::Span::<core::felt252>\"\n            }\n        ]\n    },\n    {\n        \"name\": \"core::option::Option::<src::replaceability_interface::EICData>\",\n        \"type\": \"enum\",\n        \"variants\": [\n            {\n                \"name\": \"Some\",\n                \"type\": \"src::replaceability_interface::EICData\"\n            },\n            {\n                \"name\": \"None\",\n                \"type\": \"()\"\n            }\n        ]\n    },\n    {\n        \"name\": \"core::bool\",\n        \"type\": \"enum\",\n        \"variants\": [\n            {\n                \"name\": \"False\",\n                \"type\": \"()\"\n            },\n            {\n                \"name\": \"True\",\n                \"type\": \"()\"\n            }\n        ]\n    },\n    {\n        \"name\": \"src::replaceability_interface::ImplementationData\",\n        \"type\": \"struct\",\n        \"members\": [\n            {\n                \"name\": \"impl_hash\",\n                \"type\": \"core::starknet::class_hash::ClassHash\"\n            },\n            {\n                \"name\": \"eic_data\",\n                \"type\": \"core::option::Option::<src::replaceability_interface::EICData>\"\n            },\n            {\n                \"name\": \"final\",\n                \"type\": \"core::bool\"\n            }\n        ]\n    },\n    {\n        \"name\": \"src::replaceability_interface::IReplaceable\",\n        \"type\": \"interface\",\n        \"items\": [\n            {\n                \"name\": \"get_upgrade_delay\",\n                \"type\": \"function\",\n                \"inputs\": [],\n                \"outputs\": [\n                    {\n                        \"type\": \"core::integer::u64\"\n                    }\n                ],\n                \"state_mutability\": \"view\"\n            },\n            {\n                \"name\": \"get_impl_activation_time\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"implementation_data\",\n                        \"type\": \"src::replaceability_interface::ImplementationData\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"type\": \"core::integer::u64\"\n                    }\n                ],\n                \"state_mutability\": \"view\"\n            },\n            {\n                \"name\": \"add_new_implementation\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"implementation_data\",\n                        \"type\": \"src::replaceability_interface::ImplementationData\"\n                    }\n                ],\n                \"outputs\": [],\n                \"state_mutability\": \"external\"\n            },\n            {\n                \"name\": \"remove_implementation\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"implementation_data\",\n                        \"type\": \"src::replaceability_interface::ImplementationData\"\n                    }\n                ],\n                \"outputs\": [],\n                \"state_mutability\": \"external\"\n            },\n            {\n                \"name\": \"replace_to\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"implementation_data\",\n                        \"type\": \"src::replaceability_interface::ImplementationData\"\n                    }\n                ],\n                \"outputs\": [],\n                \"state_mutability\": \"external\"\n            }\n        ]\n    },\n    {\n        \"name\": \"AccessControlImplExternal\",\n        \"type\": \"impl\",\n        \"interface_name\": \"src::access_control_interface::IAccessControl\"\n    },\n    {\n        \"name\": \"src::access_control_interface::IAccessControl\",\n        \"type\": \"interface\",\n        \"items\": [\n            {\n                \"name\": \"has_role\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"role\",\n                        \"type\": \"core::felt252\"\n                    },\n                    {\n                        \"name\": \"account\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"type\": \"core::bool\"\n                    }\n                ],\n                \"state_mutability\": \"view\"\n            },\n            {\n                \"name\": \"get_role_admin\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"role\",\n                        \"type\": \"core::felt252\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"type\": \"core::felt252\"\n                    }\n                ],\n                \"state_mutability\": \"view\"\n            }\n        ]\n    },\n    {\n        \"name\": \"RolesImpl\",\n        \"type\": \"impl\",\n        \"interface_name\": \"src::roles_interface::IMinimalRoles\"\n    },\n    {\n        \"name\": \"src::roles_interface::IMinimalRoles\",\n        \"type\": \"interface\",\n        \"items\": [\n            {\n                \"name\": \"is_governance_admin\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"account\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"type\": \"core::bool\"\n                    }\n                ],\n                \"state_mutability\": \"view\"\n            },\n            {\n                \"name\": \"is_upgrade_governor\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"account\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"type\": \"core::bool\"\n                    }\n                ],\n                \"state_mutability\": \"view\"\n            },\n            {\n                \"name\": \"register_governance_admin\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"account\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    }\n                ],\n                \"outputs\": [],\n                \"state_mutability\": \"external\"\n            },\n            {\n                \"name\": \"remove_governance_admin\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"account\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    }\n                ],\n                \"outputs\": [],\n                \"state_mutability\": \"external\"\n            },\n            {\n                \"name\": \"register_upgrade_governor\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"account\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    }\n                ],\n                \"outputs\": [],\n                \"state_mutability\": \"external\"\n            },\n            {\n                \"name\": \"remove_upgrade_governor\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"account\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    }\n                ],\n                \"outputs\": [],\n                \"state_mutability\": \"external\"\n            },\n            {\n                \"name\": \"renounce\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"role\",\n                        \"type\": \"core::felt252\"\n                    }\n                ],\n                \"outputs\": [],\n                \"state_mutability\": \"external\"\n            }\n        ]\n    },\n    {\n        \"name\": \"ERC20Impl\",\n        \"type\": \"impl\",\n        \"interface_name\": \"openzeppelin::token::erc20::interface::IERC20\"\n    },\n    {\n        \"name\": \"openzeppelin::token::erc20::interface::IERC20\",\n        \"type\": \"interface\",\n        \"items\": [\n            {\n                \"name\": \"name\",\n                \"type\": \"function\",\n                \"inputs\": [],\n                \"outputs\": [\n                    {\n                        \"type\": \"core::felt252\"\n                    }\n                ],\n                \"state_mutability\": \"view\"\n            },\n            {\n                \"name\": \"symbol\",\n                \"type\": \"function\",\n                \"inputs\": [],\n                \"outputs\": [\n                    {\n                        \"type\": \"core::felt252\"\n                    }\n                ],\n                \"state_mutability\": \"view\"\n            },\n            {\n                \"name\": \"decimals\",\n                \"type\": \"function\",\n                \"inputs\": [],\n                \"outputs\": [\n                    {\n                        \"type\": \"core::integer::u8\"\n                    }\n                ],\n                \"state_mutability\": \"view\"\n            },\n            {\n                \"name\": \"total_supply\",\n                \"type\": \"function\",\n                \"inputs\": [],\n                \"outputs\": [\n                    {\n                        \"type\": \"core::integer::u256\"\n                    }\n                ],\n                \"state_mutability\": \"view\"\n            },\n            {\n                \"name\": \"balance_of\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"account\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"type\": \"core::integer::u256\"\n                    }\n                ],\n                \"state_mutability\": \"view\"\n            },\n            {\n                \"name\": \"allowance\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"owner\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    },\n                    {\n                        \"name\": \"spender\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"type\": \"core::integer::u256\"\n                    }\n                ],\n                \"state_mutability\": \"view\"\n            },\n            {\n                \"name\": \"transfer\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"recipient\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    },\n                    {\n                        \"name\": \"amount\",\n                        \"type\": \"core::integer::u256\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"type\": \"core::bool\"\n                    }\n                ],\n                \"state_mutability\": \"external\"\n            },\n            {\n                \"name\": \"transfer_from\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"sender\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    },\n                    {\n                        \"name\": \"recipient\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    },\n                    {\n                        \"name\": \"amount\",\n                        \"type\": \"core::integer::u256\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"type\": \"core::bool\"\n                    }\n                ],\n                \"state_mutability\": \"external\"\n            },\n            {\n                \"name\": \"approve\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"spender\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    },\n                    {\n                        \"name\": \"amount\",\n                        \"type\": \"core::integer::u256\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"type\": \"core::bool\"\n                    }\n                ],\n                \"state_mutability\": \"external\"\n            }\n        ]\n    },\n    {\n        \"name\": \"ERC20CamelOnlyImpl\",\n        \"type\": \"impl\",\n        \"interface_name\": \"openzeppelin::token::erc20::interface::IERC20CamelOnly\"\n    },\n    {\n        \"name\": \"openzeppelin::token::erc20::interface::IERC20CamelOnly\",\n        \"type\": \"interface\",\n        \"items\": [\n            {\n                \"name\": \"totalSupply\",\n                \"type\": \"function\",\n                \"inputs\": [],\n                \"outputs\": [\n                    {\n                        \"type\": \"core::integer::u256\"\n                    }\n                ],\n                \"state_mutability\": \"view\"\n            },\n            {\n                \"name\": \"balanceOf\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"account\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"type\": \"core::integer::u256\"\n                    }\n                ],\n                \"state_mutability\": \"view\"\n            },\n            {\n                \"name\": \"transferFrom\",\n                \"type\": \"function\",\n                \"inputs\": [\n                    {\n                        \"name\": \"sender\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    },\n                    {\n                        \"name\": \"recipient\",\n                        \"type\": \"core::starknet::contract_address::ContractAddress\"\n                    },\n                    {\n                        \"name\": \"amount\",\n                        \"type\": \"core::integer::u256\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"type\": \"core::bool\"\n                    }\n                ],\n                \"state_mutability\": \"external\"\n            }\n        ]\n    },\n    {\n        \"name\": \"constructor\",\n        \"type\": \"constructor\",\n        \"inputs\": [\n            {\n                \"name\": \"name\",\n                \"type\": \"core::felt252\"\n            },\n            {\n                \"name\": \"symbol\",\n                \"type\": \"core::felt252\"\n            },\n            {\n                \"name\": \"decimals\",\n                \"type\": \"core::integer::u8\"\n            },\n            {\n                \"name\": \"initial_supply\",\n                \"type\": \"core::integer::u256\"\n            },\n            {\n                \"name\": \"recipient\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            },\n            {\n                \"name\": \"permitted_minter\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            },\n            {\n                \"name\": \"provisional_governance_admin\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            },\n            {\n                \"name\": \"upgrade_delay\",\n                \"type\": \"core::integer::u64\"\n            }\n        ]\n    },\n    {\n        \"name\": \"increase_allowance\",\n        \"type\": \"function\",\n        \"inputs\": [\n            {\n                \"name\": \"spender\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            },\n            {\n                \"name\": \"added_value\",\n                \"type\": \"core::integer::u256\"\n            }\n        ],\n        \"outputs\": [\n            {\n                \"type\": \"core::bool\"\n            }\n        ],\n        \"state_mutability\": \"external\"\n    },\n    {\n        \"name\": \"decrease_allowance\",\n        \"type\": \"function\",\n        \"inputs\": [\n            {\n                \"name\": \"spender\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            },\n            {\n                \"name\": \"subtracted_value\",\n                \"type\": \"core::integer::u256\"\n            }\n        ],\n        \"outputs\": [\n            {\n                \"type\": \"core::bool\"\n            }\n        ],\n        \"state_mutability\": \"external\"\n    },\n    {\n        \"name\": \"increaseAllowance\",\n        \"type\": \"function\",\n        \"inputs\": [\n            {\n                \"name\": \"spender\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            },\n            {\n                \"name\": \"addedValue\",\n                \"type\": \"core::integer::u256\"\n            }\n        ],\n        \"outputs\": [\n            {\n                \"type\": \"core::bool\"\n            }\n        ],\n        \"state_mutability\": \"external\"\n    },\n    {\n        \"name\": \"decreaseAllowance\",\n        \"type\": \"function\",\n        \"inputs\": [\n            {\n                \"name\": \"spender\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            },\n            {\n                \"name\": \"subtractedValue\",\n                \"type\": \"core::integer::u256\"\n            }\n        ],\n        \"outputs\": [\n            {\n                \"type\": \"core::bool\"\n            }\n        ],\n        \"state_mutability\": \"external\"\n    },\n    {\n        \"kind\": \"struct\",\n        \"name\": \"openzeppelin::token::erc20_v070::erc20::ERC20::Transfer\",\n        \"type\": \"event\",\n        \"members\": [\n            {\n                \"kind\": \"data\",\n                \"name\": \"from\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            },\n            {\n                \"kind\": \"data\",\n                \"name\": \"to\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            },\n            {\n                \"kind\": \"data\",\n                \"name\": \"value\",\n                \"type\": \"core::integer::u256\"\n            }\n        ]\n    },\n    {\n        \"kind\": \"struct\",\n        \"name\": \"openzeppelin::token::erc20_v070::erc20::ERC20::Approval\",\n        \"type\": \"event\",\n        \"members\": [\n            {\n                \"kind\": \"data\",\n                \"name\": \"owner\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            },\n            {\n                \"kind\": \"data\",\n                \"name\": \"spender\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            },\n            {\n                \"kind\": \"data\",\n                \"name\": \"value\",\n                \"type\": \"core::integer::u256\"\n            }\n        ]\n    },\n    {\n        \"kind\": \"struct\",\n        \"name\": \"src::replaceability_interface::ImplementationAdded\",\n        \"type\": \"event\",\n        \"members\": [\n            {\n                \"kind\": \"data\",\n                \"name\": \"implementation_data\",\n                \"type\": \"src::replaceability_interface::ImplementationData\"\n            }\n        ]\n    },\n    {\n        \"kind\": \"struct\",\n        \"name\": \"src::replaceability_interface::ImplementationRemoved\",\n        \"type\": \"event\",\n        \"members\": [\n            {\n                \"kind\": \"data\",\n                \"name\": \"implementation_data\",\n                \"type\": \"src::replaceability_interface::ImplementationData\"\n            }\n        ]\n    },\n    {\n        \"kind\": \"struct\",\n        \"name\": \"src::replaceability_interface::ImplementationReplaced\",\n        \"type\": \"event\",\n        \"members\": [\n            {\n                \"kind\": \"data\",\n                \"name\": \"implementation_data\",\n                \"type\": \"src::replaceability_interface::ImplementationData\"\n            }\n        ]\n    },\n    {\n        \"kind\": \"struct\",\n        \"name\": \"src::replaceability_interface::ImplementationFinalized\",\n        \"type\": \"event\",\n        \"members\": [\n            {\n                \"kind\": \"data\",\n                \"name\": \"impl_hash\",\n                \"type\": \"core::starknet::class_hash::ClassHash\"\n            }\n        ]\n    },\n    {\n        \"kind\": \"struct\",\n        \"name\": \"src::access_control_interface::RoleGranted\",\n        \"type\": \"event\",\n        \"members\": [\n            {\n                \"kind\": \"data\",\n                \"name\": \"role\",\n                \"type\": \"core::felt252\"\n            },\n            {\n                \"kind\": \"data\",\n                \"name\": \"account\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            },\n            {\n                \"kind\": \"data\",\n                \"name\": \"sender\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            }\n        ]\n    },\n    {\n        \"kind\": \"struct\",\n        \"name\": \"src::access_control_interface::RoleRevoked\",\n        \"type\": \"event\",\n        \"members\": [\n            {\n                \"kind\": \"data\",\n                \"name\": \"role\",\n                \"type\": \"core::felt252\"\n            },\n            {\n                \"kind\": \"data\",\n                \"name\": \"account\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            },\n            {\n                \"kind\": \"data\",\n                \"name\": \"sender\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            }\n        ]\n    },\n    {\n        \"kind\": \"struct\",\n        \"name\": \"src::access_control_interface::RoleAdminChanged\",\n        \"type\": \"event\",\n        \"members\": [\n            {\n                \"kind\": \"data\",\n                \"name\": \"role\",\n                \"type\": \"core::felt252\"\n            },\n            {\n                \"kind\": \"data\",\n                \"name\": \"previous_admin_role\",\n                \"type\": \"core::felt252\"\n            },\n            {\n                \"kind\": \"data\",\n                \"name\": \"new_admin_role\",\n                \"type\": \"core::felt252\"\n            }\n        ]\n    },\n    {\n        \"kind\": \"struct\",\n        \"name\": \"src::roles_interface::GovernanceAdminAdded\",\n        \"type\": \"event\",\n        \"members\": [\n            {\n                \"kind\": \"data\",\n                \"name\": \"added_account\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            },\n            {\n                \"kind\": \"data\",\n                \"name\": \"added_by\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            }\n        ]\n    },\n    {\n        \"kind\": \"struct\",\n        \"name\": \"src::roles_interface::GovernanceAdminRemoved\",\n        \"type\": \"event\",\n        \"members\": [\n            {\n                \"kind\": \"data\",\n                \"name\": \"removed_account\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            },\n            {\n                \"kind\": \"data\",\n                \"name\": \"removed_by\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            }\n        ]\n    },\n    {\n        \"kind\": \"struct\",\n        \"name\": \"src::roles_interface::UpgradeGovernorAdded\",\n        \"type\": \"event\",\n        \"members\": [\n            {\n                \"kind\": \"data\",\n                \"name\": \"added_account\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            },\n            {\n                \"kind\": \"data\",\n                \"name\": \"added_by\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            }\n        ]\n    },\n    {\n        \"kind\": \"struct\",\n        \"name\": \"src::roles_interface::UpgradeGovernorRemoved\",\n        \"type\": \"event\",\n        \"members\": [\n            {\n                \"kind\": \"data\",\n                \"name\": \"removed_account\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            },\n            {\n                \"kind\": \"data\",\n                \"name\": \"removed_by\",\n                \"type\": \"core::starknet::contract_address::ContractAddress\"\n            }\n        ]\n    },\n    {\n        \"kind\": \"enum\",\n        \"name\": \"openzeppelin::token::erc20_v070::erc20::ERC20::Event\",\n        \"type\": \"event\",\n        \"variants\": [\n            {\n                \"kind\": \"nested\",\n                \"name\": \"Transfer\",\n                \"type\": \"openzeppelin::token::erc20_v070::erc20::ERC20::Transfer\"\n            },\n            {\n                \"kind\": \"nested\",\n                \"name\": \"Approval\",\n                \"type\": \"openzeppelin::token::erc20_v070::erc20::ERC20::Approval\"\n            },\n            {\n                \"kind\": \"nested\",\n                \"name\": \"ImplementationAdded\",\n                \"type\": \"src::replaceability_interface::ImplementationAdded\"\n            },\n            {\n                \"kind\": \"nested\",\n                \"name\": \"ImplementationRemoved\",\n                \"type\": \"src::replaceability_interface::ImplementationRemoved\"\n            },\n            {\n                \"kind\": \"nested\",\n                \"name\": \"ImplementationReplaced\",\n                \"type\": \"src::replaceability_interface::ImplementationReplaced\"\n            },\n            {\n                \"kind\": \"nested\",\n                \"name\": \"ImplementationFinalized\",\n                \"type\": \"src::replaceability_interface::ImplementationFinalized\"\n            },\n            {\n                \"kind\": \"nested\",\n                \"name\": \"RoleGranted\",\n                \"type\": \"src::access_control_interface::RoleGranted\"\n            },\n            {\n                \"kind\": \"nested\",\n                \"name\": \"RoleRevoked\",\n                \"type\": \"src::access_control_interface::RoleRevoked\"\n            },\n            {\n                \"kind\": \"nested\",\n                \"name\": \"RoleAdminChanged\",\n                \"type\": \"src::access_control_interface::RoleAdminChanged\"\n            },\n            {\n                \"kind\": \"nested\",\n                \"name\": \"GovernanceAdminAdded\",\n                \"type\": \"src::roles_interface::GovernanceAdminAdded\"\n            },\n            {\n                \"kind\": \"nested\",\n                \"name\": \"GovernanceAdminRemoved\",\n                \"type\": \"src::roles_interface::GovernanceAdminRemoved\"\n            },\n            {\n                \"kind\": \"nested\",\n                \"name\": \"UpgradeGovernorAdded\",\n                \"type\": \"src::roles_interface::UpgradeGovernorAdded\"\n            },\n            {\n                \"kind\": \"nested\",\n                \"name\": \"UpgradeGovernorRemoved\",\n                \"type\": \"src::roles_interface::UpgradeGovernorRemoved\"\n            }\n        ]\n    }\n]\n","import { Account, starknetId } from \"starknet\";\n\nexport const isStarkDomain = (domain: string): boolean => {\n    return /^(?:[a-z0-9-]{1,48}(?:[a-z0-9-]{1,48}[a-z0-9-])?\\.)*[a-z0-9-]{1,48}\\.stark$/.test(\n        domain\n    );\n};\n\nexport const getAddressFromName = async (\n    account: Account,\n    name: string\n): Promise<string> => {\n    const address = await account.getAddressFromStarkName(name);\n    if (!address.startsWith(\"0x\") || address === \"0x0\") {\n        throw new Error(\"Invalid address\");\n    }\n    return address;\n};\n\nexport const getTransferSubdomainCall = (\n    account: string,\n    domain: string,\n    recipient: string\n) => {\n    const namingContract = process.env.STARKNETID_NAMING_CONTRACT;\n    const identityContract = process.env.STARKNETID_IDENTITY_CONTRACT;\n    const newTokenId: number = Math.floor(Math.random() * 1000000000000);\n    const domainParts = domain.replace(\".stark\", \"\").split(\".\");\n\n    const encodedDomain: string[] = domainParts.map((d) =>\n        starknetId.useEncoded(d).toString(10)\n    );\n\n    return [\n        {\n            contractAddress: identityContract,\n            entrypoint: \"mint\",\n            calldata: [newTokenId],\n        },\n        {\n            contractAddress: namingContract,\n            entrypoint: \"transfer_domain\",\n            calldata: [domainParts.length, ...encodedDomain, newTokenId],\n        },\n        {\n            contractAddress: identityContract,\n            entrypoint: \"transfer_from\",\n            calldata: [account, recipient, newTokenId, 0],\n        },\n    ];\n};\n","import {\n    type Action,\n    ActionExample,\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n} from \"@elizaos/core\";\nimport { Percent } from \"@uniswap/sdk-core\";\nimport { createMemecoin, launchOnEkubo } from \"unruggable-sdk\";\n\nimport { getStarknetAccount, getStarknetProvider } from \"../utils/index.ts\";\n// import { DeployData, Factory } from \"@unruggable_starknet/core\";\n// import { AMM, QUOTE_TOKEN_SYMBOL } from \"@unruggable_starknet/core/constants\";\nimport { ACCOUNTS, TOKENS } from \"../utils/constants.ts\";\nimport { validateStarknetConfig } from \"../environment.ts\";\n\n// interface SwapContent {\n//     sellTokenAddress: string;\n//     buyTokenAddress: string;\n//     sellAmount: string;\n// }\n\ninterface DeployTokenContent {\n    name: string;\n    symbol: string;\n    owner: string;\n    initialSupply: string;\n}\n\nexport function isDeployTokenContent(content: DeployTokenContent) {\n    // Validate types\n    const validTypes =\n        typeof content.name === \"string\" &&\n        typeof content.symbol === \"string\" &&\n        typeof content.owner === \"string\" &&\n        typeof content.initialSupply === \"string\";\n    if (!validTypes) {\n        return false;\n    }\n\n    // Validate addresses (must be 32-bytes long with 0x prefix)\n    const validAddresses =\n        content.name.length > 2 &&\n        content.symbol.length > 2 &&\n        parseInt(content.initialSupply) > 0 &&\n        content.owner.startsWith(\"0x\") &&\n        content.owner.length === 66;\n\n    return validAddresses;\n}\n\nconst deployTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"name\": \"Brother\",\n    \"symbol\": \"BROTHER\",\n    \"owner\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"initialSupply\": \"1000000000000000000\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nExtract the following information about the requested token deployment:\n- Token Name\n- Token Symbol\n- Token Owner\n- Token initial supply\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.`;\n\nexport const deployToken: Action = {\n    name: \"DEPLOY_STARKNET_UNRUGGABLE_MEME_TOKEN\",\n    similes: [\n        \"DEPLOY_STARKNET_UNRUGGABLE_TOKEN\",\n        \"STARKNET_DEPLOY_MEMECOIN\",\n        \"STARKNET_CREATE_MEMECOIN\",\n    ],\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        await validateStarknetConfig(runtime);\n        return true;\n    },\n    description:\n        \"Deploy an Unruggable Memecoin on Starknet. Use this action when a user asks you to deploy a new token on Starknet.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\n            \"Starting DEPLOY_STARKNET_UNRUGGABLE_MEME_TOKEN handler...\"\n        );\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        const deployContext = composeContext({\n            state,\n            template: deployTemplate,\n        });\n\n        const response = await generateObjectDeprecated({\n            runtime,\n            context: deployContext,\n            modelClass: ModelClass.MEDIUM,\n        });\n\n        elizaLogger.log(\"init supply.\" + response.initialSupply);\n        elizaLogger.log(response);\n\n        if (!isDeployTokenContent(response)) {\n            callback?.({\n                text: \"Invalid deployment content, please try again.\",\n            });\n            return false;\n        }\n\n        try {\n            const provider = getStarknetProvider(runtime);\n            const account = getStarknetAccount(runtime);\n\n            const chainId = await provider.getChainId();\n            const config = {\n                starknetChainId: chainId,\n                starknetProvider: provider,\n            };\n\n            const { tokenAddress, transactionHash } = await createMemecoin(\n                config,\n                {\n                    name: response.name,\n                    symbol: response.symbol,\n                    owner: response.owner,\n                    initialSupply: response.initialSupply,\n                    starknetAccount: account,\n                }\n            );\n\n            elizaLogger.log(\n                \"Token deployment initiated for: \" +\n                    response.name +\n                    \" at address: \" +\n                    tokenAddress\n            );\n\n            await launchOnEkubo(config, {\n                antiBotPeriodInSecs: 3600,\n                currencyAddress: TOKENS.LORDS,\n                fees: \"3\",\n                holdLimit: \"2\",\n                memecoinAddress: tokenAddress,\n                starknetAccount: account,\n                startingMarketCap: \"5000\",\n                teamAllocations: [\n                    {\n                        address: ACCOUNTS.ELIZA,\n                        amount: new Percent(\n                            2.5,\n                            response.initialSupply\n                        ).toFixed(0),\n                    },\n                    {\n                        address: ACCOUNTS.BLOBERT,\n                        amount: new Percent(\n                            2.5,\n                            response.initialSupply\n                        ).toFixed(0),\n                    },\n                ],\n            });\n\n            callback?.({\n                text:\n                    \"Token Deployment completed successfully!\" +\n                    response.symbol +\n                    \" deployed in tx: \" +\n                    transactionHash,\n            });\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during token deployment:\", error);\n            callback?.({\n                text: `Error during deployment: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deploy a new token called Lords with the symbol LORDS, owned by 0x024BA6a4023fB90962bDfc2314F3B94372aa382D155291635fc3E6b777657A5B and initial supply of 1000000000000000000 on Starknet\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Ok, I'll deploy the Lords token to Starknet\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Deploy the SLINK coin to Starknet\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Ok, I'll deploy your coin on Starknet\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Create a new coin on Starknet\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Ok, I'll create a new coin for you on Starknet\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","// It should just transfer subdomain from the root domain owned by the agent's wallet to the recipient.\n\nimport {\n    ActionExample,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n    type Action,\n    composeContext,\n    generateObjectDeprecated,\n    Content,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport { getStarknetAccount } from \"../utils\";\nimport { validateStarknetConfig } from \"../environment\";\nimport { getTransferSubdomainCall, isStarkDomain } from \"../utils/starknetId\";\n\nexport interface SubdomainCreationContent extends Content {\n    recipient: string;\n    subdomain: string;\n}\n\nexport function isSubdomainCreation(\n    content: SubdomainCreationContent\n): content is SubdomainCreationContent {\n    // Validate types\n    const validTypes =\n        typeof content.recipient === \"string\" &&\n        typeof content.subdomain === \"string\";\n    if (!validTypes) {\n        return false;\n    }\n\n    // Validate recipient (must be 32-bytes long with 0x prefix)\n    const validTokenAddress =\n        content.recipient.startsWith(\"0x\") && content.recipient.length === 66;\n    if (!validTokenAddress) {\n        return false;\n    }\n\n    // Validate subdomain\n    const validStarkName =\n        isStarkDomain(content.subdomain) &&\n        content.subdomain.split(\".\").length === 3;\n\n    if (!validStarkName) {\n        return false;\n    }\n    return true;\n}\n\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"recipient\": \"0x1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF\",\n    \"subdomain\": \"subdomain.domain.stark\",\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested subdomain creation:\n- Subdomain to create\n- Recipient wallet address\n\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n    name: \"CREATE_SUBDOMAIN\",\n    similes: [\n        \"CREATE_SUBDOMAIN_ON_STARKNET\",\n        \"SUBDOMAIN_ON_STARKNET\",\n        \"SUBDOMAIN_CREATION\",\n        \"SEND_SUBDOMAIN_ON_STARKNET\",\n    ],\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        await validateStarknetConfig(runtime);\n        return true;\n    },\n    description:\n        \"MUST use this action if the user requests create a subdomain, the request might be varied, but it will always be a subdomain creation.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting CREATE_SUBDOMAIN handler...\");\n\n        // Initialize or update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        // Compose transfer context\n        const transferContext = composeContext({\n            state,\n            template: transferTemplate,\n        });\n\n        // Generate transfer content\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.MEDIUM,\n        });\n\n        elizaLogger.debug(\"Transfer content:\", content);\n\n        // Validate transfer content\n        if (!isSubdomainCreation(content)) {\n            elizaLogger.error(\"Invalid content for CREATE_SUBDOMAIN action.\");\n            if (callback) {\n                callback({\n                    text: \"Not enough information to create subdomain. Please respond with your domain and the subdomain to create.\",\n                    content: { error: \"Invalid subdomain creation content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n            const account = getStarknetAccount(runtime);\n\n            const transferCall = getTransferSubdomainCall(\n                account.address,\n                content.subdomain,\n                content.recipient\n            );\n\n            elizaLogger.success(\n                \"Transferring\",\n                content.subdomain,\n                \"to\",\n                content.recipient\n            );\n\n            const tx = await account.execute(transferCall);\n\n            elizaLogger.success(\n                \"Transfer completed successfully! tx: \" + tx.transaction_hash\n            );\n            if (callback) {\n                callback({\n                    text:\n                        \"Transfer completed successfully! tx: \" +\n                        tx.transaction_hash,\n                    content: {},\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during subdomain transfer:\", error);\n            if (callback) {\n                callback({\n                    text: `Error transferring subdomain ${content.subdomain}: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send me subdomain.domain.stark to 0x0124aeb495b947201f5fac96fd1138e326ad86195b98df6dec9009158a533b49\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll transfer subdomain.domain.stark to that address right away. Let me process that for you.\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import { Plugin } from \"@elizaos/core\";\nimport { executeSwap } from \"./actions/swap\";\nimport transfer from \"./actions/transfer\";\nimport { deployToken } from \"./actions/unruggable\";\nimport transferSubdomain from \"./actions/subdomain\";\nexport const PROVIDER_CONFIG = {\n    AVNU_API: \"https://starknet.impulse.avnu.fi/v1\",\n    MAX_RETRIES: 3,\n    RETRY_DELAY: 2000,\n    TOKEN_ADDRESSES: {\n        BTC: \"0x03fe2b97c1fd336e750087d68b9b867997fd64a2661ff3ca5a7c771641e8e7ac\",\n        ETH: \"0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\",\n        STRK: \"0x04718f5a0fc34cc1af16a1cdee98ffb20c31f5cd61d6ab07201858f4287c938d\",\n    },\n    TOKEN_SECURITY_ENDPOINT: \"/defi/token_security?address=\",\n    TOKEN_TRADE_DATA_ENDPOINT: \"/defi/v3/token/trade-data/single?address=\",\n    DEX_SCREENER_API: \"https://api.dexscreener.com/latest/dex/tokens/\",\n    MAIN_WALLET: \"\",\n};\n\nexport const starknetPlugin: Plugin = {\n    name: \"starknet\",\n    description: \"Starknet Plugin for Eliza\",\n    actions: [transfer, executeSwap, deployToken, transferSubdomain],\n    evaluators: [],\n    providers: [],\n};\n\nexport default starknetPlugin;\n"],"mappings":"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","names":["elizaLogger","elizaLogger","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","Contract","Contract","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","Percent","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","Percent","ModelClass","composeContext","generateObjectDeprecated","elizaLogger","transferTemplate","elizaLogger","composeContext","generateObjectDeprecated","ModelClass"]}