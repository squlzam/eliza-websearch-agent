{"version":3,"sources":["../src/actions/upload.ts","../src/templates/upload.ts","../src/index.ts"],"sourcesContent":["import {\n    Action,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    State,\n    ModelClass,\n    Content,\n    ActionExample,\n    generateObject,\n} from \"@elizaos/core\";\nimport { Indexer, ZgFile, getFlowContract } from \"@0glabs/0g-ts-sdk\";\nimport { ethers } from \"ethers\";\nimport { composeContext } from \"@elizaos/core\";\nimport { promises as fs } from \"fs\";\n\nimport { uploadTemplate } from \"../templates/upload\";\n\nexport interface UploadContent extends Content {\n    filePath: string;\n}\n\nfunction isUploadContent(\n    _runtime: IAgentRuntime,\n    content: any\n): content is UploadContent {\n    console.log(\"Content for upload\", content);\n    return typeof content.filePath === \"string\";\n}\n\nexport const zgUpload: Action = {\n    name: \"ZG_UPLOAD\",\n    similes: [\n        \"UPLOAD_FILE_TO_ZG\",\n        \"STORE_FILE_ON_ZG\",\n        \"SAVE_FILE_TO_ZG\",\n        \"UPLOAD_TO_ZERO_GRAVITY\",\n        \"STORE_ON_ZERO_GRAVITY\",\n        \"SHARE_FILE_ON_ZG\",\n        \"PUBLISH_FILE_TO_ZG\",\n    ],\n    description: \"Store data using 0G protocol\",\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        const zgIndexerRpc = !!runtime.getSetting(\"ZEROG_INDEXER_RPC\");\n        const zgEvmRpc = !!runtime.getSetting(\"ZEROG_EVM_RPC\");\n        const zgPrivateKey = !!runtime.getSetting(\"ZEROG_PRIVATE_KEY\");\n        const flowAddr = !!runtime.getSetting(\"ZEROG_FLOW_ADDRESS\");\n        return zgIndexerRpc && zgEvmRpc && zgPrivateKey && flowAddr;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: any,\n        callback: HandlerCallback\n    ) => {\n        console.log(\"ZG_UPLOAD action called\");\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        // Compose upload context\n        const uploadContext = composeContext({\n            state,\n            template: uploadTemplate,\n        });\n\n        // Generate upload content\n        const content = await generateObject({\n            runtime,\n            context: uploadContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        // Validate upload content\n        if (!isUploadContent(runtime, content)) {\n            console.error(\"Invalid content for UPLOAD action.\");\n            if (callback) {\n                callback({\n                    text: \"Unable to process 0G upload request. Invalid content provided.\",\n                    content: { error: \"Invalid upload content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n            const zgIndexerRpc = runtime.getSetting(\"ZEROG_INDEXER_RPC\");\n            const zgEvmRpc = runtime.getSetting(\"ZEROG_EVM_RPC\");\n            const zgPrivateKey = runtime.getSetting(\"ZEROG_PRIVATE_KEY\");\n            const flowAddr = runtime.getSetting(\"ZEROG_FLOW_ADDRESS\");\n            const filePath = content.filePath;\n            if (!filePath) {\n                console.error(\"File path is required\");\n                return false;\n            }\n\n            // Check if file exists and is accessible\n            try {\n                await fs.access(filePath);\n            } catch (error) {\n                console.error(\n                    `File ${filePath} does not exist or is not accessible:`,\n                    error\n                );\n                return false;\n            }\n\n            const file = await ZgFile.fromFilePath(filePath);\n            var [tree, err] = await file.merkleTree();\n            if (err === null) {\n                console.log(\"File Root Hash: \", tree.rootHash());\n            } else {\n                console.log(\"Error getting file root hash: \", err);\n                return false;\n            }\n\n            const provider = new ethers.JsonRpcProvider(zgEvmRpc);\n            const signer = new ethers.Wallet(zgPrivateKey, provider);\n            const indexer = new Indexer(zgIndexerRpc);\n            const flowContract = getFlowContract(flowAddr, signer);\n\n            var [tx, err] = await indexer.upload(\n                file,\n                0,\n                zgEvmRpc,\n                flowContract\n            );\n            if (err === null) {\n                console.log(\"File uploaded successfully, tx: \", tx);\n            } else {\n                console.error(\"Error uploading file: \", err);\n                return false;\n            }\n\n            await file.close();\n        } catch (error) {\n            console.error(\"Error getting settings for 0G upload:\", error);\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"upload my resume.pdf file\",\n                    action: \"ZG_UPLOAD\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"can you help me upload this document.docx?\",\n                    action: \"ZG_UPLOAD\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I need to upload an image file image.png\",\n                    action: \"ZG_UPLOAD\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","export const uploadTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"filePath\": null,\n    \"description\": \"I want to upload a file\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nExtract the user's intention to upload a file from the conversation. Users might express this in various ways, such as:\n- \"I want to upload a file\"\n- \"upload an image\"\n- \"send a photo\"\n- \"upload\"\n- \"let me share a file\"\n\nIf the user provides any specific description of the file, include that as well.\n\nRespond with a JSON markdown block containing only the extracted values.`;\n","import { Plugin } from \"@elizaos/core\";\nimport { zgUpload } from \"./actions/upload\";\n\nexport const zgPlugin: Plugin = {\n    description: \"ZeroG Plugin for Eliza\",\n    name: \"ZeroG\",\n    actions: [zgUpload],\n    evaluators: [],\n    providers: [],\n};\n"],"mappings":"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","names":[]}