{"version":3,"sources":["../src/providers/gitbook.ts","../src/index.ts"],"sourcesContent":["import {\n    Provider,\n    IAgentRuntime,\n    Memory,\n    State,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport { GitBookResponse, GitBookClientConfig } from \"../types\";\n\nfunction cleanText(text: string): string {\n    const cleaned = text\n        .replace(/<@!?\\d+>/g, \"\") // Discord mentions\n        .replace(/<#\\d+>/g, \"\") // Discord channels\n        .replace(/<@&\\d+>/g, \"\") // Discord roles\n        .replace(/(?:^|\\s)@[\\w_]+/g, \"\") // Platform mentions\n        .trim();\n\n    return cleaned;\n}\n\nasync function validateQuery(\n    runtime: IAgentRuntime,\n    text: string\n): Promise<boolean> {\n    // Default general queries - everything else comes from config\n    const keywords = {\n        generalQueries: [\n            \"how\",\n            \"what\",\n            \"where\",\n            \"explain\",\n            \"show\",\n            \"tell\",\n            \"can\",\n            \"does\",\n            \"is\",\n            \"are\",\n            \"will\",\n            \"why\",\n            \"benefits\",\n            \"features\",\n            \"cost\",\n            \"price\",\n            \"use\",\n            \"using\",\n            \"work\",\n            \"access\",\n            \"get\",\n        ],\n    };\n\n    try {\n        const gitbookConfig = runtime.character.clientConfig\n            ?.gitbook as GitBookClientConfig;\n\n        // Get project terms and document triggers from config\n        const projectTerms = gitbookConfig?.keywords?.projectTerms || [];\n        const documentTriggers = gitbookConfig?.documentTriggers || [];\n\n        // Merge any additional general queries from config\n        if (gitbookConfig?.keywords?.generalQueries) {\n            keywords.generalQueries = [\n                ...keywords.generalQueries,\n                ...gitbookConfig.keywords.generalQueries,\n            ];\n        }\n\n        const containsAnyWord = (text: string, words: string[] = []) => {\n            return (\n                words.length === 0 ||\n                words.some((word) => {\n                    if (word.includes(\" \")) {\n                        return text.includes(word.toLowerCase());\n                    }\n                    const regex = new RegExp(`\\\\b${word}\\\\b`, \"i\");\n                    return regex.test(text);\n                })\n            );\n        };\n\n        const hasProjectTerm = containsAnyWord(text, projectTerms);\n        const hasDocTrigger = containsAnyWord(text, documentTriggers);\n        const hasGeneralQuery = containsAnyWord(text, keywords.generalQueries);\n\n        const isValid = hasProjectTerm || hasDocTrigger || hasGeneralQuery;\n\n        elizaLogger.info(`✅ Is GitBook Validation Result: ${isValid}`);\n        return isValid;\n    } catch (error) {\n        elizaLogger.warn(`❌ Error in GitBook validation:\\n${error}`);\n        return false;\n    }\n}\n\nexport const gitbookProvider: Provider = {\n    get: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State\n    ): Promise<string> => {\n        try {\n            const spaceId = runtime.getSetting(\"GITBOOK_SPACE_ID\");\n            if (!spaceId) {\n                elizaLogger.error(\"⚠️ GitBook Space ID not configured\");\n                return \"\";\n            }\n\n            const text = message.content.text.toLowerCase().trim();\n            const isValidQuery = await validateQuery(runtime, text);\n\n            if (!isValidQuery) {\n                elizaLogger.info(\"⚠️ GitBook Query validation failed\");\n                return \"\";\n            }\n\n            const cleanedQuery = cleanText(message.content.text);\n\n            const response = await fetch(\n                `https://api.gitbook.com/v1/spaces/${spaceId}/search/ask`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify({\n                        query: cleanedQuery,\n                        variables: {},\n                    }),\n                }\n            );\n\n            if (!response.ok) {\n                elizaLogger.error(\"❌ GitBook API error:\", response.status);\n                return \"\";\n            }\n\n            const result: GitBookResponse = await response.json();\n\n            return result.answer?.text || \"\";\n        } catch (error) {\n            elizaLogger.error(\"❌ Error in GitBook provider:\", error);\n            return \"\";\n        }\n    },\n};\n","import { Plugin } from \"@elizaos/core\";\nimport { gitbookProvider } from \"./providers/gitbook\";\n\nexport const gitbookPlugin: Plugin = {\n    name: \"GitBook Documentation\",\n    description: \"Plugin for querying GitBook documentation\",\n    actions: [],\n    providers: [gitbookProvider],\n    evaluators: []\n};\n\nexport default gitbookPlugin;\n\nexport * from './types';\n"],"mappings":"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","names":["text"]}