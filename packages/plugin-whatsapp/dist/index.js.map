{"version":3,"sources":["../src/client.ts","../src/handlers/message.handler.ts","../src/handlers/webhook.handler.ts","../src/index.ts"],"sourcesContent":["import axios, { AxiosInstance } from \"axios\";\nimport { WhatsAppConfig, WhatsAppMessage } from \"./types\";\n\nexport class WhatsAppClient {\n    private client: AxiosInstance;\n    private config: WhatsAppConfig;\n\n    constructor(config: WhatsAppConfig) {\n        this.config = config;\n        this.client = axios.create({\n            baseURL: \"https://graph.facebook.com/v17.0\",\n            headers: {\n                Authorization: `Bearer ${config.accessToken}`,\n                \"Content-Type\": \"application/json\",\n            },\n        });\n    }\n\n    async sendMessage(message: WhatsAppMessage): Promise<any> {\n        const endpoint = `/${this.config.phoneNumberId}/messages`;\n\n        const payload = {\n            messaging_product: \"whatsapp\",\n            recipient_type: \"individual\",\n            to: message.to,\n            type: message.type,\n            ...(message.type === \"text\"\n                ? { text: { body: message.content } }\n                : { template: message.content }),\n        };\n\n        return this.client.post(endpoint, payload);\n    }\n\n    async verifyWebhook(token: string): Promise<boolean> {\n        return token === this.config.webhookVerifyToken;\n    }\n}\n","import { WhatsAppClient } from \"../client\";\nimport { WhatsAppMessage } from \"../types\";\n\nexport class MessageHandler {\n    constructor(private client: WhatsAppClient) {}\n\n    async send(message: WhatsAppMessage): Promise<any> {\n        try {\n            const response = await this.client.sendMessage(message);\n            return response.data;\n        } catch (error: unknown) {\n            if (error instanceof Error) {\n                throw new Error(\n                    `Failed to send WhatsApp message: ${error.message}`\n                );\n            }\n            throw new Error('Failed to send WhatsApp message');\n        }\n    }\n}\n","import { WhatsAppClient } from \"../client\";\nimport { WhatsAppWebhookEvent } from \"../types\";\n\nexport class WebhookHandler {\n    constructor(private client: WhatsAppClient) {}\n\n    async handle(event: WhatsAppWebhookEvent): Promise<void> {\n        try {\n            // Process messages\n            if (event.entry?.[0]?.changes?.[0]?.value?.messages) {\n                const messages = event.entry[0].changes[0].value.messages;\n                for (const message of messages) {\n                    await this.handleMessage(message);\n                }\n            }\n\n            // Process status updates\n            if (event.entry?.[0]?.changes?.[0]?.value?.statuses) {\n                const statuses = event.entry[0].changes[0].value.statuses;\n                for (const status of statuses) {\n                    await this.handleStatus(status);\n                }\n            }\n        } catch (error: unknown) {\n            if (error instanceof Error) {\n                throw new Error(\n                    `Failed to send WhatsApp message: ${error.message}`\n                );\n            }\n            throw new Error(\"Failed to send WhatsApp message\");\n        }\n    }\n\n    private async handleMessage(message: any): Promise<void> {\n        // Implement message handling logic\n        // This could emit events or trigger callbacks based on your framework's needs\n        console.log(\"Received message:\", message);\n    }\n\n    private async handleStatus(status: any): Promise<void> {\n        // Implement status update handling logic\n        // This could emit events or trigger callbacks based on your framework's needs\n        console.log(\"Received status update:\", status);\n    }\n}\n","import { Plugin } from \"@elizaos/core\";\nimport { WhatsAppClient } from \"./client\";\nimport { WhatsAppConfig, WhatsAppMessage, WhatsAppWebhookEvent } from \"./types\";\nimport { MessageHandler, WebhookHandler } from \"./handlers\";\n\nexport class WhatsAppPlugin implements Plugin {\n    private client: WhatsAppClient;\n    private messageHandler: MessageHandler;\n    private webhookHandler: WebhookHandler;\n\n    name: string;\n    description: string;\n\n    constructor(private config: WhatsAppConfig) {\n        this.name = \"WhatsApp Cloud API Plugin\";\n        this.description =\n            \"A plugin for integrating WhatsApp Cloud API with your application.\";\n        this.client = new WhatsAppClient(config);\n        this.messageHandler = new MessageHandler(this.client);\n        this.webhookHandler = new WebhookHandler(this.client);\n    }\n\n    async sendMessage(message: WhatsAppMessage): Promise<any> {\n        return this.messageHandler.send(message);\n    }\n\n    async handleWebhook(event: WhatsAppWebhookEvent): Promise<void> {\n        return this.webhookHandler.handle(event);\n    }\n\n    async verifyWebhook(token: string): Promise<boolean> {\n        return this.client.verifyWebhook(token);\n    }\n}\n\nexport * from \"./types\";\n"],"mappings":"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","names":[]}