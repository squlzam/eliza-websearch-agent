{"version":3,"sources":["../src/providers/wallet.ts","../src/actions/swap.ts","../src/actions/transfer.ts","../src/index.ts"],"names":["NodeCache","keyStores","elizaLogger","KeyPair","connect","utils","BigNumber","ftGetTokenMetadata","fetchAllPools","estimateSwap","instantSwap","FT_MINIMUM_STORAGE_BALANCE_LARGE","init_env","composeContext","generateObject","ModelClass","ONE_YOCTO_NEAR","nearUtils"],"mappings":";;;;;;;;;;;;;;;;AAYA,IAAM,eAAkB,GAAA;AAAA,EACpB,SAAA,EAAW,OAAQ,CAAA,GAAA,CAAI,YAAgB,IAAA,SAAA;AAAA,EACvC,OAAA,EACI,QAAQ,GAAI,CAAA,OAAA,IACZ,eAAe,OAAQ,CAAA,GAAA,CAAI,gBAAgB,SAAS,CAAA,SAAA,CAAA;AAAA,EACxD,SAAW,EAAA,CAAA,QAAA,EAAW,OAAQ,CAAA,GAAA,CAAI,gBAAgB,SAAS,CAAA,kBAAA,CAAA;AAAA,EAC3D,SAAW,EAAA,CAAA,eAAA,EAAkB,OAAQ,CAAA,GAAA,CAAI,gBAAgB,SAAS,CAAA,SAAA,CAAA;AAAA,EAClE,WAAa,EAAA,CAAA,QAAA,EAAW,OAAQ,CAAA,GAAA,CAAI,gBAAgB,SAAS,CAAA,cAAA,CAAA;AAAA,EAC7D,WAAa,EAAA,CAAA;AAAA,EACb,WAAa,EAAA,GAAA;AAAA,EACb,QAAA,EAAU,QAAQ,GAAI,CAAA,QAAA,GAAW,SAAS,OAAQ,CAAA,GAAA,CAAI,QAAQ,CAAI,GAAA;AACtE,CAAA;AAmBO,IAAM,iBAAN,MAAyC;AAAA,EAI5C,YAAoB,SAAmB,EAAA;AAAnB,IAAA,IAAA,CAAA,SAAA,GAAA,SAAA;AAFpB,IAAA,IAAA,CAAQ,OAA0B,GAAA,IAAA;AAG9B,IAAA,IAAA,CAAK,QAAQ,IAAIA,0BAAA,CAAU,EAAE,MAAA,EAAQ,KAAK,CAAA;AAC1C,IAAK,IAAA,CAAA,QAAA,GAAW,IAAIC,mBAAA,CAAU,gBAAiB,EAAA;AAAA;AACnD,EAEA,MAAM,GAAA,CACF,OACA,EAAA,QAAA,EACA,MACsB,EAAA;AACtB,IAAI,IAAA;AACA,MAAO,OAAA,MAAM,IAAK,CAAA,qBAAA,CAAsB,OAAO,CAAA;AAAA,aAC1C,KAAO,EAAA;AACZ,MAAYC,gBAAA,CAAA,KAAA,CAAM,6BAA6B,KAAK,CAAA;AACpD,MAAO,OAAA,IAAA;AAAA;AACX;AACJ,EAEA,MAAa,QAAQ,OAAwB,EAAA;AACzC,IAAI,IAAA,IAAA,CAAK,OAAS,EAAA,OAAO,IAAK,CAAA,OAAA;AAE9B,IAAM,MAAA,SAAA,GAAY,OAAQ,CAAA,UAAA,CAAW,wBAAwB,CAAA;AAC7D,IAAM,MAAA,SAAA,GAAY,OAAQ,CAAA,UAAA,CAAW,wBAAwB,CAAA;AAE7D,IAAI,IAAA,CAAC,SAAa,IAAA,CAAC,SAAW,EAAA;AAC1B,MAAM,MAAA,IAAI,MAAM,wCAAwC,CAAA;AAAA;AAI5D,IAAM,MAAA,OAAA,GAAUC,iBAAQ,CAAA,UAAA,CAAW,SAA0B,CAAA;AAG7D,IAAA,MAAM,KAAK,QAAS,CAAA,MAAA;AAAA,MAChB,eAAgB,CAAA,SAAA;AAAA,MAChB,IAAK,CAAA,SAAA;AAAA,MACL;AAAA,KACJ;AAEA,IAAM,MAAA,cAAA,GAAiB,MAAMC,iBAAQ,CAAA;AAAA,MACjC,WAAW,eAAgB,CAAA,SAAA;AAAA,MAC3B,UAAU,IAAK,CAAA,QAAA;AAAA,MACf,SAAS,eAAgB,CAAA,OAAA;AAAA,MACzB,WAAW,eAAgB,CAAA,SAAA;AAAA,MAC3B,WAAW,eAAgB,CAAA;AAAA,KAC9B,CAAA;AAED,IAAA,IAAA,CAAK,OAAU,GAAA,MAAM,cAAe,CAAA,OAAA,CAAQ,KAAK,SAAS,CAAA;AAC1D,IAAA,OAAO,IAAK,CAAA,OAAA;AAAA;AAChB,EAEA,MAAc,cAAA,CACV,GACA,EAAA,OAAA,GAAuB,EACX,EAAA;AACZ,IAAI,IAAA,SAAA;AAEJ,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,eAAA,CAAgB,aAAa,CAAK,EAAA,EAAA;AAClD,MAAI,IAAA;AACA,QAAA,MAAM,QAAW,GAAA,MAAM,KAAM,CAAA,GAAA,EAAK,OAAO,CAAA;AACzC,QAAI,IAAA,CAAC,SAAS,EAAI,EAAA;AACd,UAAA,MAAM,IAAI,KAAA,CAAM,CAAuB,oBAAA,EAAA,QAAA,CAAS,MAAM,CAAE,CAAA,CAAA;AAAA;AAE5D,QAAO,OAAA,MAAM,SAAS,IAAK,EAAA;AAAA,eACtB,KAAO,EAAA;AACZ,QAAAF,gBAAA,CAAY,KAAM,CAAA,CAAA,QAAA,EAAW,CAAI,GAAA,CAAC,YAAY,KAAK,CAAA;AACnD,QAAY,SAAA,GAAA,KAAA;AACZ,QAAI,IAAA,CAAA,GAAI,eAAgB,CAAA,WAAA,GAAc,CAAG,EAAA;AACrC,UAAA,MAAM,IAAI,OAAA;AAAA,YAAQ,CAAC,OACf,KAAA,UAAA;AAAA,cACI,OAAA;AAAA,cACA,eAAgB,CAAA,WAAA,GAAc,IAAK,CAAA,GAAA,CAAI,GAAG,CAAC;AAAA;AAC/C,WACJ;AAAA;AACJ;AACJ;AAEJ,IAAM,MAAA,SAAA;AAAA;AACV,EAEA,MAAM,oBACF,OACwB,EAAA;AACxB,IAAI,IAAA;AACA,MAAM,MAAA,QAAA,GAAW,CAAa,UAAA,EAAA,IAAA,CAAK,SAAS,CAAA,CAAA;AAC5C,MAAA,MAAM,WAAc,GAAA,IAAA,CAAK,KAAM,CAAA,GAAA,CAAqB,QAAQ,CAAA;AAE5D,MAAA,IAAI,WAAa,EAAA;AACb,QAAAA,gBAAA,CAAY,IAAI,mCAAmC,CAAA;AACnD,QAAO,OAAA,WAAA;AAAA;AAGX,MAAA,MAAM,OAAU,GAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,OAAO,CAAA;AAC1C,MAAM,MAAA,OAAA,GAAU,MAAM,OAAA,CAAQ,iBAAkB,EAAA;AAGhD,MAAM,MAAA,WAAA,GAAcG,gBAAM,MAAO,CAAA,gBAAA;AAAA,QAC7B,OAAQ,CAAA;AAAA,OACZ;AAGA,MAAM,MAAA,SAAA,GAAY,MAAM,IAAA,CAAK,cAAe,EAAA;AAC5C,MAAA,MAAM,WAAW,IAAIC,0BAAA,CAAU,WAAW,CAAA,CAAE,MAAM,SAAS,CAAA;AAE3D,MAAA,MAAM,SAA6B,GAAA;AAAA,QAC/B,QAAA,EAAU,SAAS,QAAS,EAAA;AAAA,QAC5B,SAAW,EAAA,WAAA;AAAA,QACX,MAAQ,EAAA;AAAA,UACJ;AAAA,YACI,IAAM,EAAA,eAAA;AAAA,YACN,MAAQ,EAAA,MAAA;AAAA,YACR,QAAU,EAAA,EAAA;AAAA,YACV,SAAS,OAAQ,CAAA,SAAA;AAAA,YACjB,QAAU,EAAA,WAAA;AAAA,YACV,QAAA,EAAU,UAAU,QAAS,EAAA;AAAA,YAC7B,QAAA,EAAU,SAAS,QAAS;AAAA;AAChC;AACJ,OACJ;AAEA,MAAK,IAAA,CAAA,KAAA,CAAM,GAAI,CAAA,QAAA,EAAU,SAAS,CAAA;AAClC,MAAO,OAAA,SAAA;AAAA,aACF,KAAO,EAAA;AACZ,MAAYJ,gBAAA,CAAA,KAAA,CAAM,6BAA6B,KAAK,CAAA;AACpD,MAAM,MAAA,KAAA;AAAA;AACV;AACJ,EAEA,MAAc,cAAkC,GAAA;AAC5C,IAAA,MAAM,QAAW,GAAA,YAAA;AACjB,IAAA,MAAM,WAAc,GAAA,IAAA,CAAK,KAAM,CAAA,GAAA,CAAY,QAAQ,CAAA;AAEnD,IAAA,IAAI,WAAa,EAAA;AACb,MAAO,OAAA,WAAA;AAAA;AAGX,IAAI,IAAA;AACA,MAAM,MAAA,QAAA,GAAW,MAAM,IAAK,CAAA,cAAA;AAAA,QACxB;AAAA,OACJ;AACA,MAAM,MAAA,KAAA,GAAQ,SAAS,IAAK,CAAA,GAAA;AAC5B,MAAK,IAAA,CAAA,KAAA,CAAM,GAAI,CAAA,QAAA,EAAU,KAAK,CAAA;AAC9B,MAAO,OAAA,KAAA;AAAA,aACF,KAAO,EAAA;AACZ,MAAYA,gBAAA,CAAA,KAAA,CAAM,8BAA8B,KAAK,CAAA;AACrD,MAAO,OAAA,CAAA;AAAA;AACX;AACJ,EAEA,eAAA,CACI,SACA,SACM,EAAA;AACN,IAAA,IAAI,MAAS,GAAA,CAAA,EAAG,OAAQ,CAAA,SAAA,CAAU,MAAM;AAAA,CAAA;AACxC,IAAU,MAAA,IAAA,CAAA,YAAA,EAAe,KAAK,SAAS;;AAAA,CAAA;AAEvC,IAAA,MAAM,oBAAoB,IAAII,0BAAA,CAAU,UAAU,QAAQ,CAAA,CAAE,QAAQ,CAAC,CAAA;AACrE,IAAA,MAAM,qBAAqB,SAAU,CAAA,SAAA;AAErC,IAAU,MAAA,IAAA,CAAA,cAAA,EAAiB,iBAAiB,CAAA,EAAA,EAAK,kBAAkB,CAAA;;AAAA,CAAA;AACnE,IAAU,MAAA,IAAA,mBAAA;AAEV,IAAW,KAAA,MAAA,KAAA,IAAS,UAAU,MAAQ,EAAA;AAClC,MAAA,MAAA,IAAU,GAAG,KAAM,CAAA,IAAI,CAAK,EAAA,EAAA,KAAA,CAAM,MAAM,CAAM,GAAA,EAAA,KAAA,CAAM,QAAQ,CAAA,GAAA,EAAM,IAAIA,0BAAU,CAAA,KAAA,CAAM,QAAQ,CAAE,CAAA,OAAA,CAAQ,CAAC,CAAC,CAAA;AAAA,CAAA;AAAA;AAG9G,IAAU,MAAA,IAAA,oBAAA;AACV,IAAU,MAAA,IAAA,CAAA,OAAA,EAAU,IAAIA,0BAAA,CAAU,SAAU,CAAA,MAAA,CAAO,CAAC,CAAA,CAAE,QAAQ,CAAA,CAAE,OAAQ,CAAA,CAAC,CAAC;AAAA,CAAA;AAE1E,IAAO,OAAA,MAAA;AAAA;AACX,EAEA,MAAM,sBAAsB,OAAyC,EAAA;AACjE,IAAI,IAAA;AACA,MAAA,MAAM,SAAY,GAAA,MAAM,IAAK,CAAA,mBAAA,CAAoB,OAAO,CAAA;AACxD,MAAO,OAAA,IAAA,CAAK,eAAgB,CAAA,OAAA,EAAS,SAAS,CAAA;AAAA,aACzC,KAAO,EAAA;AACZ,MAAYJ,gBAAA,CAAA,KAAA,CAAM,sCAAsC,KAAK,CAAA;AAC7D,MAAO,OAAA,6DAAA;AAAA;AACX;AAER,CAAA;AAEA,IAAM,cAA2B,GAAA;AAAA,EAC7B,GAAK,EAAA,OACD,OACA,EAAA,QAAA,EACA,MACyB,KAAA;AACzB,IAAI,IAAA;AACA,MAAM,MAAA,SAAA,GAAY,OAAQ,CAAA,UAAA,CAAW,cAAc,CAAA;AACnD,MAAA,IAAI,CAAC,SAAW,EAAA;AACZ,QAAM,MAAA,IAAI,MAAM,6BAA6B,CAAA;AAAA;AAEjD,MAAM,MAAA,QAAA,GAAW,IAAI,cAAA,CAAe,SAAS,CAAA;AAC7C,MAAO,OAAA,MAAM,QAAS,CAAA,qBAAA,CAAsB,OAAO,CAAA;AAAA,aAC9C,KAAO,EAAA;AACZ,MAAYA,gBAAA,CAAA,KAAA,CAAM,6BAA6B,KAAK,CAAA;AACpD,MAAO,OAAA,IAAA;AAAA;AACX;AAER,CAAA;AC7NA,eAAe,mBAAA,CACX,SACA,UACgB,EAAA;AAChB,EAAI,IAAA;AACA,IAAM,MAAA,OAAA,GAAU,MAAM,OAAA,CAAQ,YAAa,CAAA;AAAA,MACvC,UAAA;AAAA,MACA,UAAY,EAAA,oBAAA;AAAA,MACZ,IAAM,EAAA,EAAE,UAAY,EAAA,OAAA,CAAQ,SAAU;AAAA,KACzC,CAAA;AACD,IAAO,OAAA,OAAA,KAAY,IAAQ,IAAA,OAAA,CAAQ,KAAU,KAAA,GAAA;AAAA,WACxC,KAAO,EAAA;AACZ,IAAAA,gBAAY,CAAA,GAAA,CAAI,CAAmC,gCAAA,EAAA,KAAK,CAAE,CAAA,CAAA;AAC1D,IAAO,OAAA,KAAA;AAAA;AAEf;AAEA,eAAe,SACX,CAAA,OAAA,EACA,YACA,EAAA,aAAA,EACA,QACA,iBAA4B,GAAA,MAAA;AAAA,EACxB,OAAA,CAAQ,WAAW,oBAAoB;AAC3C,CAAA,IAAK,IACO,EAAA;AACZ,EAAI,IAAA;AAEA,IAAM,MAAA,OAAA,GAAU,MAAMK,yBAAA,CAAmB,YAAY,CAAA;AACrD,IAAM,MAAA,QAAA,GAAW,MAAMA,yBAAA,CAAmB,aAAa,CAAA;AACvD,IAAA,MAAM,SAAY,GAAA,OAAA,CAAQ,UAAW,CAAA,cAAc,CAAK,IAAA,SAAA;AACxD,IAAA,MAAM,OACF,GAAA,OAAA,CAAQ,UAAW,CAAA,SAAS,CAAK,IAAA,8BAAA;AAIrC,IAAA,MAAM,EAAE,WAAA,EAAgB,GAAA,MAAMC,oBAAc,EAAA;AAC5C,IAAM,MAAA,SAAA,GAAY,MAAMC,mBAAa,CAAA;AAAA,MACjC,OAAA;AAAA,MACA,QAAA;AAAA,MACA,QAAU,EAAA,MAAA;AAAA,MACV,WAAA;AAAA,MACA,OAAS,EAAA;AAAA,QACL,kBAAoB,EAAA;AAAA;AACxB,KACH,CAAA;AAED,IAAA,IAAI,CAAC,SAAA,IAAa,SAAU,CAAA,MAAA,KAAW,CAAG,EAAA;AACtC,MAAM,MAAA,IAAI,MAAM,2BAA2B,CAAA;AAAA;AAI/C,IAAM,MAAA,SAAA,GAAY,OAAQ,CAAA,UAAA,CAAW,cAAc,CAAA;AACnD,IAAA,IAAI,CAAC,SAAW,EAAA;AACZ,MAAM,MAAA,IAAI,MAAM,6BAA6B,CAAA;AAAA;AAGjD,IAAM,MAAA,SAAA,GAAY,OAAQ,CAAA,UAAA,CAAW,wBAAwB,CAAA;AAC7D,IAAM,MAAA,QAAA,GAAW,IAAIR,mBAAAA,CAAU,gBAAiB,EAAA;AAChD,IAAA,MAAM,OAAUI,GAAAA,eAAAA,CAAM,OAAQ,CAAA,UAAA,CAAW,SAA0B,CAAA;AACnE,IAAA,MAAM,QAAS,CAAA,MAAA,CAAO,SAAW,EAAA,SAAA,EAAW,OAAO,CAAA;AAEnD,IAAM,MAAA,cAAA,GAAiB,MAAMD,iBAAQ,CAAA;AAAA,MACjC,SAAA;AAAA,MACA,QAAA;AAAA,MACA;AAAA,KACH,CAAA;AAED,IAAA,MAAM,OAAU,GAAA,MAAM,cAAe,CAAA,OAAA,CAAQ,SAAS,CAAA;AAGtD,IAAA,MAAM,YAAe,GAAA,MAAM,mBAAoB,CAAA,OAAA,EAAS,YAAY,CAAA;AACpE,IAAA,MAAM,aAAgB,GAAA,MAAM,mBAAoB,CAAA,OAAA,EAAS,aAAa,CAAA;AAEtE,IAAM,MAAA,YAAA,GAAe,MAAMM,kBAAY,CAAA;AAAA,MACnC,OAAA;AAAA,MACA,QAAA;AAAA,MACA,QAAU,EAAA,MAAA;AAAA,MACV,SAAA;AAAA,MACA,iBAAA;AAAA,MACA,SAAW,EAAA;AAAA,KACd,CAAA;AAGD,IAAA,IAAI,CAAC,YAAc,EAAA;AACf,MAAA,YAAA,CAAa,OAAQ,CAAA;AAAA,QACjB,UAAY,EAAA,YAAA;AAAA,QACZ,aAAe,EAAA;AAAA,UACX;AAAA,YACI,UAAY,EAAA,iBAAA;AAAA,YACZ,IAAM,EAAA;AAAA,cACF,UAAY,EAAA,SAAA;AAAA,cACZ,iBAAmB,EAAA;AAAA,aACvB;AAAA,YACA,GAAK,EAAA,gBAAA;AAAA,YACL,MAAQ,EAAAC;AAAA;AACZ;AACJ,OACH,CAAA;AAAA;AAGL,IAAA,IAAI,CAAC,aAAe,EAAA;AAChB,MAAA,YAAA,CAAa,OAAQ,CAAA;AAAA,QACjB,UAAY,EAAA,aAAA;AAAA,QACZ,aAAe,EAAA;AAAA,UACX;AAAA,YACI,UAAY,EAAA,iBAAA;AAAA,YACZ,IAAM,EAAA;AAAA,cACF,UAAY,EAAA,SAAA;AAAA,cACZ,iBAAmB,EAAA;AAAA,aACvB;AAAA,YACA,GAAK,EAAA,gBAAA;AAAA,YACL,MAAQ,EAAAA;AAAA;AACZ;AACJ,OACH,CAAA;AAAA;AAGL,IAAO,OAAA,YAAA;AAAA,WACF,KAAO,EAAA;AACZ,IAAAT,gBAAAA,CAAY,KAAM,CAAA,qBAAA,EAAuB,KAAK,CAAA;AAC9C,IAAM,MAAA,KAAA;AAAA;AAEd;AAEA,IAAM,YAAe,GAAA,CAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAA,CAAA;AA+Bd,IAAM,WAAsB,GAAA;AAAA,EAC/B,IAAM,EAAA,mBAAA;AAAA,EACN,OAAS,EAAA;AAAA,IACL,kBAAA;AAAA,IACA,iBAAA;AAAA,IACA,mBAAA;AAAA,IACA;AAAA,GACJ;AAAA,EACA,QAAA,EAAU,OAAO,QAAA,EAAyB,OAAoB,KAAA;AAC1D,IAAAA,gBAAAA,CAAY,GAAI,CAAA,UAAA,EAAY,OAAO,CAAA;AACnC,IAAO,OAAA,IAAA;AAAA,GACX;AAAA,EACA,WAAa,EAAA,yCAAA;AAAA,EACb,SAAS,OACL,OAAA,EACA,OACA,EAAA,KAAA,EACA,UACA,QACmB,KAAA;AAEnB,IAAAU,eAAA,CAAS,OAAQ,CAAA,UAAA,CAAW,cAAc,CAAA,IAAK,SAAS,CAAA;AAExD,IAAA,IAAI,CAAC,KAAO,EAAA;AACR,MAAS,KAAA,GAAA,MAAM,OAAQ,CAAA,YAAA,CAAa,OAAO,CAAA;AAAA,KACxC,MAAA;AACH,MAAQ,KAAA,GAAA,MAAM,OAAQ,CAAA,wBAAA,CAAyB,KAAK,CAAA;AAAA;AAGxD,IAAA,MAAM,aAAa,MAAM,cAAA,CAAe,GAAI,CAAA,OAAA,EAAS,SAAS,KAAK,CAAA;AACnE,IAAA,KAAA,CAAM,UAAa,GAAA,UAAA;AAEnB,IAAA,MAAM,cAAcC,mBAAe,CAAA;AAAA,MAC/B,KAAA;AAAA,MACA,QAAU,EAAA;AAAA,KACb,CAAA;AAED,IAAM,MAAA,QAAA,GAAW,MAAMC,mBAAe,CAAA;AAAA,MAClC,OAAA;AAAA,MACA,OAAS,EAAA,WAAA;AAAA,MACT,YAAYC,eAAW,CAAA;AAAA,KAC1B,CAAA;AAED,IAAAb,gBAAAA,CAAY,GAAI,CAAA,WAAA,EAAa,QAAQ,CAAA;AAErC,IACI,IAAA,CAAC,SAAS,YACV,IAAA,CAAC,SAAS,aACV,IAAA,CAAC,SAAS,MACZ,EAAA;AACE,MAAAA,gBAAAA,CAAY,IAAI,4CAA4C,CAAA;AAC5D,MAAA,MAAM,WAAc,GAAA;AAAA,QAChB,IAAM,EAAA;AAAA,OACV;AACA,MAAA,QAAA,GAAW,WAAW,CAAA;AACtB,MAAO,OAAA,IAAA;AAAA;AAGX,IAAI,IAAA;AAEA,MAAM,MAAA,SAAA,GAAY,OAAQ,CAAA,UAAA,CAAW,cAAc,CAAA;AACnD,MAAM,MAAA,SAAA,GAAY,OAAQ,CAAA,UAAA,CAAW,wBAAwB,CAAA;AAE7D,MAAI,IAAA,CAAC,SAAa,IAAA,CAAC,SAAW,EAAA;AAC1B,QAAM,MAAA,IAAI,MAAM,wCAAwC,CAAA;AAAA;AAI5D,MAAM,MAAA,QAAA,GAAW,IAAID,mBAAAA,CAAU,gBAAiB,EAAA;AAChD,MAAM,MAAA,OAAA,GAAUI,gBAAM,OAAQ,CAAA,UAAA;AAAA,QAC1B;AAAA,OACJ;AACA,MAAA,MAAM,QAAS,CAAA,MAAA,CAAO,SAAW,EAAA,SAAA,EAAW,OAAO,CAAA;AAEnD,MAAM,MAAA,cAAA,GAAiB,MAAMD,iBAAQ,CAAA;AAAA,QACjC,SAAW,EAAA,OAAA,CAAQ,UAAW,CAAA,cAAc,CAAK,IAAA,SAAA;AAAA,QACjD,QAAA;AAAA,QACA,OACI,EAAA,OAAA,CAAQ,UAAW,CAAA,SAAS,CAC5B,IAAA;AAAA,OACP,CAAA;AAGD,MAAA,MAAM,aAAa,MAAM,SAAA;AAAA,QACrB,OAAA;AAAA,QACA,QAAS,CAAA,YAAA;AAAA,QACT,QAAS,CAAA,aAAA;AAAA,QACT,QAAS,CAAA,MAAA;AAAA,QACT,MAAO,CAAA,OAAA,CAAQ,UAAW,CAAA,oBAAoB,CAAC,CAAK,IAAA;AAAA,OACxD;AAGA,MAAA,MAAM,OAAU,GAAA,MAAM,cAAe,CAAA,OAAA,CAAQ,SAAS,CAAA;AACtD,MAAA,MAAM,UAAU,EAAC;AAEjB,MAAA,KAAA,MAAW,MAAM,UAAY,EAAA;AACzB,QAAW,KAAA,MAAA,YAAA,IAAgB,GAAG,aAAe,EAAA;AACzC,UAAM,MAAA,MAAA,GAAS,MAAM,OAAA,CAAQ,YAAa,CAAA;AAAA,YACtC,YAAY,EAAG,CAAA,UAAA;AAAA,YACf,YAAY,YAAa,CAAA,UAAA;AAAA,YACzB,MAAM,YAAa,CAAA,IAAA;AAAA,YACnB,KAAK,YAAa,CAAA,GAAA;AAAA,YAClB,eAAiB,EAAA,MAAA;AAAA,cACb,YAAa,CAAA,MAAA,KAAWY,qBAClB,GAAA,GAAA,GACA,YAAa,CAAA;AAAA;AACvB,WACH,CAAA;AACD,UAAA,OAAA,CAAQ,KAAK,MAAM,CAAA;AAAA;AACvB;AAGJ,MAAAd,gBAAAA,CAAY,IAAI,8BAA8B,CAAA;AAC9C,MAAM,MAAA,QAAA,GAAW,OAAQ,CAAA,GAAA,CAAI,CAAC,CAAA,KAAM,EAAE,WAAY,CAAA,IAAI,CAAE,CAAA,IAAA,CAAK,IAAI,CAAA;AAEjE,MAAA,MAAM,WAAc,GAAA;AAAA,QAChB,IAAA,EAAM,oDAAoD,QAAQ,CAAA;AAAA,OACtE;AAEA,MAAA,QAAA,GAAW,WAAW,CAAA;AACtB,MAAO,OAAA,IAAA;AAAA,aACF,KAAO,EAAA;AACZ,MAAAA,gBAAAA,CAAY,KAAM,CAAA,0BAAA,EAA4B,KAAK,CAAA;AACnD,MAAA,MAAM,WAAc,GAAA;AAAA,QAChB,IAAA,EAAM,sBAAsB,KAAiB,YAAA,KAAA,GAAQ,MAAM,OAAU,GAAA,MAAA,CAAO,KAAK,CAAC,CAAA;AAAA,OACtF;AACA,MAAA,QAAA,GAAW,WAAW,CAAA;AACtB,MAAO,OAAA,KAAA;AAAA;AACX,GACJ;AAAA,EACA,QAAU,EAAA;AAAA,IACN;AAAA,MACI;AAAA,QACI,IAAM,EAAA,WAAA;AAAA,QACN,OAAS,EAAA;AAAA,UACL,YAAc,EAAA,cAAA;AAAA,UACd,aAAe,EAAA,mBAAA;AAAA,UACf,MAAQ,EAAA;AAAA;AACZ,OACJ;AAAA,MACA;AAAA,QACI,IAAM,EAAA,WAAA;AAAA,QACN,OAAS,EAAA;AAAA,UACL,IAAM,EAAA,8BAAA;AAAA,UACN,MAAQ,EAAA;AAAA;AACZ,OACJ;AAAA,MACA;AAAA,QACI,IAAM,EAAA,WAAA;AAAA,QACN,OAAS,EAAA;AAAA,UACL,IAAM,EAAA;AAAA;AACV;AACJ;AACJ;AAER,CAAA;ACxTA,SAAS,iBAAA,CACL,SACA,OAC0B,EAAA;AAC1B,EACI,OAAA,OAAO,OAAQ,CAAA,SAAA,KAAc,QAC5B,KAAA,OAAO,QAAQ,MAAW,KAAA,QAAA,IACvB,OAAO,OAAA,CAAQ,MAAW,KAAA,QAAA,CAAA;AAEtC;AAEA,IAAM,gBAAmB,GAAA,CAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA,wEAAA,CAAA;AAwBzB,eAAe,YAAA,CACX,OACA,EAAA,SAAA,EACA,MACe,EAAA;AACf,EAAA,MAAM,SAAY,GAAA,OAAA,CAAQ,UAAW,CAAA,cAAc,CAAK,IAAA,SAAA;AACxD,EAAA,MAAM,OACF,GAAA,OAAA,CAAQ,UAAW,CAAA,SAAS,CAAK,IAAA,8BAAA;AACrC,EAAM,MAAA,SAAA,GAAY,OAAQ,CAAA,UAAA,CAAW,cAAc,CAAA;AACnD,EAAM,MAAA,SAAA,GAAY,OAAQ,CAAA,UAAA,CAAW,wBAAwB,CAAA;AAE7D,EAAI,IAAA,CAAC,SAAa,IAAA,CAAC,SAAW,EAAA;AAC1B,IAAM,MAAA,IAAI,MAAM,wCAAwC,CAAA;AAAA;AAO5D,EAAM,MAAA,QAAA,GAAW,IAAID,mBAAAA,CAAU,gBAAiB,EAAA;AAChD,EAAA,MAAM,OAAUI,GAAAA,eAAAA,CAAM,OAAQ,CAAA,UAAA,CAAW,SAA0B,CAAA;AACnE,EAAA,MAAM,QAAS,CAAA,MAAA,CAAO,SAAW,EAAA,SAAA,EAAW,OAAO,CAAA;AAEnD,EAAM,MAAA,cAAA,GAAiB,MAAMD,iBAAQ,CAAA;AAAA,IACjC,SAAA;AAAA,IACA,QAAA;AAAA,IACA;AAAA,GACH,CAAA;AAED,EAAA,MAAM,OAAU,GAAA,MAAM,cAAe,CAAA,OAAA,CAAQ,SAAS,CAAA;AAGtD,EAAM,MAAA,MAAA,GAAS,MAAM,OAAQ,CAAA,SAAA;AAAA,IACzB,SAAA;AAAA,IACA,MAAO,CAAAa,eAAA,CAAU,MAAO,CAAA,eAAA,CAAgB,MAAM,CAAE;AAAA,GACpD;AAEA,EAAA,OAAO,OAAO,WAAY,CAAA,IAAA;AAC9B;AAEO,IAAM,eAA0B,GAAA;AAAA,EACnC,IAAM,EAAA,WAAA;AAAA,EACN,OAAS,EAAA,CAAC,eAAiB,EAAA,aAAA,EAAe,mBAAmB,UAAU,CAAA;AAAA,EACvE,QAAA,EAAU,OAAO,QAAA,EAAyB,QAAqB,KAAA;AAC3D,IAAO,OAAA,IAAA;AAAA,GACX;AAAA,EACA,WAAa,EAAA,yCAAA;AAAA,EACb,SAAS,OACL,OAAA,EACA,OACA,EAAA,KAAA,EACA,UACA,QACmB,KAAA;AAEnB,IAAA,IAAI,CAAC,KAAO,EAAA;AACR,MAAS,KAAA,GAAA,MAAM,OAAQ,CAAA,YAAA,CAAa,OAAO,CAAA;AAAA,KACxC,MAAA;AACH,MAAQ,KAAA,GAAA,MAAM,OAAQ,CAAA,wBAAA,CAAyB,KAAK,CAAA;AAAA;AAIxD,IAAA,MAAM,kBAAkBJ,mBAAe,CAAA;AAAA,MACnC,KAAA;AAAA,MACA,QAAU,EAAA;AAAA,KACb,CAAA;AAGD,IAAM,MAAA,OAAA,GAAU,MAAMC,mBAAe,CAAA;AAAA,MACjC,OAAA;AAAA,MACA,OAAS,EAAA,eAAA;AAAA,MACT,YAAYC,eAAW,CAAA;AAAA,KAC1B,CAAA;AAGD,IAAA,IAAI,CAAC,iBAAA,CAAkB,OAAS,EAAA,OAAO,CAAG,EAAA;AACtC,MAAAb,gBAAAA,CAAY,MAAM,2CAA2C,CAAA;AAC7D,MAAA,IAAI,QAAU,EAAA;AACV,QAAS,QAAA,CAAA;AAAA,UACL,IAAM,EAAA,+DAAA;AAAA,UACN,OAAA,EAAS,EAAE,KAAA,EAAO,0BAA2B;AAAA,SAChD,CAAA;AAAA;AAEL,MAAO,OAAA,KAAA;AAAA;AAGX,IAAI,IAAA;AACA,MAAA,MAAM,SAAS,MAAM,YAAA;AAAA,QACjB,OAAA;AAAA,QACA,OAAQ,CAAA,SAAA;AAAA,QACR,OAAA,CAAQ,OAAO,QAAS;AAAA,OAC5B;AAEA,MAAA,IAAI,QAAU,EAAA;AACV,QAAS,QAAA,CAAA;AAAA,UACL,MAAM,CAA4B,yBAAA,EAAA,OAAA,CAAQ,MAAM,CAAA,SAAA,EAAY,QAAQ,SAAS;AAAA,aAAA,EAAkB,MAAM,CAAA,CAAA;AAAA,UACrG,OAAS,EAAA;AAAA,YACL,OAAS,EAAA,IAAA;AAAA,YACT,SAAW,EAAA,MAAA;AAAA,YACX,QAAQ,OAAQ,CAAA,MAAA;AAAA,YAChB,WAAW,OAAQ,CAAA;AAAA;AACvB,SACH,CAAA;AAAA;AAGL,MAAO,OAAA,IAAA;AAAA,aACF,KAAO,EAAA;AACZ,MAAAA,gBAAAA,CAAY,KAAM,CAAA,6BAAA,EAA+B,KAAK,CAAA;AACtD,MAAA,IAAI,QAAU,EAAA;AACV,QAAS,QAAA,CAAA;AAAA,UACL,IAAA,EAAM,4BAA4B,KAAK,CAAA,CAAA;AAAA,UACvC,OAAA,EAAS,EAAE,KAAa;AAAA,SAC3B,CAAA;AAAA;AAEL,MAAO,OAAA,KAAA;AAAA;AACX,GACJ;AAAA,EAEA,QAAU,EAAA;AAAA,IACN;AAAA,MACI;AAAA,QACI,IAAM,EAAA,WAAA;AAAA,QACN,OAAS,EAAA;AAAA,UACL,IAAM,EAAA;AAAA;AACV,OACJ;AAAA,MACA;AAAA,QACI,IAAM,EAAA,WAAA;AAAA,QACN,OAAS,EAAA;AAAA,UACL,IAAM,EAAA,2BAAA;AAAA,UACN,MAAQ,EAAA;AAAA;AACZ,OACJ;AAAA,MACA;AAAA,QACI,IAAM,EAAA,WAAA;AAAA,QACN,OAAS,EAAA;AAAA,UACL,IAAM,EAAA;AAAA;AACV;AACJ;AACJ;AAER,CAAA;;;AClMO,IAAM,UAAqB,GAAA;AAAA,EAC9B,IAAM,EAAA,MAAA;AAAA,EACN,WAAa,EAAA,gCAAA;AAAA,EACb,SAAA,EAAW,CAAC,cAAc,CAAA;AAAA,EAC1B,OAAA,EAAS,CAAC,WAAA,EAAa,eAAe,CAAA;AAAA,EACtC,YAAY;AAChB;AAEA,IAAO,aAAQ,GAAA","file":"index.cjs","sourcesContent":["import {\n    IAgentRuntime,\n    Memory,\n    Provider,\n    State,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport { KeyPair, keyStores, connect, Account, utils } from \"near-api-js\";\nimport BigNumber from \"bignumber.js\";\nimport { KeyPairString } from \"near-api-js/lib/utils\";\nimport NodeCache from \"node-cache\";\n\nconst PROVIDER_CONFIG = {\n    networkId: process.env.NEAR_NETWORK || \"testnet\",\n    nodeUrl:\n        process.env.RPC_URL ||\n        `https://rpc.${process.env.NEAR_NETWORK || \"testnet\"}.near.org`,\n    walletUrl: `https://${process.env.NEAR_NETWORK || \"testnet\"}.mynearwallet.com/`,\n    helperUrl: `https://helper.${process.env.NEAR_NETWORK || \"testnet\"}.near.org`,\n    explorerUrl: `https://${process.env.NEAR_NETWORK || \"testnet\"}.nearblocks.io`,\n    MAX_RETRIES: 3,\n    RETRY_DELAY: 2000,\n    SLIPPAGE: process.env.SLIPPAGE ? parseInt(process.env.SLIPPAGE) : 1,\n};\n\nexport interface NearToken {\n    name: string;\n    symbol: string;\n    decimals: number;\n    balance: string;\n    uiAmount: string;\n    priceUsd: string;\n    valueUsd: string;\n    valueNear?: string;\n}\n\ninterface WalletPortfolio {\n    totalUsd: string;\n    totalNear?: string;\n    tokens: Array<NearToken>;\n}\n\nexport class WalletProvider implements Provider {\n    private cache: NodeCache;\n    private account: Account | null = null;\n    private keyStore: keyStores.InMemoryKeyStore;\n    constructor(private accountId: string) {\n        this.cache = new NodeCache({ stdTTL: 300 }); // Cache TTL set to 5 minutes\n        this.keyStore = new keyStores.InMemoryKeyStore();\n    }\n\n    async get(\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ): Promise<string | null> {\n        try {\n            return await this.getFormattedPortfolio(runtime);\n        } catch (error) {\n            elizaLogger.error(\"Error in wallet provider:\", error);\n            return null;\n        }\n    }\n\n    public async connect(runtime: IAgentRuntime) {\n        if (this.account) return this.account;\n\n        const secretKey = runtime.getSetting(\"NEAR_WALLET_SECRET_KEY\");\n        const publicKey = runtime.getSetting(\"NEAR_WALLET_PUBLIC_KEY\");\n\n        if (!secretKey || !publicKey) {\n            throw new Error(\"NEAR wallet credentials not configured\");\n        }\n\n        // Create KeyPair from secret key\n        const keyPair = KeyPair.fromString(secretKey as KeyPairString);\n\n        // Set the key in the keystore\n        await this.keyStore.setKey(\n            PROVIDER_CONFIG.networkId,\n            this.accountId,\n            keyPair\n        );\n\n        const nearConnection = await connect({\n            networkId: PROVIDER_CONFIG.networkId,\n            keyStore: this.keyStore,\n            nodeUrl: PROVIDER_CONFIG.nodeUrl,\n            walletUrl: PROVIDER_CONFIG.walletUrl,\n            helperUrl: PROVIDER_CONFIG.helperUrl,\n        });\n\n        this.account = await nearConnection.account(this.accountId);\n        return this.account;\n    }\n\n    private async fetchWithRetry(\n        url: string,\n        options: RequestInit = {}\n    ): Promise<any> {\n        let lastError: Error;\n\n        for (let i = 0; i < PROVIDER_CONFIG.MAX_RETRIES; i++) {\n            try {\n                const response = await fetch(url, options);\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return await response.json();\n            } catch (error) {\n                elizaLogger.error(`Attempt ${i + 1} failed:`, error);\n                lastError = error as Error;\n                if (i < PROVIDER_CONFIG.MAX_RETRIES - 1) {\n                    await new Promise((resolve) =>\n                        setTimeout(\n                            resolve,\n                            PROVIDER_CONFIG.RETRY_DELAY * Math.pow(2, i)\n                        )\n                    );\n                }\n            }\n        }\n        throw lastError!;\n    }\n\n    async fetchPortfolioValue(\n        runtime: IAgentRuntime\n    ): Promise<WalletPortfolio> {\n        try {\n            const cacheKey = `portfolio-${this.accountId}`;\n            const cachedValue = this.cache.get<WalletPortfolio>(cacheKey);\n\n            if (cachedValue) {\n                elizaLogger.log(\"Cache hit for fetchPortfolioValue\");\n                return cachedValue;\n            }\n\n            const account = await this.connect(runtime);\n            const balance = await account.getAccountBalance();\n\n            // Convert yoctoNEAR to NEAR\n            const nearBalance = utils.format.formatNearAmount(\n                balance.available\n            );\n\n            // Fetch NEAR price in USD\n            const nearPrice = await this.fetchNearPrice();\n            const valueUsd = new BigNumber(nearBalance).times(nearPrice);\n\n            const portfolio: WalletPortfolio = {\n                totalUsd: valueUsd.toString(),\n                totalNear: nearBalance,\n                tokens: [\n                    {\n                        name: \"NEAR Protocol\",\n                        symbol: \"NEAR\",\n                        decimals: 24,\n                        balance: balance.available,\n                        uiAmount: nearBalance,\n                        priceUsd: nearPrice.toString(),\n                        valueUsd: valueUsd.toString(),\n                    },\n                ],\n            };\n\n            this.cache.set(cacheKey, portfolio);\n            return portfolio;\n        } catch (error) {\n            elizaLogger.error(\"Error fetching portfolio:\", error);\n            throw error;\n        }\n    }\n\n    private async fetchNearPrice(): Promise<number> {\n        const cacheKey = \"near-price\";\n        const cachedPrice = this.cache.get<number>(cacheKey);\n\n        if (cachedPrice) {\n            return cachedPrice;\n        }\n\n        try {\n            const response = await this.fetchWithRetry(\n                \"https://api.coingecko.com/api/v3/simple/price?ids=near&vs_currencies=usd\"\n            );\n            const price = response.near.usd;\n            this.cache.set(cacheKey, price);\n            return price;\n        } catch (error) {\n            elizaLogger.error(\"Error fetching NEAR price:\", error);\n            return 0;\n        }\n    }\n\n    formatPortfolio(\n        runtime: IAgentRuntime,\n        portfolio: WalletPortfolio\n    ): string {\n        let output = `${runtime.character.system}\\n`;\n        output += `Account ID: ${this.accountId}\\n\\n`;\n\n        const totalUsdFormatted = new BigNumber(portfolio.totalUsd).toFixed(2);\n        const totalNearFormatted = portfolio.totalNear;\n\n        output += `Total Value: $${totalUsdFormatted} (${totalNearFormatted} NEAR)\\n\\n`;\n        output += \"Token Balances:\\n\";\n\n        for (const token of portfolio.tokens) {\n            output += `${token.name} (${token.symbol}): ${token.uiAmount} ($${new BigNumber(token.valueUsd).toFixed(2)})\\n`;\n        }\n\n        output += \"\\nMarket Prices:\\n\";\n        output += `NEAR: $${new BigNumber(portfolio.tokens[0].priceUsd).toFixed(2)}\\n`;\n\n        return output;\n    }\n\n    async getFormattedPortfolio(runtime: IAgentRuntime): Promise<string> {\n        try {\n            const portfolio = await this.fetchPortfolioValue(runtime);\n            return this.formatPortfolio(runtime, portfolio);\n        } catch (error) {\n            elizaLogger.error(\"Error generating portfolio report:\", error);\n            return \"Unable to fetch wallet information. Please try again later.\";\n        }\n    }\n}\n\nconst walletProvider: Provider = {\n    get: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ): Promise<string | null> => {\n        try {\n            const accountId = runtime.getSetting(\"NEAR_ADDRESS\");\n            if (!accountId) {\n                throw new Error(\"NEAR_ADDRESS not configured\");\n            }\n            const provider = new WalletProvider(accountId);\n            return await provider.getFormattedPortfolio(runtime);\n        } catch (error) {\n            elizaLogger.error(\"Error in wallet provider:\", error);\n            return null;\n        }\n    },\n};\n\nexport { walletProvider };\n","import {\n    ActionExample,\n    HandlerCallback,\n    elizaLogger,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n    type Action,\n    composeContext,\n    generateObject,\n} from \"@elizaos/core\";\nimport { connect, keyStores, utils } from \"near-api-js\";\nimport {\n    init_env,\n    ftGetTokenMetadata,\n    estimateSwap,\n    instantSwap,\n    fetchAllPools,\n    FT_MINIMUM_STORAGE_BALANCE_LARGE,\n    ONE_YOCTO_NEAR,\n} from \"@ref-finance/ref-sdk\";\nimport { walletProvider } from \"../providers/wallet\";\nimport { KeyPairString } from \"near-api-js/lib/utils\";\n\nasync function checkStorageBalance(\n    account: any,\n    contractId: string\n): Promise<boolean> {\n    try {\n        const balance = await account.viewFunction({\n            contractId,\n            methodName: \"storage_balance_of\",\n            args: { account_id: account.accountId },\n        });\n        return balance !== null && balance.total !== \"0\";\n    } catch (error) {\n        elizaLogger.log(`Error checking storage balance: ${error}`);\n        return false;\n    }\n}\n\nasync function swapToken(\n    runtime: IAgentRuntime,\n    inputTokenId: string,\n    outputTokenId: string,\n    amount: string,\n    slippageTolerance: number = Number(\n        runtime.getSetting(\"SLIPPAGE_TOLERANCE\")\n    ) || 0.01\n): Promise<any> {\n    try {\n        // Get token metadata\n        const tokenIn = await ftGetTokenMetadata(inputTokenId);\n        const tokenOut = await ftGetTokenMetadata(outputTokenId);\n        const networkId = runtime.getSetting(\"NEAR_NETWORK\") || \"testnet\";\n        const nodeUrl =\n            runtime.getSetting(\"RPC_URL\") || \"https://rpc.testnet.near.org\";\n\n        // Get all pools for estimation\n        // ratedPools, unRatedPools,\n        const { simplePools } = await fetchAllPools();\n        const swapTodos = await estimateSwap({\n            tokenIn,\n            tokenOut,\n            amountIn: amount,\n            simplePools,\n            options: {\n                enableSmartRouting: true,\n            },\n        });\n\n        if (!swapTodos || swapTodos.length === 0) {\n            throw new Error(\"No valid swap route found\");\n        }\n\n        // Get account ID from runtime settings\n        const accountId = runtime.getSetting(\"NEAR_ADDRESS\");\n        if (!accountId) {\n            throw new Error(\"NEAR_ADDRESS not configured\");\n        }\n\n        const secretKey = runtime.getSetting(\"NEAR_WALLET_SECRET_KEY\");\n        const keyStore = new keyStores.InMemoryKeyStore();\n        const keyPair = utils.KeyPair.fromString(secretKey as KeyPairString);\n        await keyStore.setKey(networkId, accountId, keyPair);\n\n        const nearConnection = await connect({\n            networkId,\n            keyStore,\n            nodeUrl,\n        });\n\n        const account = await nearConnection.account(accountId);\n\n        // Check storage balance for both tokens\n        const hasStorageIn = await checkStorageBalance(account, inputTokenId);\n        const hasStorageOut = await checkStorageBalance(account, outputTokenId);\n\n        const transactions = await instantSwap({\n            tokenIn,\n            tokenOut,\n            amountIn: amount,\n            swapTodos,\n            slippageTolerance,\n            AccountId: accountId,\n        });\n\n        // If storage deposit is needed, add it to transactions\n        if (!hasStorageIn) {\n            transactions.unshift({\n                receiverId: inputTokenId,\n                functionCalls: [\n                    {\n                        methodName: \"storage_deposit\",\n                        args: {\n                            account_id: accountId,\n                            registration_only: true,\n                        },\n                        gas: \"30000000000000\",\n                        amount: FT_MINIMUM_STORAGE_BALANCE_LARGE,\n                    },\n                ],\n            });\n        }\n\n        if (!hasStorageOut) {\n            transactions.unshift({\n                receiverId: outputTokenId,\n                functionCalls: [\n                    {\n                        methodName: \"storage_deposit\",\n                        args: {\n                            account_id: accountId,\n                            registration_only: true,\n                        },\n                        gas: \"30000000000000\",\n                        amount: FT_MINIMUM_STORAGE_BALANCE_LARGE,\n                    },\n                ],\n            });\n        }\n\n        return transactions;\n    } catch (error) {\n        elizaLogger.error(\"Error in swapToken:\", error);\n        throw error;\n    }\n}\n\nconst swapTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"inputTokenId\": \"wrap.testnet\",\n    \"outputTokenId\": \"ref.fakes.testnet\",\n    \"amount\": \"1.5\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages and wallet information below:\n\n{{walletInfo}}\n\nExtract the following information about the requested token swap:\n- Input token ID (the token being sold)\n- Output token ID (the token being bought)\n- Amount to swap\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined. The result should be a valid JSON object with the following schema:\n\\`\\`\\`json\n{\n    \"inputTokenId\": string | null,\n    \"outputTokenId\": string | null,\n    \"amount\": string | null\n}\n\\`\\`\\``;\n\nexport const executeSwap: Action = {\n    name: \"EXECUTE_SWAP_NEAR\",\n    similes: [\n        \"SWAP_TOKENS_NEAR\",\n        \"TOKEN_SWAP_NEAR\",\n        \"TRADE_TOKENS_NEAR\",\n        \"EXCHANGE_TOKENS_NEAR\",\n    ],\n    validate: async (_runtime: IAgentRuntime, message: Memory) => {\n        elizaLogger.log(\"Message:\", message);\n        return true;\n    },\n    description: \"Perform a token swap using Ref Finance.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        // Initialize Ref SDK with testnet environment\n        init_env(runtime.getSetting(\"NEAR_NETWORK\") || \"testnet\");\n        // Compose state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        const walletInfo = await walletProvider.get(runtime, message, state);\n        state.walletInfo = walletInfo;\n\n        const swapContext = composeContext({\n            state,\n            template: swapTemplate,\n        });\n\n        const response = await generateObject({\n            runtime,\n            context: swapContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        elizaLogger.log(\"Response:\", response);\n\n        if (\n            !response.inputTokenId ||\n            !response.outputTokenId ||\n            !response.amount\n        ) {\n            elizaLogger.log(\"Missing required parameters, skipping swap\");\n            const responseMsg = {\n                text: \"I need the input token ID, output token ID, and amount to perform the swap\",\n            };\n            callback?.(responseMsg);\n            return true;\n        }\n\n        try {\n            // Get account credentials\n            const accountId = runtime.getSetting(\"NEAR_ADDRESS\");\n            const secretKey = runtime.getSetting(\"NEAR_WALLET_SECRET_KEY\");\n\n            if (!accountId || !secretKey) {\n                throw new Error(\"NEAR wallet credentials not configured\");\n            }\n\n            // Create keystore and connect to NEAR\n            const keyStore = new keyStores.InMemoryKeyStore();\n            const keyPair = utils.KeyPair.fromString(\n                secretKey as KeyPairString\n            );\n            await keyStore.setKey(\"testnet\", accountId, keyPair);\n\n            const nearConnection = await connect({\n                networkId: runtime.getSetting(\"NEAR_NETWORK\") || \"testnet\",\n                keyStore,\n                nodeUrl:\n                    runtime.getSetting(\"RPC_URL\") ||\n                    \"https://rpc.testnet.near.org\",\n            });\n\n            // Execute swap\n            const swapResult = await swapToken(\n                runtime,\n                response.inputTokenId,\n                response.outputTokenId,\n                response.amount,\n                Number(runtime.getSetting(\"SLIPPAGE_TOLERANCE\")) || 0.01\n            );\n\n            // Sign and send transactions\n            const account = await nearConnection.account(accountId);\n            const results = [];\n\n            for (const tx of swapResult) {\n                for (const functionCall of tx.functionCalls) {\n                    const result = await account.functionCall({\n                        contractId: tx.receiverId,\n                        methodName: functionCall.methodName,\n                        args: functionCall.args,\n                        gas: functionCall.gas,\n                        attachedDeposit: BigInt(\n                            functionCall.amount === ONE_YOCTO_NEAR\n                                ? \"1\"\n                                : functionCall.amount\n                        ),\n                    });\n                    results.push(result);\n                }\n            }\n\n            elizaLogger.log(\"Swap completed successfully!\");\n            const txHashes = results.map((r) => r.transaction.hash).join(\", \");\n\n            const responseMsg = {\n                text: `Swap completed successfully! Transaction hashes: ${txHashes}`,\n            };\n\n            callback?.(responseMsg);\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during token swap:\", error);\n            const responseMsg = {\n                text: `Error during swap: ${error instanceof Error ? error.message : String(error)}`,\n            };\n            callback?.(responseMsg);\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    inputTokenId: \"wrap.testnet\",\n                    outputTokenId: \"ref.fakes.testnet\",\n                    amount: \"1.0\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Swapping 1.0 NEAR for REF...\",\n                    action: \"TOKEN_SWAP\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Swap completed successfully! Transaction hash: ...\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import {\n    ActionExample,\n    Content,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n    elizaLogger,\n    type Action,\n    composeContext,\n    generateObject,\n} from \"@elizaos/core\";\nimport { connect, keyStores, utils } from \"near-api-js\";\nimport { KeyPairString } from \"near-api-js/lib/utils\";\nimport { utils as nearUtils } from \"near-api-js\";\n// import BigNumber from \"bignumber.js\";\n\nexport interface TransferContent extends Content {\n    recipient: string;\n    amount: string | number;\n    tokenAddress?: string; // Optional for native NEAR transfers\n}\n\nfunction isTransferContent(\n    runtime: IAgentRuntime,\n    content: any\n): content is TransferContent {\n    return (\n        typeof content.recipient === \"string\" &&\n        (typeof content.amount === \"string\" ||\n            typeof content.amount === \"number\")\n    );\n}\n\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"recipient\": \"bob.near\",\n    \"amount\": \"1.5\",\n    \"tokenAddress\": null\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages and wallet information below:\n\n{{walletInfo}}\n\nExtract the following information about the requested token transfer:\n- Recipient address (NEAR account)\n- Amount to transfer\n- Token contract address (null for native NEAR transfers)\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nasync function transferNEAR(\n    runtime: IAgentRuntime,\n    recipient: string,\n    amount: string\n): Promise<string> {\n    const networkId = runtime.getSetting(\"NEAR_NETWORK\") || \"testnet\";\n    const nodeUrl =\n        runtime.getSetting(\"RPC_URL\") || \"https://rpc.testnet.near.org\";\n    const accountId = runtime.getSetting(\"NEAR_ADDRESS\");\n    const secretKey = runtime.getSetting(\"NEAR_WALLET_SECRET_KEY\");\n\n    if (!accountId || !secretKey) {\n        throw new Error(\"NEAR wallet credentials not configured\");\n    }\n\n    // Convert amount to yoctoNEAR (1 NEAR = 10^24 yoctoNEAR)\n    // const yoctoAmount = new BigNumber(amount).multipliedBy(new BigNumber(10).pow(24)).toFixed(0);\n\n    // Create keystore and connect to NEAR\n    const keyStore = new keyStores.InMemoryKeyStore();\n    const keyPair = utils.KeyPair.fromString(secretKey as KeyPairString);\n    await keyStore.setKey(networkId, accountId, keyPair);\n\n    const nearConnection = await connect({\n        networkId,\n        keyStore,\n        nodeUrl,\n    });\n\n    const account = await nearConnection.account(accountId);\n\n    // Execute transfer\n    const result = await account.sendMoney(\n        recipient,\n        BigInt(nearUtils.format.parseNearAmount(amount)!)\n    );\n\n    return result.transaction.hash;\n}\n\nexport const executeTransfer: Action = {\n    name: \"SEND_NEAR\",\n    similes: [\"TRANSFER_NEAR\", \"SEND_TOKENS\", \"TRANSFER_TOKENS\", \"PAY_NEAR\"],\n    validate: async (_runtime: IAgentRuntime, _message: Memory) => {\n        return true; // Add your validation logic here\n    },\n    description: \"Transfer NEAR tokens to another account\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        // Initialize or update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        // Compose transfer context\n        const transferContext = composeContext({\n            state,\n            template: transferTemplate,\n        });\n\n        // Generate transfer content\n        const content = await generateObject({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.SMALL,\n        });\n\n        // Validate transfer content\n        if (!isTransferContent(runtime, content)) {\n            elizaLogger.error(\"Invalid content for TRANSFER_NEAR action.\");\n            if (callback) {\n                callback({\n                    text: \"Unable to process transfer request. Invalid content provided.\",\n                    content: { error: \"Invalid transfer content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n            const txHash = await transferNEAR(\n                runtime,\n                content.recipient,\n                content.amount.toString()\n            );\n\n            if (callback) {\n                callback({\n                    text: `Successfully transferred ${content.amount} NEAR to ${content.recipient}\\nTransaction: ${txHash}`,\n                    content: {\n                        success: true,\n                        signature: txHash,\n                        amount: content.amount,\n                        recipient: content.recipient,\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during NEAR transfer:\", error);\n            if (callback) {\n                callback({\n                    text: `Error transferring NEAR: ${error}`,\n                    content: { error: error },\n                });\n            }\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send 1.5 NEAR to bob.testnet\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll send 1.5 NEAR now...\",\n                    action: \"SEND_NEAR\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully sent 1.5 NEAR to bob.testnet\\nTransaction: ABC123XYZ\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import { Plugin } from \"@elizaos/core/src/types\";\nimport { walletProvider } from \"./providers/wallet\";\n// import { executeCreateToken } from \"./actions/createToken\";\nimport { executeSwap } from \"./actions/swap\";\nimport { executeTransfer } from \"./actions/transfer\";\n\nexport const nearPlugin: Plugin = {\n    name: \"NEAR\",\n    description: \"Near Protocol Plugin for Eliza\",\n    providers: [walletProvider],\n    actions: [executeSwap, executeTransfer],\n    evaluators: [],\n};\n\nexport default nearPlugin;\n"]}