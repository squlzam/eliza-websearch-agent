{"version":3,"sources":["../../../node_modules/@jspm/core/nodelibs/browser/process.js","../src/actions/transfer.ts","../src/providers/wallet.ts","../src/utils/amount.ts","../src/enviroment.ts","../src/actions/createToken.ts","../src/index.ts"],"sourcesContent":["function unimplemented(name) {\r\n  throw new Error('Node.js process ' + name + ' is not supported by JSPM core outside of Node.js');\r\n}\r\n\r\nvar queue = [];\r\nvar draining = false;\r\nvar currentQueue;\r\nvar queueIndex = -1;\r\n\r\nfunction cleanUpNextTick() {\r\n  if (!draining || !currentQueue)\r\n    return;\r\n  draining = false;\r\n  if (currentQueue.length) {\r\n    queue = currentQueue.concat(queue);\r\n  }\r\n  else {\r\n    queueIndex = -1;\r\n  }\r\n  if (queue.length)\r\n    drainQueue();\r\n}\r\n\r\nfunction drainQueue() {\r\n  if (draining)\r\n    return;\r\n  var timeout = setTimeout(cleanUpNextTick, 0);\r\n  draining = true;\r\n\r\n  var len = queue.length;\r\n  while(len) {\r\n    currentQueue = queue;\r\n    queue = [];\r\n    while (++queueIndex < len) {\r\n      if (currentQueue)\r\n        currentQueue[queueIndex].run();\r\n    }\r\n    queueIndex = -1;\r\n    len = queue.length;\r\n  }\r\n  currentQueue = null;\r\n  draining = false;\r\n  clearTimeout(timeout);\r\n}\r\n\r\nfunction nextTick (fun) {\r\n  var args = new Array(arguments.length - 1);\r\n  if (arguments.length > 1) {\r\n    for (var i = 1; i < arguments.length; i++)\r\n      args[i - 1] = arguments[i];\r\n  }\r\n  queue.push(new Item(fun, args));\r\n  if (queue.length === 1 && !draining)\r\n    setTimeout(drainQueue, 0);\r\n}\r\n// v8 likes predictible objects\r\nfunction Item(fun, array) {\r\n  this.fun = fun;\r\n  this.array = array;\r\n}\r\nItem.prototype.run = function () {\r\n  this.fun.apply(null, this.array);\r\n};\r\n\r\nvar title = 'browser';\r\nvar arch = 'x64';\r\nvar platform = 'browser';\r\nvar env = {\r\n  PATH: '/usr/bin',\r\n  LANG: typeof navigator !== 'undefined' ? navigator.language + '.UTF-8' : undefined,\r\n  PWD: '/',\r\n  HOME: '/home',\r\n  TMP: '/tmp',\r\n};\r\nvar argv = ['/usr/bin/node'];\r\nvar execArgv = [];\r\nvar version = 'v16.8.0';\r\nvar versions = {};\r\n\r\nvar emitWarning = function(message, type) {\r\n  console.warn((type ? (type + ': ') : '') + message);\r\n};\r\n\r\nvar binding = function(name) { unimplemented('binding'); };\r\n\r\nvar umask = function(mask) { return 0; };\r\n\r\nvar cwd = function() { return '/'; };\r\nvar chdir = function(dir) {};\r\n\r\nvar release = {\r\n  name: 'node',\r\n  sourceUrl: '',\r\n  headersUrl: '',\r\n  libUrl: '',\r\n};\r\n\r\nfunction noop() {}\r\n\r\nvar browser = true;\r\nvar _rawDebug = noop;\r\nvar moduleLoadList = [];\r\nfunction _linkedBinding(name) { unimplemented('_linkedBinding'); }\r\nvar domain = {};\r\nvar _exiting = false;\r\nvar config = {};\r\nfunction dlopen(name) { unimplemented('dlopen'); }\r\nfunction _getActiveRequests() { return []; }\r\nfunction _getActiveHandles() { return []; }\r\nvar reallyExit = noop;\r\nvar _kill = noop;\r\nvar cpuUsage = function() { return {}; };\r\nvar resourceUsage = cpuUsage;\r\nvar memoryUsage = cpuUsage;\r\nvar kill = noop;\r\nvar exit = noop;\r\nvar openStdin = noop;\r\nvar allowedNodeEnvironmentFlags = {};\r\nfunction assert(condition, message) {\r\n  if (!condition) throw new Error(message || 'assertion error');\r\n}\r\nvar features = {\r\n  inspector: false,\r\n  debug: false,\r\n  uv: false,\r\n  ipv6: false,\r\n  tls_alpn: false,\r\n  tls_sni: false,\r\n  tls_ocsp: false,\r\n  tls: false,\r\n  cached_builtins: true,\r\n};\r\nvar _fatalExceptions = noop;\r\nvar setUncaughtExceptionCaptureCallback = noop;\r\nfunction hasUncaughtExceptionCaptureCallback() { return false; }var _tickCallback = noop;\r\nvar _debugProcess = noop;\r\nvar _debugEnd = noop;\r\nvar _startProfilerIdleNotifier = noop;\r\nvar _stopProfilerIdleNotifier = noop;\r\nvar stdout = undefined;\r\nvar stderr = undefined;\r\nvar stdin = undefined;\r\nvar abort = noop;\r\nvar pid = 2;\r\nvar ppid = 1;\r\nvar execPath = '/bin/usr/node';\r\nvar debugPort = 9229;\r\nvar argv0 = 'node';\r\nvar _preload_modules = [];\r\nvar setSourceMapsEnabled = noop;\r\n\r\nvar _performance = {\r\n  now: typeof performance !== 'undefined' ? performance.now.bind(performance) : undefined,\r\n  timing: typeof performance !== 'undefined' ? performance.timing : undefined,\r\n};\r\nif (_performance.now === undefined) {\r\n  var nowOffset = Date.now();\r\n\r\n  if (_performance.timing && _performance.timing.navigationStart) {\r\n    nowOffset = _performance.timing.navigationStart;\r\n  }\r\n  _performance.now = () => Date.now() - nowOffset;\r\n}\r\n\r\nfunction uptime() {\r\n  return _performance.now() / 1000;\r\n}\r\n\r\nvar nanoPerSec = 1000000000;\r\nfunction hrtime(previousTimestamp) {\r\n  var baseNow = Math.floor((Date.now() - _performance.now()) * 1e-3);\r\n  var clocktime = _performance.now() * 1e-3;\r\n  var seconds = Math.floor(clocktime) + baseNow;\r\n  var nanoseconds = Math.floor((clocktime % 1) * 1e9);\r\n  if (previousTimestamp) {\r\n    seconds = seconds - previousTimestamp[0];\r\n    nanoseconds = nanoseconds - previousTimestamp[1];\r\n    if (nanoseconds < 0) {\r\n      seconds--;\r\n      nanoseconds += nanoPerSec;\r\n    }\r\n  }\r\n  return [seconds, nanoseconds];\r\n}hrtime.bigint = function(time) {\r\n  var diff = hrtime(time);\r\n  if (typeof BigInt === 'undefined') {\r\n    return diff[0] * nanoPerSec + diff[1];\r\n  }\r\n  return BigInt(diff[0] * nanoPerSec) + BigInt(diff[1]);\r\n};\r\n\r\nvar _maxListeners = 10;\r\nvar _events = {};\r\nvar _eventsCount = 0;\r\nfunction on () { return process }var addListener = on;\r\nvar once = on;\r\nvar off = on;\r\nvar removeListener = on;\r\nvar removeAllListeners = on;\r\nvar emit = noop;\r\nvar prependListener = on;\r\nvar prependOnceListener = on;\r\nfunction listeners (name) { return []; }\r\nvar process = {\r\n  version,\r\n  versions,\r\n  arch,\r\n  platform,\r\n  browser,\r\n  release,\r\n  _rawDebug,\r\n  moduleLoadList,\r\n  binding,\r\n  _linkedBinding,\r\n  _events,\r\n  _eventsCount,\r\n  _maxListeners,\r\n  on,\r\n  addListener,\r\n  once,\r\n  off,\r\n  removeListener,\r\n  removeAllListeners,\r\n  emit,\r\n  prependListener,\r\n  prependOnceListener,\r\n  listeners,\r\n  domain,\r\n  _exiting,\r\n  config,\r\n  dlopen,\r\n  uptime,\r\n  _getActiveRequests,\r\n  _getActiveHandles,\r\n  reallyExit,\r\n  _kill,\r\n  cpuUsage,\r\n  resourceUsage,\r\n  memoryUsage,\r\n  kill,\r\n  exit,\r\n  openStdin,\r\n  allowedNodeEnvironmentFlags,\r\n  assert,\r\n  features,\r\n  _fatalExceptions,\r\n  setUncaughtExceptionCaptureCallback,\r\n  hasUncaughtExceptionCaptureCallback,\r\n  emitWarning,\r\n  nextTick,\r\n  _tickCallback,\r\n  _debugProcess,\r\n  _debugEnd,\r\n  _startProfilerIdleNotifier,\r\n  _stopProfilerIdleNotifier,\r\n  stdout,\r\n  stdin,\r\n  stderr,\r\n  abort,\r\n  umask,\r\n  chdir,\r\n  cwd,\r\n  env,\r\n  title,\r\n  argv,\r\n  execArgv,\r\n  pid,\r\n  ppid,\r\n  execPath,\r\n  debugPort,\r\n  hrtime,\r\n  argv0,\r\n  _preload_modules,\r\n  setSourceMapsEnabled,\r\n};\n\nexport { _debugEnd, _debugProcess, _events, _eventsCount, _exiting, _fatalExceptions, _getActiveHandles, _getActiveRequests, _kill, _linkedBinding, _maxListeners, _preload_modules, _rawDebug, _startProfilerIdleNotifier, _stopProfilerIdleNotifier, _tickCallback, abort, addListener, allowedNodeEnvironmentFlags, arch, argv, argv0, assert, binding, browser, chdir, config, cpuUsage, cwd, debugPort, process as default, dlopen, domain, emit, emitWarning, env, execArgv, execPath, exit, features, hasUncaughtExceptionCaptureCallback, hrtime, kill, listeners, memoryUsage, moduleLoadList, nextTick, off, on, once, openStdin, pid, platform, ppid, prependListener, prependOnceListener, reallyExit, release, removeAllListeners, removeListener, resourceUsage, setSourceMapsEnabled, setUncaughtExceptionCaptureCallback, stderr, stdin, stdout, title, umask, uptime, version, versions };\n","import {\n    elizaLogger,\n    ActionExample,\n    Content,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n    composeContext,\n    generateObject,\n    type Action,\n} from \"@elizaos/core\";\nimport { WalletProvider } from \"../providers/wallet\";\nimport { validateMultiversxConfig } from \"../enviroment\";\n\nexport interface TransferContent extends Content {\n    tokenAddress: string;\n    amount: string;\n    tokenIdentifier?: string;\n}\n\nfunction isTransferContent(\n    _runtime: IAgentRuntime,\n    content: any\n): content is TransferContent {\n    console.log(\"Content for transfer\", content);\n    return (\n        typeof content.tokenAddress === \"string\" &&\n        typeof content.amount === \"string\"\n    );\n}\n\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"tokenAddress\": \"erd12r22hx2q4jjt8e0gukxt5shxqjp9ys5nwdtz0gpds25zf8qwtjdqyzfgzm\",\n    \"amount\": \"1\",\n    \"tokenIdentifier\": \"PEPE-3eca7c\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested token transfer:\n- Token address\n- Amount to transfer\n- Token identifier\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n    name: \"SEND_TOKEN\",\n    similes: [\n        \"TRANSFER_TOKEN\",\n        \"TRANSFER_TOKENS\",\n        \"SEND_TOKENS\",\n        \"SEND_EGLD\",\n        \"PAY\",\n    ],\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        console.log(\"Validating config for user:\", message.userId);\n        await validateMultiversxConfig(runtime);\n        return true;\n    },\n    description: \"Transfer tokens from the agent wallet to another address\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting SEND_TOKEN handler...\");\n\n        // Initialize or update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        // Compose transfer context\n        const transferContext = composeContext({\n            state,\n            template: transferTemplate,\n        });\n\n        // Generate transfer content\n        const content = await generateObject({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.SMALL,\n        });\n\n        // Validate transfer content\n        if (!isTransferContent(runtime, content)) {\n            console.error(\"Invalid content for TRANSFER_TOKEN action.\");\n            if (callback) {\n                callback({\n                    text: \"Unable to process transfer request. Invalid content provided.\",\n                    content: { error: \"Invalid transfer content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n            const privateKey = runtime.getSetting(\"MVX_PRIVATE_KEY\");\n            const network = runtime.getSetting(\"MVX_NETWORK\");\n\n            const walletProvider = new WalletProvider(privateKey, network);\n\n            if (\n                content.tokenIdentifier &&\n                content.tokenIdentifier.toLowerCase() !== \"egld\"\n            ) {\n                await walletProvider.sendESDT({\n                    receiverAddress: content.tokenAddress,\n                    amount: content.amount,\n                    identifier: content.tokenIdentifier,\n                });\n                return true;\n            }\n\n            await walletProvider.sendEGLD({\n                receiverAddress: content.tokenAddress,\n                amount: content.amount,\n            });\n            return true;\n        } catch (error) {\n            console.error(\"Error during token transfer:\", error);\n            if (callback) {\n                callback({\n                    text: `Error transferring tokens: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return \"\";\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send 1 EGLD to erd12r22hx2q4jjt8e0gukxt5shxqjp9ys5nwdtz0gpds25zf8qwtjdqyzfgzm\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll send 1 EGLD tokens now...\",\n                    action: \"SEND_TOKEN\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send 1 TST-a8b23d to erd12r22hx2q4jjt8e0gukxt5shxqjp9ys5nwdtz0gpds25zf8qwtjdqyzfgzm\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll send 1 TST-a8b23d tokens now...\",\n                    action: \"SEND_TOKEN\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import { elizaLogger } from \"@elizaos/core\";\nimport {\n    UserSigner,\n    Address,\n    TransactionComputer,\n    ApiNetworkProvider,\n    UserSecretKey,\n    TokenTransfer,\n    TransferTransactionsFactory,\n    TransactionsFactoryConfig,\n    Token,\n    Transaction,\n    TokenManagementTransactionsFactory,\n} from \"@multiversx/sdk-core\";\nimport { denominateAmount } from \"../utils/amount\";\n\n// Network configuration object for different environments (mainnet, devnet, testnet)\nconst MVX_NETWORK_CONFIG = {\n    mainnet: {\n        chainID: \"1\", // Mainnet chain ID\n        apiURL: \"https://api.multiversx.com\", // Mainnet API URL\n        explorerURL: \"https://explorer.multiversx.com\",\n    },\n    devnet: {\n        chainID: \"D\", // Devnet chain ID\n        apiURL: \"https://devnet-api.multiversx.com\", // Devnet API URL,\n        explorerURL: \"https://devnet-explorer.multiversx.com\",\n    },\n    testnet: {\n        chainID: \"T\", // Testnet chain ID\n        apiURL: \"https://testnet-api.multiversx.com\", // Testnet API URL\n        explorerURL: \"https://testnet-explorer.multiversx.com\",\n    },\n};\n\n// WalletProvider class handles wallet-related operations, such as signing transactions, retrieving balance, and sending tokens\nexport class WalletProvider {\n    private signer: UserSigner; // Handles cryptographic signing\n    private apiNetworkProvider: ApiNetworkProvider; // Interacts with the MultiversX network\n    private chainID: string; // Current network chain ID\n    private explorerURL: string; // Current network explorer URL\n\n    /**\n     * Constructor to initialize WalletProvider with a private key and network configuration\n     * @param privateKey - User's private key for signing transactions\n     * @param network - Target network (mainnet, devnet, or testnet)\n     */\n    constructor(privateKey: string, network: string) {\n        if (!MVX_NETWORK_CONFIG[network]) {\n            throw new Error(`Unsupported network: ${network}`); // Validate network\n        }\n\n        const networkConfig = MVX_NETWORK_CONFIG[network];\n        this.chainID = networkConfig.chainID;\n        this.explorerURL = networkConfig.explorerURL;\n\n        // Initialize the signer with the user's private key\n        const secretKey = UserSecretKey.fromString(privateKey);\n        this.signer = new UserSigner(secretKey);\n\n        // Set up the network provider for API interactions\n        this.apiNetworkProvider = new ApiNetworkProvider(networkConfig.apiURL, {\n            clientName: \"eliza-mvx\",\n        });\n    }\n\n    /**\n     * Retrieve the wallet address derived from the private key\n     * @returns Address object\n     */\n    public getAddress(): Address {\n        return this.signer.getAddress();\n    }\n\n    /**\n     * Fetch the wallet's current EGLD balance\n     * @returns Promise resolving to the wallet's balance as a string\n     */\n    public async getBalance(): Promise<string> {\n        const address = new Address(this.getAddress());\n        const account = await this.apiNetworkProvider.getAccount(address);\n        return account.balance.toString(); // Return balance as a string\n    }\n\n    /**\n     * Sign a transaction using the wallet's private key\n     * @param transaction - The transaction object to sign\n     * @returns The transaction signature as a string\n     */\n    public async signTransaction(transaction: Transaction) {\n        const computer = new TransactionComputer();\n        const serializedTx = computer.computeBytesForSigning(transaction); // Prepare transaction for signing\n        const signature = await this.signer.sign(serializedTx); // Sign the transaction\n        return signature;\n    }\n\n    /**\n     * Send EGLD tokens to another wallet\n     * @param receiverAddress - Recipient's wallet address\n     * @param amount - Amount of EGLD to send\n     * @returns Transaction hash as a string\n     */\n    public async sendEGLD({\n        receiverAddress,\n        amount,\n    }: {\n        receiverAddress: string;\n        amount: string;\n    }): Promise<string> {\n        try {\n            const receiver = new Address(receiverAddress);\n            const value = denominateAmount({ amount, decimals: 18 }); // Convert amount to the smallest unit\n            const senderAddress = this.getAddress();\n\n            // Prepare the transaction factory with the current chain ID\n            const factoryConfig = new TransactionsFactoryConfig({\n                chainID: this.chainID,\n            });\n            const factory = new TransferTransactionsFactory({\n                config: factoryConfig,\n            });\n\n            // Create a native EGLD transfer transaction\n            const transaction = factory.createTransactionForNativeTokenTransfer(\n                {\n                    sender: this.getAddress(),\n                    receiver: receiver,\n                    nativeAmount: BigInt(value),\n                }\n            );\n\n            // Get the sender's account details to set the nonce\n            const account =\n                await this.apiNetworkProvider.getAccount(senderAddress);\n            transaction.nonce = BigInt(account.nonce);\n\n            // Sign the transaction\n            const signature = await this.signTransaction(transaction);\n            transaction.signature = signature;\n\n            // Broadcast the transaction to the network\n            const txHash =\n                await this.apiNetworkProvider.sendTransaction(transaction);\n\n            elizaLogger.log(`TxHash: ${txHash}`); // Log transaction hash\n            elizaLogger.log(\n                `Transaction URL: ${this.explorerURL}/transactions/${txHash}`\n            ); // View Transaction\n            return txHash;\n        } catch (error) {\n            console.error(\"Error sending EGLD transaction:\", error);\n            throw new Error(\n                `Failed to send EGLD: ${error.message || \"Unknown error\"}`\n            );\n        }\n    }\n\n    /**\n     * Send ESDT (eStandard Digital Token) tokens to another wallet\n     * @param receiverAddress - Recipient's wallet address\n     * @param amount - Amount of ESDT to send\n     * @param identifier - ESDT token identifier (e.g., PEPE-3eca7c)\n     * @returns Transaction hash as a string\n     */\n    public async sendESDT({\n        receiverAddress,\n        amount,\n        identifier,\n    }: {\n        receiverAddress: string;\n        amount: string;\n        identifier: string;\n    }): Promise<string> {\n        try {\n            const address = this.getAddress();\n\n            // Set up transaction factory for ESDT transfers\n            const config = new TransactionsFactoryConfig({\n                chainID: this.chainID,\n            });\n            const factory = new TransferTransactionsFactory({ config });\n\n            // Retrieve token details to determine the token's decimals\n            const token =\n                await this.apiNetworkProvider.getFungibleTokenOfAccount(\n                    address,\n                    identifier\n                );\n\n            // Convert amount to the token's smallest unit\n            const value = denominateAmount({\n                amount,\n                decimals: token.rawResponse.decimals,\n            });\n\n            // Create an ESDT transfer transaction\n            const transaction = factory.createTransactionForESDTTokenTransfer({\n                sender: this.getAddress(),\n                receiver: new Address(receiverAddress),\n                tokenTransfers: [\n                    new TokenTransfer({\n                        token: new Token({ identifier }),\n                        amount: BigInt(value),\n                    }),\n                ],\n            });\n\n            // Set the transaction nonce\n            const account = await this.apiNetworkProvider.getAccount(address);\n            transaction.nonce = BigInt(account.nonce);\n\n            // Sign and broadcast the transaction\n            const signature = await this.signTransaction(transaction);\n            transaction.signature = signature;\n            const txHash =\n                await this.apiNetworkProvider.sendTransaction(transaction);\n\n            elizaLogger.log(`TxHash: ${txHash}`); // Log transaction hash\n            elizaLogger.log(\n                `Transaction URL: ${this.explorerURL}/transactions/${txHash}`\n            ); // View Transaction\n            return txHash;\n        } catch (error) {\n            console.error(\"Error sending ESDT transaction:\", error);\n            throw new Error(\n                `Failed to send ESDT: ${error.message || \"Unknown error\"}`\n            );\n        }\n    }\n\n    /**\n     * Create a new eStandard Digital Token (ESDT).\n     * @param tokenName - The name of the token to be created.\n     * @param tokenTicker - The ticker symbol for the token.\n     * @param amount - The initial supply of the token.\n     * @param decimals - The number of decimal places for the token.\n     * @returns The transaction hash of the created ESDT.\n     */\n    public async createESDT({\n        tokenName,\n        tokenTicker,\n        amount,\n        decimals,\n    }: {\n        tokenName: string;\n        tokenTicker: string;\n        amount: string;\n        decimals: number;\n    }): Promise<string> {\n        try {\n            const address = this.getAddress(); // Retrieve the sender's address\n\n            const factoryConfig = new TransactionsFactoryConfig({\n                chainID: this.chainID, // Set the chain ID for the transaction factory\n            });\n            const factory = new TokenManagementTransactionsFactory({\n                config: factoryConfig, // Initialize the factory with the configuration\n            });\n\n            const totalSupply = denominateAmount({ amount, decimals });\n\n            // Create a transaction for issuing a fungible token\n            const transaction = factory.createTransactionForIssuingFungible({\n                sender: new Address(address), // Specify the sender's address\n                tokenName, // Name of the token\n                tokenTicker: tokenTicker.toUpperCase(), // Token ticker in uppercase\n                initialSupply: BigInt(totalSupply), // Initial supply as a BigInt\n                numDecimals: BigInt(decimals), // Number of decimals as a BigInt\n                canFreeze: false, // Token cannot be frozen\n                canWipe: false, // Token cannot be wiped\n                canPause: false, // Token cannot be paused\n                canChangeOwner: true, // Ownership can be changed\n                canUpgrade: true, // Token can be upgraded\n                canAddSpecialRoles: true, // Special roles can be added\n            });\n\n            // Fetch the account details to set the nonce\n            const account = await this.apiNetworkProvider.getAccount(address);\n            transaction.nonce = BigInt(account.nonce); // Set the nonce for the transaction\n\n            const signature = await this.signTransaction(transaction); // Sign the transaction\n            transaction.signature = signature; // Attach the signature to the transaction\n\n            // Send the transaction to the network and get the transaction hash\n            const txHash =\n                await this.apiNetworkProvider.sendTransaction(transaction);\n\n            elizaLogger.log(`TxHash: ${txHash}`); // Log the transaction hash\n            elizaLogger.log(\n                `Transaction URL: ${this.explorerURL}/transactions/${txHash}`\n            ); // View Transaction\n\n            return txHash; // Return the transaction hash\n        } catch (error) {\n            console.error(\"Error creating ESDT:\", error);\n            throw new Error(\n                `Failed to create ESDT: ${error.message || \"Unknown error\"}`\n            ); // Throw an error if creation fails\n        }\n    }\n}\n","import BigNumber from \"bignumber.js\";\n\nBigNumber.config({ ROUNDING_MODE: BigNumber.ROUND_FLOOR });\n\ntype PayloadType = {\n    amount: string;\n    decimals: number;\n};\n\nexport const denominateAmount = ({ amount, decimals }: PayloadType) => {\n    return new BigNumber(amount)\n        .shiftedBy(decimals)\n        .decimalPlaces(0)\n        .toFixed(0);\n};\n","import { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\nexport const multiversxEnvSchema = z.object({\n    MVX_PRIVATE_KEY: z\n        .string()\n        .min(1, \"MultiversX wallet private key is required\"),\n    MVX_NETWORK: z.enum([\"mainnet\", \"devnet\", \"testnet\"]),\n});\n\nexport type MultiversxConfig = z.infer<typeof multiversxEnvSchema>;\n\nexport async function validateMultiversxConfig(\n    runtime: IAgentRuntime\n): Promise<MultiversxConfig> {\n    try {\n        const config = {\n            MVX_PRIVATE_KEY:\n                runtime.getSetting(\"MVX_PRIVATE_KEY\") ||\n                process.env.MVX_PRIVATE_KEY,\n            MVX_NETWORK:\n                runtime.getSetting(\"MVX_NETWORK\") || process.env.MVX_NETWORK,\n        };\n\n        return multiversxEnvSchema.parse(config);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `MultiversX configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}\n","import {\n    elizaLogger,\n    ActionExample,\n    Content,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n    generateObject,\n    composeContext,\n    type Action,\n} from \"@elizaos/core\";\nimport { WalletProvider } from \"../providers/wallet\";\nimport { validateMultiversxConfig } from \"../enviroment\";\n\nexport interface CreateTokenContent extends Content {\n    tokenName: string;\n    tokenTicker: string;\n    decimals: string;\n    amount: string;\n}\n\nfunction isCreateTokenContent(\n    runtime: IAgentRuntime,\n    content: any\n): content is CreateTokenContent {\n    console.log(\"Content for create token\", content);\n    return content.tokenName && content.tokenTicker && content.amount;\n}\n\nconst createTokenTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"tokenName\": \"TEST\",\n    \"tokenTicker\": \"TST\",\n    \"amount: 100,\n    \"decimals\": 18\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested token creation:\n- Token name\n- Token ticker\n- Amount\n- Decimals\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n    name: \"CREATE_TOKEN\",\n    similes: [\"DEPLOY_TOKEN\"],\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        console.log(\"Validating config for user:\", message.userId);\n        await validateMultiversxConfig(runtime);\n        return true;\n    },\n    description: \"Create a new token.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting CREATE_TOKEN handler...\");\n\n        // Initialize or update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        // Compose transfer context\n        const transferContext = composeContext({\n            state,\n            template: createTokenTemplate,\n        });\n\n        // Generate transfer content\n        const content = await generateObject({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.SMALL,\n        });\n\n        // Validate transfer content\n        if (!isCreateTokenContent(runtime, content)) {\n            console.error(\"Invalid content for TRANSFER_TOKEN action.\");\n            if (callback) {\n                callback({\n                    text: \"Unable to process transfer request. Invalid content provided.\",\n                    content: { error: \"Invalid transfer content\" },\n                });\n            }\n            return false;\n        }\n\n        try {\n            const privateKey = runtime.getSetting(\"MVX_PRIVATE_KEY\");\n            const network = runtime.getSetting(\"MVX_NETWORK\");\n\n            const walletProvider = new WalletProvider(privateKey, network);\n\n            await walletProvider.createESDT({\n                tokenName: content.tokenName,\n                amount: content.amount,\n                decimals: Number(content.decimals) || 18,\n                tokenTicker: content.tokenTicker,\n            });\n            return true;\n        } catch (error) {\n            console.error(\"Error during creating token:\", error);\n            if (callback) {\n                callback({\n                    text: `Error creating token: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Create a token XTREME with ticker XTR and supply of 10000\",\n                    action: \"CREATE_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Succesfully created token.\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Create a token TEST with ticker TST, 18 decimals and supply of 10000\",\n                    action: \"CREATE_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Succesfully created token.\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import { Plugin } from \"@elizaos/core\";\nimport transfer from \"./actions/transfer\";\nimport createToken from \"./actions/createToken\";\n\nexport const multiversxPlugin: Plugin = {\n    name: \"multiversx\",\n    description: \"MultiversX Plugin for Eliza\",\n    actions: [transfer, createToken],\n    evaluators: [],\n    providers: [],\n};\n\nexport default multiversxPlugin;\n"],"mappings":"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","names":["elizaLogger","config","config","elizaLogger","elizaLogger","ModelClass","generateObject","composeContext","elizaLogger","composeContext","generateObject","ModelClass"]}