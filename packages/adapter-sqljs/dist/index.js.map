{"version":3,"sources":["../src/sqliteTables.ts","../src/index.ts"],"sourcesContent":["export const sqliteTables = `\nPRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\n\n-- Table: accounts\nCREATE TABLE IF NOT EXISTS \"accounts\" (\n    \"id\" TEXT PRIMARY KEY,\n    \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    \"name\" TEXT,\n    \"username\" TEXT,\n    \"email\" TEXT NOT NULL,\n    \"avatarUrl\" TEXT,\n    \"details\" TEXT DEFAULT '{}' CHECK(json_valid(\"details\")) -- Ensuring details is a valid JSON field\n);\n\n-- Table: memories\nCREATE TABLE IF NOT EXISTS \"memories\" (\n    \"id\" TEXT PRIMARY KEY,\n    \"type\" TEXT NOT NULL,\n    \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    \"content\" TEXT NOT NULL,\n    \"embedding\" BLOB NOT NULL, -- TODO: EMBEDDING ARRAY, CONVERT TO BEST FORMAT FOR SQLITE-VSS (JSON?)\n    \"userId\" TEXT,\n    \"roomId\" TEXT,\n    \"agentId\" TEXT,\n    \"unique\" INTEGER DEFAULT 1 NOT NULL,\n    FOREIGN KEY (\"userId\") REFERENCES \"accounts\"(\"id\"),\n    FOREIGN KEY (\"roomId\") REFERENCES \"rooms\"(\"id\"),\n    FOREIGN KEY (\"agentId\") REFERENCES \"accounts\"(\"id\")\n);\n\n-- Table: goals\nCREATE TABLE IF NOT EXISTS \"goals\" (\n    \"id\" TEXT PRIMARY KEY,\n    \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    \"userId\" TEXT,\n    \"name\" TEXT,\n    \"status\" TEXT,\n    \"description\" TEXT,\n    \"roomId\" TEXT,\n    \"objectives\" TEXT DEFAULT '[]' NOT NULL CHECK(json_valid(\"objectives\")) -- Ensuring objectives is a valid JSON array\n);\n\n-- Table: logs\nCREATE TABLE IF NOT EXISTS \"logs\" (\n    \"id\" TEXT PRIMARY KEY,\n    \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    \"userId\" TEXT NOT NULL,\n    \"body\" TEXT NOT NULL,\n    \"type\" TEXT NOT NULL,\n    \"roomId\" TEXT NOT NULL\n);\n\n-- Table: participants\nCREATE TABLE IF NOT EXISTS \"participants\" (\n    \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    \"userId\" TEXT,\n    \"roomId\" TEXT,\n    \"userState\" TEXT,\n    \"id\" TEXT PRIMARY KEY,\n    \"last_message_read\" TEXT,\n    FOREIGN KEY (\"userId\") REFERENCES \"accounts\"(\"id\"),\n    FOREIGN KEY (\"roomId\") REFERENCES \"rooms\"(\"id\")\n);\n\n-- Table: relationships\nCREATE TABLE IF NOT EXISTS \"relationships\" (\n    \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    \"userA\" TEXT NOT NULL,\n    \"userB\" TEXT NOT NULL,\n    \"status\" \"text\",\n    \"id\" TEXT PRIMARY KEY,\n    \"userId\" TEXT NOT NULL,\n    FOREIGN KEY (\"userA\") REFERENCES \"accounts\"(\"id\"),\n    FOREIGN KEY (\"userB\") REFERENCES \"accounts\"(\"id\"),\n    FOREIGN KEY (\"userId\") REFERENCES \"accounts\"(\"id\")\n);\n\n-- Table: rooms\nCREATE TABLE IF NOT EXISTS \"rooms\" (\n    \"id\" TEXT PRIMARY KEY,\n    \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Table: cache\nCREATE TABLE IF NOT EXISTS \"cache\" (\n    \"key\" TEXT NOT NULL,\n    \"agentId\" TEXT NOT NULL,\n    \"value\" TEXT DEFAULT '{}' CHECK(json_valid(\"value\")),\n    \"createdAt\" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    \"expiresAt\" TIMESTAMP,\n    PRIMARY KEY (\"key\", \"agentId\")\n);\n\n-- Index: relationships_id_key\nCREATE UNIQUE INDEX IF NOT EXISTS \"relationships_id_key\" ON \"relationships\" (\"id\");\n\n-- Index: memories_id_key\nCREATE UNIQUE INDEX IF NOT EXISTS \"memories_id_key\" ON \"memories\" (\"id\");\n\n-- Index: participants_id_key\nCREATE UNIQUE INDEX IF NOT EXISTS \"participants_id_key\" ON \"participants\" (\"id\");\n\nCOMMIT;`;\n","export * from \"./sqliteTables.ts\";\nexport * from \"./types.ts\";\n\nimport {\n    Account,\n    Actor,\n    DatabaseAdapter,\n    GoalStatus,\n    IDatabaseCacheAdapter,\n    Participant,\n    type Goal,\n    type Memory,\n    type Relationship,\n    type UUID,\n} from \"@elizaos/core\";\nimport { v4 } from \"uuid\";\nimport { sqliteTables } from \"./sqliteTables.ts\";\nimport { Database } from \"./types.ts\";\n\nexport class SqlJsDatabaseAdapter\n    extends DatabaseAdapter<Database>\n    implements IDatabaseCacheAdapter\n{\n    constructor(db: Database) {\n        super();\n        this.db = db;\n    }\n\n    async init() {\n        this.db.exec(sqliteTables);\n    }\n\n    async close() {\n        this.db.close();\n    }\n\n    async getRoom(roomId: UUID): Promise<UUID | null> {\n        const sql = \"SELECT id FROM rooms WHERE id = ?\";\n        const stmt = this.db.prepare(sql);\n        stmt.bind([roomId]);\n        const room = stmt.getAsObject() as { id: string } | undefined;\n        stmt.free();\n        return room ? (room.id as UUID) : null;\n    }\n\n    async getParticipantsForAccount(userId: UUID): Promise<Participant[]> {\n        const sql = `\n      SELECT p.id, p.userId, p.roomId, p.last_message_read\n      FROM participants p\n      WHERE p.userId = ?\n    `;\n        const stmt = this.db.prepare(sql);\n        stmt.bind([userId]);\n        const participants: Participant[] = [];\n        while (stmt.step()) {\n            const participant = stmt.getAsObject() as unknown as Participant;\n            participants.push(participant);\n        }\n        stmt.free();\n        return participants;\n    }\n\n    async getParticipantUserState(\n        roomId: UUID,\n        userId: UUID\n    ): Promise<\"FOLLOWED\" | \"MUTED\" | null> {\n        const sql =\n            \"SELECT userState FROM participants WHERE roomId = ? AND userId = ?\";\n        const stmt = this.db.prepare(sql);\n        stmt.bind([roomId, userId]);\n        const result = stmt.getAsObject() as {\n            userState: \"FOLLOWED\" | \"MUTED\" | null;\n        };\n        stmt.free();\n        return result.userState ?? null;\n    }\n\n    async getMemoriesByRoomIds(params: {\n        agentId: UUID;\n        roomIds: UUID[];\n        tableName: string;\n    }): Promise<Memory[]> {\n        const placeholders = params.roomIds.map(() => \"?\").join(\", \");\n        const sql = `SELECT * FROM memories WHERE 'type' = ? AND agentId = ? AND roomId IN (${placeholders})`;\n        const stmt = this.db.prepare(sql);\n        const queryParams = [\n            params.tableName,\n            params.agentId,\n            ...params.roomIds,\n        ];\n        console.log({ queryParams });\n        stmt.bind(queryParams);\n        console.log({ queryParams });\n\n        const memories: Memory[] = [];\n        while (stmt.step()) {\n            const memory = stmt.getAsObject() as unknown as Memory;\n            memories.push({\n                ...memory,\n                content: JSON.parse(memory.content as unknown as string),\n            });\n        }\n        stmt.free();\n        return memories;\n    }\n\n    async setParticipantUserState(\n        roomId: UUID,\n        userId: UUID,\n        state: \"FOLLOWED\" | \"MUTED\" | null\n    ): Promise<void> {\n        const sql =\n            \"UPDATE participants SET userState = ? WHERE roomId = ? AND userId = ?\";\n        const stmt = this.db.prepare(sql);\n        stmt.bind([state, roomId, userId]);\n        stmt.step();\n        stmt.free();\n    }\n\n    async getParticipantsForRoom(roomId: UUID): Promise<UUID[]> {\n        const sql = \"SELECT userId FROM participants WHERE roomId = ?\";\n        const stmt = this.db.prepare(sql);\n        stmt.bind([roomId]);\n        const userIds: UUID[] = [];\n        while (stmt.step()) {\n            const row = stmt.getAsObject() as { userId: string };\n            userIds.push(row.userId as UUID);\n        }\n        stmt.free();\n        return userIds;\n    }\n\n    async getAccountById(userId: UUID): Promise<Account | null> {\n        const sql = \"SELECT * FROM accounts WHERE id = ?\";\n        const stmt = this.db.prepare(sql);\n        stmt.bind([userId]);\n        const account = stmt.getAsObject() as unknown as Account | undefined;\n\n        if (account && typeof account.details === \"string\") {\n            account.details = JSON.parse(account.details);\n        }\n\n        stmt.free();\n        return account || null;\n    }\n\n    async createAccount(account: Account): Promise<boolean> {\n        try {\n            const sql = `\n      INSERT INTO accounts (id, name, username, email, avatarUrl, details)\n      VALUES (?, ?, ?, ?, ?, ?)\n      `;\n            const stmt = this.db.prepare(sql);\n            stmt.run([\n                account.id ?? v4(),\n                account.name,\n                account.username || \"\",\n                account.email || \"\",\n                account.avatarUrl || \"\",\n                JSON.stringify(account.details),\n            ]);\n            stmt.free();\n            return true;\n        } catch (error) {\n            console.log(\"Error creating account\", error);\n            return false;\n        }\n    }\n\n    async getActorById(params: { roomId: UUID }): Promise<Actor[]> {\n        const sql = `\n      SELECT a.id, a.name, a.username, a.details\n      FROM participants p\n      LEFT JOIN accounts a ON p.userId = a.id\n      WHERE p.roomId = ?\n    `;\n        const stmt = this.db.prepare(sql);\n        stmt.bind([params.roomId]);\n        const rows: Actor[] = [];\n        while (stmt.step()) {\n            const row = stmt.getAsObject() as unknown as Actor;\n            rows.push({\n                ...row,\n                details:\n                    typeof row.details === \"string\"\n                        ? JSON.parse(row.details)\n                        : row.details,\n            });\n        }\n        stmt.free();\n        return rows;\n    }\n\n    async getActorDetails(params: { roomId: UUID }): Promise<Actor[]> {\n        const sql = `\n      SELECT a.id, a.name, a.username, a.details\n      FROM participants p\n      LEFT JOIN accounts a ON p.userId = a.id\n      WHERE p.roomId = ?\n    `;\n        const stmt = this.db.prepare(sql);\n        stmt.bind([params.roomId]);\n        const rows: Actor[] = [];\n        while (stmt.step()) {\n            const row = stmt.getAsObject() as unknown as Actor;\n            rows.push({\n                ...row,\n                details:\n                    typeof row.details === \"string\"\n                        ? JSON.parse(row.details)\n                        : row.details,\n            });\n        }\n        stmt.free();\n        return rows;\n    }\n\n    async getMemoryById(id: UUID): Promise<Memory | null> {\n        const sql = \"SELECT * FROM memories WHERE id = ?\";\n        const stmt = this.db.prepare(sql);\n        stmt.bind([id]);\n        const memory = stmt.getAsObject() as unknown as Memory | undefined;\n        stmt.free();\n        return memory || null;\n    }\n\n    async createMemory(memory: Memory, tableName: string): Promise<void> {\n        let isUnique = true;\n        if (memory.embedding) {\n            // Check if a similar memory already exists\n            const similarMemories = await this.searchMemoriesByEmbedding(\n                memory.embedding,\n                {\n                    agentId: memory.agentId,\n                    tableName,\n                    roomId: memory.roomId,\n                    match_threshold: 0.95, // 5% similarity threshold\n                    count: 1,\n                }\n            );\n\n            isUnique = similarMemories.length === 0;\n        }\n\n        // Insert the memory with the appropriate 'unique' value\n        const sql = `INSERT INTO memories (id, type, content, embedding, userId, roomId, agentId, \\`unique\\`, createdAt) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`;\n        const stmt = this.db.prepare(sql);\n\n        const createdAt = memory.createdAt ?? Date.now();\n\n        stmt.run([\n            memory.id ?? v4(),\n            tableName,\n            JSON.stringify(memory.content),\n            JSON.stringify(memory.embedding),\n            memory.userId,\n            memory.roomId,\n            memory.agentId,\n            isUnique ? 1 : 0,\n            createdAt,\n        ]);\n        stmt.free();\n    }\n\n    async searchMemories(params: {\n        tableName: string;\n        agentId: UUID;\n        roomId: UUID;\n        embedding: number[];\n        match_threshold: number;\n        match_count: number;\n        unique: boolean;\n    }): Promise<Memory[]> {\n        let sql =\n            `\n  SELECT *` +\n            // TODO: Uncomment when we compile sql.js with vss\n            // `, (1 - vss_distance_l2(embedding, ?)) AS similarity` +\n            ` FROM memories\n  WHERE type = ? AND agentId = ?\n  AND roomId = ?`;\n\n        if (params.unique) {\n            sql += \" AND `unique` = 1\";\n        }\n        // TODO: Uncomment when we compile sql.js with vss\n        // sql += ` ORDER BY similarity DESC LIMIT ?`;\n        const stmt = this.db.prepare(sql);\n        stmt.bind([\n            // JSON.stringify(params.embedding),\n            params.tableName,\n            params.agentId,\n            params.roomId,\n            // params.match_count,\n        ]);\n        const memories: (Memory & { similarity: number })[] = [];\n        while (stmt.step()) {\n            const memory = stmt.getAsObject() as unknown as Memory & {\n                similarity: number;\n            };\n            memories.push({\n                ...memory,\n                content: JSON.parse(memory.content as unknown as string),\n            });\n        }\n        stmt.free();\n        return memories;\n    }\n\n    async searchMemoriesByEmbedding(\n        _embedding: number[],\n        params: {\n            agentId: UUID;\n            match_threshold?: number;\n            count?: number;\n            roomId?: UUID;\n            unique?: boolean;\n            tableName: string;\n        }\n    ): Promise<Memory[]> {\n        let sql =\n            `SELECT *` +\n            // TODO: Uncomment when we compile sql.js with vss\n            // `, (1 - vss_distance_l2(embedding, ?)) AS similarity`+\n            ` FROM memories\n        WHERE type = ? AND agentId = ?`;\n\n        if (params.unique) {\n            sql += \" AND `unique` = 1\";\n        }\n        if (params.roomId) {\n            sql += \" AND roomId = ?\";\n        }\n        // TODO: Test this\n        if (params.agentId) {\n            sql += \" AND userId = ?\";\n        }\n        // TODO: Uncomment when we compile sql.js with vss\n        // sql += ` ORDER BY similarity DESC`;\n\n        if (params.count) {\n            sql += \" LIMIT ?\";\n        }\n\n        const stmt = this.db.prepare(sql);\n        const bindings = [\n            // JSON.stringify(embedding),\n            params.tableName,\n            params.agentId,\n        ];\n        if (params.roomId) {\n            bindings.push(params.roomId);\n        }\n        if (params.count) {\n            bindings.push(params.count.toString());\n        }\n\n        stmt.bind(bindings);\n        const memories: (Memory & { similarity: number })[] = [];\n        while (stmt.step()) {\n            const memory = stmt.getAsObject() as unknown as Memory & {\n                similarity: number;\n            };\n            memories.push({\n                ...memory,\n                content: JSON.parse(memory.content as unknown as string),\n            });\n        }\n        stmt.free();\n        return memories;\n    }\n\n    async getCachedEmbeddings(opts: {\n        query_table_name: string;\n        query_threshold: number;\n        query_input: string;\n        query_field_name: string;\n        query_field_sub_name: string;\n        query_match_count: number;\n    }): Promise<\n        {\n            embedding: number[];\n            levenshtein_score: number;\n        }[]\n    > {\n        const sql =\n            `\n        SELECT *\n        FROM memories\n        WHERE type = ?` +\n            // `AND vss_search(${opts.query_field_name}, ?)\n            // ORDER BY vss_search(${opts.query_field_name}, ?) DESC` +\n            ` LIMIT ?\n      `;\n        const stmt = this.db.prepare(sql);\n        stmt.bind([\n            opts.query_table_name,\n            // opts.query_input,\n            // opts.query_input,\n            opts.query_match_count,\n        ]);\n        const memories: Memory[] = [];\n        while (stmt.step()) {\n            const memory = stmt.getAsObject() as unknown as Memory;\n            memories.push(memory);\n        }\n        stmt.free();\n\n        return memories.map((memory) => ({\n            ...memory,\n            createdAt: memory.createdAt ?? Date.now(),\n            embedding: JSON.parse(memory.embedding as unknown as string),\n            levenshtein_score: 0,\n        }));\n    }\n\n    async updateGoalStatus(params: {\n        goalId: UUID;\n        status: GoalStatus;\n    }): Promise<void> {\n        const sql = \"UPDATE goals SET status = ? WHERE id = ?\";\n        const stmt = this.db.prepare(sql);\n        stmt.run([params.status, params.goalId]);\n        stmt.free();\n    }\n\n    async log(params: {\n        body: { [key: string]: unknown };\n        userId: UUID;\n        roomId: UUID;\n        type: string;\n    }): Promise<void> {\n        const sql =\n            \"INSERT INTO logs (body, userId, roomId, type) VALUES (?, ?, ?, ?)\";\n        const stmt = this.db.prepare(sql);\n        stmt.run([\n            JSON.stringify(params.body),\n            params.userId,\n            params.roomId,\n            params.type,\n        ]);\n        stmt.free();\n    }\n\n    async getMemories(params: {\n        roomId: UUID;\n        count?: number;\n        unique?: boolean;\n        tableName: string;\n        agentId?: UUID;\n        start?: number;\n        end?: number;\n    }): Promise<Memory[]> {\n        if (!params.tableName) {\n            throw new Error(\"tableName is required\");\n        }\n        if (!params.roomId) {\n            throw new Error(\"roomId is required\");\n        }\n        let sql = `SELECT * FROM memories WHERE type = ? AND roomId = ?`;\n\n        if (params.start) {\n            sql += ` AND createdAt >= ?`;\n        }\n\n        if (params.end) {\n            sql += ` AND createdAt <= ?`;\n        }\n\n        if (params.unique) {\n            sql += \" AND `unique` = 1\";\n        }\n\n        if (params.agentId) {\n            sql += \" AND agentId = ?\";\n        }\n\n        sql += \" ORDER BY createdAt DESC\";\n\n        if (params.count) {\n            sql += \" LIMIT ?\";\n        }\n\n        const stmt = this.db.prepare(sql);\n        stmt.bind([\n            params.tableName,\n            params.roomId,\n            ...(params.start ? [params.start] : []),\n            ...(params.end ? [params.end] : []),\n            ...(params.agentId ? [params.agentId] : []),\n            ...(params.count ? [params.count] : []),\n        ]);\n        const memories: Memory[] = [];\n        while (stmt.step()) {\n            const memory = stmt.getAsObject() as unknown as Memory;\n            memories.push({\n                ...memory,\n                content: JSON.parse(memory.content as unknown as string),\n            });\n        }\n        stmt.free();\n        return memories;\n    }\n\n    async removeMemory(memoryId: UUID, tableName: string): Promise<void> {\n        const sql = `DELETE FROM memories WHERE type = ? AND id = ?`;\n        const stmt = this.db.prepare(sql);\n        stmt.run([tableName, memoryId]);\n        stmt.free();\n    }\n\n    async removeAllMemories(roomId: UUID, tableName: string): Promise<void> {\n        const sql = `DELETE FROM memories WHERE type = ? AND roomId = ?`;\n        const stmt = this.db.prepare(sql);\n        stmt.run([tableName, roomId]);\n        stmt.free();\n    }\n\n    async countMemories(\n        roomId: UUID,\n        unique = true,\n        tableName = \"\"\n    ): Promise<number> {\n        if (!tableName) {\n            throw new Error(\"tableName is required\");\n        }\n\n        let sql = `SELECT COUNT(*) as count FROM memories WHERE type = ? AND roomId = ?`;\n        if (unique) {\n            sql += \" AND `unique` = 1\";\n        }\n\n        const stmt = this.db.prepare(sql);\n        stmt.bind([tableName, roomId]);\n\n        let count = 0;\n        if (stmt.step()) {\n            const result = stmt.getAsObject() as { count: number };\n            count = result.count;\n        }\n\n        stmt.free();\n        return count;\n    }\n\n    async getGoals(params: {\n        roomId: UUID;\n        userId?: UUID | null;\n        onlyInProgress?: boolean;\n        count?: number;\n    }): Promise<Goal[]> {\n        let sql = \"SELECT * FROM goals WHERE roomId = ?\";\n        const bindings: (string | number)[] = [params.roomId];\n\n        if (params.userId) {\n            sql += \" AND userId = ?\";\n            bindings.push(params.userId);\n        }\n\n        if (params.onlyInProgress) {\n            sql += \" AND status = 'IN_PROGRESS'\";\n        }\n\n        if (params.count) {\n            sql += \" LIMIT ?\";\n            bindings.push(params.count.toString());\n        }\n\n        const stmt = this.db.prepare(sql);\n        stmt.bind(bindings);\n        const goals: Goal[] = [];\n        while (stmt.step()) {\n            const goal = stmt.getAsObject() as unknown as Goal;\n            goals.push({\n                ...goal,\n                objectives:\n                    typeof goal.objectives === \"string\"\n                        ? JSON.parse(goal.objectives)\n                        : goal.objectives,\n            });\n        }\n        stmt.free();\n        return goals;\n    }\n\n    async updateGoal(goal: Goal): Promise<void> {\n        const sql =\n            \"UPDATE goals SET name = ?, status = ?, objectives = ? WHERE id = ?\";\n        const stmt = this.db.prepare(sql);\n        stmt.run([\n            goal.name,\n            goal.status,\n            JSON.stringify(goal.objectives),\n            goal.id as string,\n        ]);\n        stmt.free();\n    }\n\n    async createGoal(goal: Goal): Promise<void> {\n        const sql =\n            \"INSERT INTO goals (id, roomId, userId, name, status, objectives) VALUES (?, ?, ?, ?, ?, ?)\";\n        const stmt = this.db.prepare(sql);\n        stmt.run([\n            goal.id ?? v4(),\n            goal.roomId,\n            goal.userId,\n            goal.name,\n            goal.status,\n            JSON.stringify(goal.objectives),\n        ]);\n        stmt.free();\n    }\n\n    async removeGoal(goalId: UUID): Promise<void> {\n        const sql = \"DELETE FROM goals WHERE id = ?\";\n        const stmt = this.db.prepare(sql);\n        stmt.run([goalId]);\n        stmt.free();\n    }\n\n    async removeAllGoals(roomId: UUID): Promise<void> {\n        const sql = \"DELETE FROM goals WHERE roomId = ?\";\n        const stmt = this.db.prepare(sql);\n        stmt.run([roomId]);\n        stmt.free();\n    }\n\n    async createRoom(roomId?: UUID): Promise<UUID> {\n        roomId = roomId || (v4() as UUID);\n        try {\n            const sql = \"INSERT INTO rooms (id) VALUES (?)\";\n            const stmt = this.db.prepare(sql);\n            stmt.run([roomId ?? (v4() as UUID)]);\n            stmt.free();\n        } catch (error) {\n            console.log(\"Error creating room\", error);\n        }\n        return roomId as UUID;\n    }\n\n    async removeRoom(roomId: UUID): Promise<void> {\n        const sql = \"DELETE FROM rooms WHERE id = ?\";\n        const stmt = this.db.prepare(sql);\n        stmt.run([roomId]);\n        stmt.free();\n    }\n\n    async getRoomsForParticipant(userId: UUID): Promise<UUID[]> {\n        const sql = \"SELECT roomId FROM participants WHERE userId = ?\";\n        const stmt = this.db.prepare(sql);\n        stmt.bind([userId]);\n        const rows: { roomId: string }[] = [];\n        while (stmt.step()) {\n            const row = stmt.getAsObject() as unknown as { roomId: string };\n            rows.push(row);\n        }\n        stmt.free();\n        return rows.map((row) => row.roomId as UUID);\n    }\n\n    async getRoomsForParticipants(userIds: UUID[]): Promise<UUID[]> {\n        // Assuming userIds is an array of UUID strings, prepare a list of placeholders\n        const placeholders = userIds.map(() => \"?\").join(\", \");\n        // Construct the SQL query with the correct number of placeholders\n        const sql = `SELECT roomId FROM participants WHERE userId IN (${placeholders})`;\n        const stmt = this.db.prepare(sql);\n        // Execute the query with the userIds array spread into arguments\n        stmt.bind(userIds);\n        const rows: { roomId: string }[] = [];\n        while (stmt.step()) {\n            const row = stmt.getAsObject() as unknown as { roomId: string };\n            rows.push(row);\n        }\n        stmt.free();\n        // Map and return the roomId values as UUIDs\n        return rows.map((row) => row.roomId as UUID);\n    }\n\n    async addParticipant(userId: UUID, roomId: UUID): Promise<boolean> {\n        try {\n            const sql =\n                \"INSERT INTO participants (id, userId, roomId) VALUES (?, ?, ?)\";\n            const stmt = this.db.prepare(sql);\n            stmt.run([v4(), userId, roomId]);\n            stmt.free();\n            return true;\n        } catch (error) {\n            console.log(\"Error adding participant\", error);\n            return false;\n        }\n    }\n\n    async removeParticipant(userId: UUID, roomId: UUID): Promise<boolean> {\n        try {\n            const sql =\n                \"DELETE FROM participants WHERE userId = ? AND roomId = ?\";\n            const stmt = this.db.prepare(sql);\n            stmt.run([userId, roomId]);\n            stmt.free();\n            return true;\n        } catch (error) {\n            console.log(\"Error removing participant\", error);\n            return false;\n        }\n    }\n\n    async createRelationship(params: {\n        userA: UUID;\n        userB: UUID;\n    }): Promise<boolean> {\n        if (!params.userA || !params.userB) {\n            throw new Error(\"userA and userB are required\");\n        }\n        const sql =\n            \"INSERT INTO relationships (id, userA, userB, userId) VALUES (?, ?, ?, ?)\";\n        const stmt = this.db.prepare(sql);\n        stmt.run([v4(), params.userA, params.userB, params.userA]);\n        stmt.free();\n        return true;\n    }\n\n    async getRelationship(params: {\n        userA: UUID;\n        userB: UUID;\n    }): Promise<Relationship | null> {\n        let relationship: Relationship | null = null;\n        try {\n            const sql =\n                \"SELECT * FROM relationships WHERE (userA = ? AND userB = ?) OR (userA = ? AND userB = ?)\";\n            const stmt = this.db.prepare(sql);\n            stmt.bind([params.userA, params.userB, params.userB, params.userA]);\n\n            if (stmt.step()) {\n                relationship = stmt.getAsObject() as unknown as Relationship;\n            }\n            stmt.free();\n        } catch (error) {\n            console.log(\"Error fetching relationship\", error);\n        }\n        return relationship;\n    }\n\n    async getRelationships(params: { userId: UUID }): Promise<Relationship[]> {\n        const sql =\n            \"SELECT * FROM relationships WHERE (userA = ? OR userB = ?)\";\n        const stmt = this.db.prepare(sql);\n        stmt.bind([params.userId, params.userId]);\n        const relationships: Relationship[] = [];\n        while (stmt.step()) {\n            const relationship = stmt.getAsObject() as unknown as Relationship;\n            relationships.push(relationship);\n        }\n        stmt.free();\n        return relationships;\n    }\n\n    async getCache(params: {\n        key: string;\n        agentId: UUID;\n    }): Promise<string | undefined> {\n        const sql = \"SELECT value FROM cache WHERE (key = ? AND agentId = ?)\";\n        const stmt = this.db.prepare(sql);\n\n        stmt.bind([params.key, params.agentId]);\n\n        let cached: { value: string } | undefined = undefined;\n        if (stmt.step()) {\n            cached = stmt.getAsObject() as unknown as { value: string };\n        }\n        stmt.free();\n\n        return cached?.value ?? undefined;\n    }\n\n    async setCache(params: {\n        key: string;\n        agentId: UUID;\n        value: string;\n    }): Promise<boolean> {\n        const sql =\n            \"INSERT OR REPLACE INTO cache (key, agentId, value, createdAt) VALUES (?, ?, ?, CURRENT_TIMESTAMP)\";\n        const stmt = this.db.prepare(sql);\n\n        stmt.run([params.key, params.agentId, params.value]);\n        stmt.free();\n\n        return true;\n    }\n\n    async deleteCache(params: {\n        key: string;\n        agentId: UUID;\n    }): Promise<boolean> {\n        try {\n            const sql = \"DELETE FROM cache WHERE key = ? AND agentId = ?\";\n            const stmt = this.db.prepare(sql);\n            stmt.run([params.key, params.agentId]);\n            stmt.free();\n            return true;\n        } catch (error) {\n            console.log(\"Error removing cache\", error);\n            return false;\n        }\n    }\n}\n"],"mappings":"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","names":[]}