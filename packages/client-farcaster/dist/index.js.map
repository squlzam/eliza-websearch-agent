{"version":3,"sources":["../src/index.ts","../src/client.ts","../src/post.ts","../src/prompts.ts","../src/utils.ts","../src/memory.ts","../src/actions.ts","../src/interactions.ts"],"sourcesContent":["import { Client, IAgentRuntime, elizaLogger } from \"@elizaos/core\";\nimport { FarcasterClient } from \"./client\";\nimport { FarcasterPostManager } from \"./post\";\nimport { FarcasterInteractionManager } from \"./interactions\";\nimport { Configuration, NeynarAPIClient } from \"@neynar/nodejs-sdk\";\n\nexport class FarcasterAgentClient implements Client {\n    client: FarcasterClient;\n    posts: FarcasterPostManager;\n    interactions: FarcasterInteractionManager;\n\n    private signerUuid: string;\n\n    constructor(\n        public runtime: IAgentRuntime,\n        client?: FarcasterClient\n    ) {\n        const cache = new Map<string, any>();\n\n        this.signerUuid = runtime.getSetting(\"FARCASTER_NEYNAR_SIGNER_UUID\")!;\n\n        const neynarConfig = new Configuration({\n            apiKey: runtime.getSetting(\"FARCASTER_NEYNAR_API_KEY\")!,\n        });\n\n        const neynarClient = new NeynarAPIClient(neynarConfig);\n\n        this.client =\n            client ??\n            new FarcasterClient({\n                runtime,\n                ssl: true,\n                url:\n                    runtime.getSetting(\"FARCASTER_HUB_URL\") ??\n                    \"hub.pinata.cloud\",\n                neynar: neynarClient,\n                signerUuid: this.signerUuid,\n                cache,\n            });\n\n        elizaLogger.info(\"Farcaster Neynar client initialized.\");\n\n        this.posts = new FarcasterPostManager(\n            this.client,\n            this.runtime,\n            this.signerUuid,\n            cache\n        );\n\n        this.interactions = new FarcasterInteractionManager(\n            this.client,\n            this.runtime,\n            this.signerUuid,\n            cache\n        );\n    }\n\n    async start() {\n        await Promise.all([this.posts.start(), this.interactions.start()]);\n    }\n\n    async stop() {\n        await Promise.all([this.posts.stop(), this.interactions.stop()]);\n    }\n}\n","import { IAgentRuntime, elizaLogger } from \"@elizaos/core\";\nimport { NeynarAPIClient, isApiErrorResponse } from \"@neynar/nodejs-sdk\";\nimport { NeynarCastResponse, Cast, Profile, FidRequest, CastId } from \"./types\";\n\nexport class FarcasterClient {\n    runtime: IAgentRuntime;\n    neynar: NeynarAPIClient;\n    signerUuid: string;\n    cache: Map<string, any>;\n    lastInteractionTimestamp: Date;\n\n    constructor(opts: {\n        runtime: IAgentRuntime;\n        url: string;\n        ssl: boolean;\n        neynar: NeynarAPIClient;\n        signerUuid: string;\n        cache: Map<string, any>;\n    }) {\n        this.cache = opts.cache;\n        this.runtime = opts.runtime;\n        this.neynar = opts.neynar;\n        this.signerUuid = opts.signerUuid;\n        this.lastInteractionTimestamp = new Date();\n    }\n\n    async loadCastFromNeynarResponse(neynarResponse: any): Promise<Cast> {\n        const profile = await this.getProfile(neynarResponse.author.fid);\n        return {\n            hash: neynarResponse.hash,\n            authorFid: neynarResponse.author.fid,\n            text: neynarResponse.text,\n            profile,\n            ...(neynarResponse.parent_hash\n                ? {\n                      inReplyTo: {\n                          hash: neynarResponse.parent_hash,\n                          fid: neynarResponse.parent_author.fid,\n                      },\n                  }\n                : {}),\n            timestamp: new Date(neynarResponse.timestamp),\n        };\n    }\n\n    async publishCast(\n        cast: string,\n        parentCastId: CastId | undefined,\n        retryTimes?: number\n    ): Promise<NeynarCastResponse | undefined> {\n        try {\n            const result = await this.neynar.publishCast({\n                signerUuid: this.signerUuid,\n                text: cast,\n                parent: parentCastId?.hash,\n            });\n            if (result.success) {\n                return {\n                    hash: result.cast.hash,\n                    authorFid: result.cast.author.fid,\n                    text: result.cast.text,\n                };\n            }\n        } catch (err) {\n            if (isApiErrorResponse(err)) {\n                elizaLogger.error(\"Neynar error: \", err.response.data);\n                throw err.response.data;\n            } else {\n                elizaLogger.error(\"Error: \", err);\n                throw err;\n            }\n        }\n    }\n\n    async getCast(castHash: string): Promise<Cast> {\n        if (this.cache.has(`farcaster/cast/${castHash}`)) {\n            return this.cache.get(`farcaster/cast/${castHash}`);\n        }\n\n        const response = await this.neynar.lookupCastByHashOrWarpcastUrl({\n            identifier: castHash,\n            type: \"hash\",\n        });\n        const cast = {\n            hash: response.cast.hash,\n            authorFid: response.cast.author.fid,\n            text: response.cast.text,\n            profile: {\n                fid: response.cast.author.fid,\n                name: response.cast.author.display_name || \"anon\",\n                username: response.cast.author.username,\n            },\n            ...(response.cast.parent_hash\n                ? {\n                      inReplyTo: {\n                          hash: response.cast.parent_hash,\n                          fid: response.cast.parent_author.fid,\n                      },\n                  }\n                : {}),\n            timestamp: new Date(response.cast.timestamp),\n        };\n\n        this.cache.set(`farcaster/cast/${castHash}`, cast);\n\n        return cast;\n    }\n\n    async getCastsByFid(request: FidRequest): Promise<Cast[]> {\n        const timeline: Cast[] = [];\n\n        const response = await this.neynar.fetchCastsForUser({\n            fid: request.fid,\n            limit: request.pageSize,\n        });\n        response.casts.map((cast) => {\n            this.cache.set(`farcaster/cast/${cast.hash}`, cast);\n            timeline.push({\n                hash: cast.hash,\n                authorFid: cast.author.fid,\n                text: cast.text,\n                profile: {\n                    fid: cast.author.fid,\n                    name: cast.author.display_name || \"anon\",\n                    username: cast.author.username,\n                },\n                timestamp: new Date(cast.timestamp),\n            });\n        });\n\n        return timeline;\n    }\n\n    async getMentions(request: FidRequest): Promise<Cast[]> {\n        const neynarMentionsResponse = await this.neynar.fetchAllNotifications({\n            fid: request.fid,\n            type: [\"mentions\", \"replies\"],\n        });\n        const mentions: Cast[] = [];\n\n        neynarMentionsResponse.notifications.map((notification) => {\n            const cast = {\n                hash: notification.cast!.hash,\n                authorFid: notification.cast!.author.fid,\n                text: notification.cast!.text,\n                profile: {\n                    fid: notification.cast!.author.fid,\n                    name: notification.cast!.author.display_name || \"anon\",\n                    username: notification.cast!.author.username,\n                },\n                ...(notification.cast!.parent_hash\n                    ? {\n                          inReplyTo: {\n                              hash: notification.cast!.parent_hash,\n                              fid: notification.cast!.parent_author.fid,\n                          },\n                      }\n                    : {}),\n                timestamp: new Date(notification.cast!.timestamp),\n            };\n            mentions.push(cast);\n            this.cache.set(`farcaster/cast/${cast.hash}`, cast);\n        });\n\n        return mentions;\n    }\n\n    async getProfile(fid: number): Promise<Profile> {\n        if (this.cache.has(`farcaster/profile/${fid}`)) {\n            return this.cache.get(`farcaster/profile/${fid}`) as Profile;\n        }\n\n        const result = await this.neynar.fetchBulkUsers({ fids: [fid] });\n        if (!result.users || result.users.length < 1) {\n            elizaLogger.error(\"Error fetching user by fid\");\n\n            throw \"getProfile ERROR\";\n        }\n\n        const neynarUserProfile = result.users[0];\n\n        const profile: Profile = {\n            fid,\n            name: \"\",\n            username: \"\",\n        };\n\n        const userDataBodyType = {\n            1: \"pfp\",\n            2: \"name\",\n            3: \"bio\",\n            5: \"url\",\n            6: \"username\",\n            // 7: \"location\",\n            // 8: \"twitter\",\n            // 9: \"github\",\n        } as const;\n\n        profile.name = neynarUserProfile.display_name!;\n        profile.username = neynarUserProfile.username;\n        profile.bio = neynarUserProfile.profile.bio.text;\n        profile.pfp = neynarUserProfile.pfp_url;\n\n        this.cache.set(`farcaster/profile/${fid}`, profile);\n\n        return profile;\n    }\n\n    async getTimeline(request: FidRequest): Promise<{\n        timeline: Cast[];\n        nextPageToken?: Uint8Array | undefined;\n    }> {\n        const timeline: Cast[] = [];\n\n        const results = await this.getCastsByFid(request);\n\n        for (const cast of results) {\n            this.cache.set(`farcaster/cast/${cast.hash}`, cast);\n            timeline.push(cast);\n        }\n\n        return {\n            timeline,\n            //TODO implement paging\n            //nextPageToken: results.nextPageToken,\n        };\n    }\n}\n","import {\n    composeContext,\n    generateText,\n    IAgentRuntime,\n    ModelClass,\n    stringToUuid,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport { FarcasterClient } from \"./client\";\nimport { formatTimeline, postTemplate } from \"./prompts\";\nimport { castUuid, MAX_CAST_LENGTH } from \"./utils\";\nimport { createCastMemory } from \"./memory\";\nimport { sendCast } from \"./actions\";\n\nexport class FarcasterPostManager {\n    private timeout: NodeJS.Timeout | undefined;\n\n    constructor(\n        public client: FarcasterClient,\n        public runtime: IAgentRuntime,\n        private signerUuid: string,\n        public cache: Map<string, any>\n    ) {}\n\n    public async start() {\n        const generateNewCastLoop = async () => {\n            try {\n                await this.generateNewCast();\n            } catch (error) {\n                elizaLogger.error(error);\n                return;\n            }\n\n            this.timeout = setTimeout(\n                generateNewCastLoop,\n                (Math.floor(Math.random() * (4 - 1 + 1)) + 1) * 60 * 60 * 1000\n            ); // Random interval between 1 and 4 hours\n        };\n\n        generateNewCastLoop();\n    }\n\n    public async stop() {\n        if (this.timeout) clearTimeout(this.timeout);\n    }\n\n    private async generateNewCast() {\n        elizaLogger.info(\"Generating new cast\");\n        try {\n            const fid = Number(this.runtime.getSetting(\"FARCASTER_FID\")!);\n\n            const profile = await this.client.getProfile(fid);\n            await this.runtime.ensureUserExists(\n                this.runtime.agentId,\n                profile.username,\n                this.runtime.character.name,\n                \"farcaster\"\n            );\n\n            const { timeline } = await this.client.getTimeline({\n                fid,\n                pageSize: 10,\n            });\n\n            this.cache.set(\"farcaster/timeline\", timeline);\n\n            const formattedHomeTimeline = formatTimeline(\n                this.runtime.character,\n                timeline\n            );\n\n            const generateRoomId = stringToUuid(\"farcaster_generate_room\");\n\n            const state = await this.runtime.composeState(\n                {\n                    roomId: generateRoomId,\n                    userId: this.runtime.agentId,\n                    agentId: this.runtime.agentId,\n                    content: { text: \"\", action: \"\" },\n                },\n                {\n                    farcasterUserName: profile.username,\n                    timeline: formattedHomeTimeline,\n                }\n            );\n\n            // Generate new cast\n            const context = composeContext({\n                state,\n                template:\n                    this.runtime.character.templates?.farcasterPostTemplate ||\n                    postTemplate,\n            });\n\n            const newContent = await generateText({\n                runtime: this.runtime,\n                context,\n                modelClass: ModelClass.SMALL,\n            });\n\n            const slice = newContent.replaceAll(/\\\\n/g, \"\\n\").trim();\n\n            let content = slice.slice(0, MAX_CAST_LENGTH);\n\n            // if it's bigger than the max limit, delete the last line\n            if (content.length > MAX_CAST_LENGTH) {\n                content = content.slice(0, content.lastIndexOf(\"\\n\"));\n            }\n\n            if (content.length > MAX_CAST_LENGTH) {\n                // slice at the last period\n                content = content.slice(0, content.lastIndexOf(\".\"));\n            }\n\n            // if it's still too long, get the period before the last period\n            if (content.length > MAX_CAST_LENGTH) {\n                content = content.slice(0, content.lastIndexOf(\".\"));\n            }\n\n            if (this.runtime.getSetting(\"FARCASTER_DRY_RUN\") === \"true\") {\n                elizaLogger.info(`Dry run: would have cast: ${content}`);\n                return;\n            }\n\n            try {\n                const [{ cast }] = await sendCast({\n                    client: this.client,\n                    runtime: this.runtime,\n                    signerUuid: this.signerUuid,\n                    roomId: generateRoomId,\n                    content: { text: content },\n                    profile,\n                });\n\n                const roomId = castUuid({\n                    agentId: this.runtime.agentId,\n                    hash: cast.hash,\n                });\n\n                await this.runtime.ensureRoomExists(roomId);\n\n                await this.runtime.ensureParticipantInRoom(\n                    this.runtime.agentId,\n                    roomId\n                );\n\n                elizaLogger.info(\n                    `[Farcaster Neynar Client] Published cast ${cast.hash}`\n                );\n\n                await this.runtime.messageManager.createMemory(\n                    createCastMemory({\n                        roomId,\n                        runtime: this.runtime,\n                        cast,\n                    })\n                );\n            } catch (error) {\n                elizaLogger.error(\"Error sending cast:\", error);\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error generating new cast:\", error);\n        }\n    }\n}\n","import {\n    Character,\n    messageCompletionFooter,\n    shouldRespondFooter,\n} from \"@elizaos/core\";\nimport type { Cast } from \"./types\";\n\nexport const formatCast = (cast: Cast) => {\n    return `ID: ${cast.hash}\n    From: ${cast.profile.name} (@${cast.profile.username})${cast.profile.username})${cast.inReplyTo ? `\\nIn reply to: ${cast.inReplyTo.fid}` : \"\"}\nText: ${cast.text}`;\n};\n\nexport const formatTimeline = (\n    character: Character,\n    timeline: Cast[]\n) => `# ${character.name}'s Home Timeline\n${timeline.map(formatCast).join(\"\\n\")}\n`;\n\nexport const headerTemplate = `\n{{timeline}}\n\n# Knowledge\n{{knowledge}}\n\nAbout {{agentName}} (@{{farcasterUsername}}):\n{{bio}}\n{{lore}}\n{{postDirections}}\n\n{{providers}}\n\n{{recentPosts}}\n\n{{characterPostExamples}}`;\n\nexport const postTemplate =\n    headerTemplate +\n    `\n# Task: Generate a post in the voice and style of {{agentName}}, aka @{{farcasterUsername}}\nWrite a single sentence post that is {{adjective}} about {{topic}} (without mentioning {{topic}} directly), from the perspective of {{agentName}}.\nTry to write something totally different than previous posts. Do not add commentary or ackwowledge this request, just write the post.\n\nYour response should not contain any questions. Brief, concise statements only. No emojis. Use \\\\n\\\\n (double spaces) between statements.`;\n\nexport const messageHandlerTemplate =\n    headerTemplate +\n    `\nRecent interactions between {{agentName}} and other users:\n{{recentPostInteractions}}\n\nThread of casts You Are Replying To:\n{{formattedConversation}}\n\n# Task: Generate a post in the voice, style and perspective of {{agentName}} (@{{farcasterUsername}}):\n{{currentPost}}` +\n    messageCompletionFooter;\n\nexport const shouldRespondTemplate =\n    //\n    `# Task: Decide if {{agentName}} should respond.\n    About {{agentName}}:\n    {{bio}}\n\n    # INSTRUCTIONS: Determine if {{agentName}} (@{{farcasterUsername}}) should respond to the message and participate in the conversation. Do not comment. Just respond with \"RESPOND\" or \"IGNORE\" or \"STOP\".\n\nResponse options are RESPOND, IGNORE and STOP.\n\n{{agentName}} should respond to messages that are directed at them, or participate in conversations that are interesting or relevant to their background, IGNORE messages that are irrelevant to them, and should STOP if the conversation is concluded.\n\n{{agentName}} is in a room with other users and wants to be conversational, but not annoying.\n{{agentName}} should RESPOND to messages that are directed at them, or participate in conversations that are interesting or relevant to their background.\nIf a message is not interesting or relevant, {{agentName}} should IGNORE.\nIf a message thread has become repetitive, {{agentName}} should IGNORE.\nUnless directly RESPONDing to a user, {{agentName}} should IGNORE messages that are very short or do not contain much information.\nIf a user asks {{agentName}} to stop talking, {{agentName}} should STOP.\nIf {{agentName}} concludes a conversation and isn't part of the conversation anymore, {{agentName}} should STOP.\n\nIMPORTANT: {{agentName}} (aka @{{farcasterUsername}}) is particularly sensitive about being annoying, so if there is any doubt, it is better to IGNORE than to RESPOND.\n\nThread of messages You Are Replying To:\n{{formattedConversation}}\n\nCurrent message:\n{{currentPost}}\n\n` + shouldRespondFooter;\n","import { stringToUuid } from \"@elizaos/core\";\n\nexport const MAX_CAST_LENGTH = 1024; // Updated to Twitter's current character limit\n\nexport function castId({ hash, agentId }: { hash: string; agentId: string }) {\n    return `${hash}-${agentId}`;\n}\n\nexport function castUuid(props: { hash: string; agentId: string }) {\n    return stringToUuid(castId(props));\n}\n\nexport function splitPostContent(\n    content: string,\n    maxLength: number = MAX_CAST_LENGTH\n): string[] {\n    const paragraphs = content.split(\"\\n\\n\").map((p) => p.trim());\n    const posts: string[] = [];\n    let currentTweet = \"\";\n\n    for (const paragraph of paragraphs) {\n        if (!paragraph) continue;\n\n        if ((currentTweet + \"\\n\\n\" + paragraph).trim().length <= maxLength) {\n            if (currentTweet) {\n                currentTweet += \"\\n\\n\" + paragraph;\n            } else {\n                currentTweet = paragraph;\n            }\n        } else {\n            if (currentTweet) {\n                posts.push(currentTweet.trim());\n            }\n            if (paragraph.length <= maxLength) {\n                currentTweet = paragraph;\n            } else {\n                // Split long paragraph into smaller chunks\n                const chunks = splitParagraph(paragraph, maxLength);\n                posts.push(...chunks.slice(0, -1));\n                currentTweet = chunks[chunks.length - 1];\n            }\n        }\n    }\n\n    if (currentTweet) {\n        posts.push(currentTweet.trim());\n    }\n\n    return posts;\n}\n\nexport function splitParagraph(paragraph: string, maxLength: number): string[] {\n    const sentences = paragraph.match(/[^\\.!\\?]+[\\.!\\?]+|[^\\.!\\?]+$/g) || [\n        paragraph,\n    ];\n    const chunks: string[] = [];\n    let currentChunk = \"\";\n\n    for (const sentence of sentences) {\n        if ((currentChunk + \" \" + sentence).trim().length <= maxLength) {\n            if (currentChunk) {\n                currentChunk += \" \" + sentence;\n            } else {\n                currentChunk = sentence;\n            }\n        } else {\n            if (currentChunk) {\n                chunks.push(currentChunk.trim());\n            }\n            if (sentence.length <= maxLength) {\n                currentChunk = sentence;\n            } else {\n                // Split long sentence into smaller pieces\n                const words = sentence.split(\" \");\n                currentChunk = \"\";\n                for (const word of words) {\n                    if (\n                        (currentChunk + \" \" + word).trim().length <= maxLength\n                    ) {\n                        if (currentChunk) {\n                            currentChunk += \" \" + word;\n                        } else {\n                            currentChunk = word;\n                        }\n                    } else {\n                        if (currentChunk) {\n                            chunks.push(currentChunk.trim());\n                        }\n                        currentChunk = word;\n                    }\n                }\n            }\n        }\n    }\n\n    if (currentChunk) {\n        chunks.push(currentChunk.trim());\n    }\n\n    return chunks;\n}\n\nexport function populateMentions(\n    text: string,\n    userIds: number[],\n    positions: number[],\n    userMap: Record<number, string>\n) {\n    // Validate input arrays have same length\n    if (userIds.length !== positions.length) {\n        throw new Error(\n            \"User IDs and positions arrays must have the same length\"\n        );\n    }\n\n    // Create array of mention objects with position and user info\n    const mentions = userIds\n        .map((userId, index) => ({\n            position: positions[index],\n            userId,\n            displayName: userMap[userId]!,\n        }))\n        .sort((a, b) => b.position - a.position); // Sort in reverse order to prevent position shifting\n\n    // Create the resulting string by inserting mentions\n    let result = text;\n    mentions.forEach((mention) => {\n        const mentionText = `@${mention.displayName}`;\n        result =\n            result.slice(0, mention.position) +\n            mentionText +\n            result.slice(mention.position);\n    });\n\n    return result;\n}\n","import {\n    elizaLogger,\n    getEmbeddingZeroVector,\n    IAgentRuntime,\n    stringToUuid,\n    type Memory,\n    type UUID,\n} from \"@elizaos/core\";\nimport type { Cast } from \"./types\";\nimport { toHex } from \"viem\";\nimport { castUuid } from \"./utils\";\nimport { FarcasterClient } from \"./client\";\n\nexport function createCastMemory({\n    roomId,\n    runtime,\n    cast,\n}: {\n    roomId: UUID;\n    runtime: IAgentRuntime;\n    cast: Cast;\n}): Memory {\n    const inReplyTo = cast.inReplyTo\n        ? castUuid({\n              hash: toHex(cast.inReplyTo.hash),\n              agentId: runtime.agentId,\n          })\n        : undefined;\n\n    return {\n        id: castUuid({\n            hash: cast.hash,\n            agentId: runtime.agentId,\n        }),\n        agentId: runtime.agentId,\n        userId: runtime.agentId,\n        content: {\n            text: cast.text,\n            source: \"farcaster\",\n            url: \"\",\n            inReplyTo,\n            hash: cast.hash,\n        },\n        roomId,\n        embedding: getEmbeddingZeroVector(),\n    };\n}\n\nexport async function buildConversationThread({\n    cast,\n    runtime,\n    client,\n}: {\n    cast: Cast;\n    runtime: IAgentRuntime;\n    client: FarcasterClient;\n}): Promise<Cast[]> {\n    const thread: Cast[] = [];\n    const visited: Set<string> = new Set();\n    async function processThread(currentCast: Cast) {\n        if (visited.has(currentCast.hash)) {\n            return;\n        }\n\n        visited.add(currentCast.hash);\n\n        const roomId = castUuid({\n            hash: currentCast.hash,\n            agentId: runtime.agentId,\n        });\n\n        // Check if the current cast has already been saved\n        const memory = await runtime.messageManager.getMemoryById(roomId);\n\n        if (!memory) {\n            elizaLogger.log(\"Creating memory for cast\", currentCast.hash);\n\n            const userId = stringToUuid(currentCast.profile.username);\n\n            await runtime.ensureConnection(\n                userId,\n                roomId,\n                currentCast.profile.username,\n                currentCast.profile.name,\n                \"farcaster\"\n            );\n\n            await runtime.messageManager.createMemory(\n                createCastMemory({\n                    roomId,\n                    runtime,\n                    cast: currentCast,\n                })\n            );\n        }\n\n        thread.unshift(currentCast);\n\n        if (currentCast.inReplyTo) {\n            const parentCast = await client.getCast(currentCast.inReplyTo.hash);\n            await processThread(parentCast);\n        }\n    }\n\n    await processThread(cast);\n    return thread;\n}\n","import type { FarcasterClient } from \"./client\";\nimport type { Content, IAgentRuntime, Memory, UUID } from \"@elizaos/core\";\nimport type { Cast, CastId, Profile } from \"./types\";\nimport { createCastMemory } from \"./memory\";\nimport { splitPostContent } from \"./utils\";\n\nexport async function sendCast({\n    client,\n    runtime,\n    content,\n    roomId,\n    inReplyTo,\n    profile,\n}: {\n    profile: Profile;\n    client: FarcasterClient;\n    runtime: IAgentRuntime;\n    content: Content;\n    roomId: UUID;\n    signerUuid: string;\n    inReplyTo?: CastId;\n}): Promise<{ memory: Memory; cast: Cast }[]> {\n    const chunks = splitPostContent(content.text);\n    const sent: Cast[] = [];\n    let parentCastId = inReplyTo;\n\n    for (const chunk of chunks) {\n        const neynarCast = await client.publishCast(chunk, parentCastId);\n\n        if (neynarCast) {\n            const cast: Cast = {\n                hash: neynarCast.hash,\n                authorFid: neynarCast.authorFid,\n                text: neynarCast.text,\n                profile,\n                inReplyTo: parentCastId,\n                timestamp: new Date(),\n            };\n\n            sent.push(cast!);\n\n            parentCastId = {\n                fid: neynarCast?.authorFid!,\n                hash: neynarCast?.hash!,\n            };\n        }\n    }\n\n    return sent.map((cast) => ({\n        cast,\n        memory: createCastMemory({\n            roomId,\n            runtime,\n            cast,\n        }),\n    }));\n}\n","import {\n    composeContext,\n    generateMessageResponse,\n    generateShouldRespond,\n    Memory,\n    ModelClass,\n    stringToUuid,\n    elizaLogger,\n    HandlerCallback,\n    Content,\n    type IAgentRuntime,\n} from \"@elizaos/core\";\nimport type { FarcasterClient } from \"./client\";\nimport { toHex } from \"viem\";\nimport { buildConversationThread, createCastMemory } from \"./memory\";\nimport { Cast, Profile } from \"./types\";\nimport {\n    formatCast,\n    formatTimeline,\n    messageHandlerTemplate,\n    shouldRespondTemplate,\n} from \"./prompts\";\nimport { castUuid } from \"./utils\";\nimport { sendCast } from \"./actions\";\n\nexport class FarcasterInteractionManager {\n    private timeout: NodeJS.Timeout | undefined;\n    constructor(\n        public client: FarcasterClient,\n        public runtime: IAgentRuntime,\n        private signerUuid: string,\n        public cache: Map<string, any>\n    ) {}\n\n    public async start() {\n        const handleInteractionsLoop = async () => {\n            try {\n                await this.handleInteractions();\n            } catch (error) {\n                elizaLogger.error(error);\n                return;\n            }\n\n            this.timeout = setTimeout(\n                handleInteractionsLoop,\n                Number(\n                    this.runtime.getSetting(\"FARCASTER_POLL_INTERVAL\") || 120\n                ) * 1000 // Default to 2 minutes\n            );\n        };\n\n        handleInteractionsLoop();\n    }\n\n    public async stop() {\n        if (this.timeout) clearTimeout(this.timeout);\n    }\n\n    private async handleInteractions() {\n        const agentFid = Number(this.runtime.getSetting(\"FARCASTER_FID\"));\n\n        const mentions = await this.client.getMentions({\n            fid: agentFid,\n            pageSize: 10,\n        });\n\n        const agent = await this.client.getProfile(agentFid);\n        for (const mention of mentions) {\n            const messageHash = toHex(mention.hash);\n            const conversationId = `${messageHash}-${this.runtime.agentId}`;\n            const roomId = stringToUuid(conversationId);\n            const userId = stringToUuid(mention.authorFid.toString());\n\n            const pastMemoryId = castUuid({\n                agentId: this.runtime.agentId,\n                hash: mention.hash,\n            });\n\n            const pastMemory =\n                await this.runtime.messageManager.getMemoryById(pastMemoryId);\n\n            if (pastMemory) {\n                continue;\n            }\n\n            await this.runtime.ensureConnection(\n                userId,\n                roomId,\n                mention.profile.username,\n                mention.profile.name,\n                \"farcaster\"\n            );\n\n            const thread = await buildConversationThread({\n                client: this.client,\n                runtime: this.runtime,\n                cast: mention,\n            });\n\n            const memory: Memory = {\n                content: { text: mention.text, hash: mention.hash },\n                agentId: this.runtime.agentId,\n                userId,\n                roomId,\n            };\n\n            await this.handleCast({\n                agent,\n                cast: mention,\n                memory,\n                thread,\n            });\n        }\n\n        this.client.lastInteractionTimestamp = new Date();\n    }\n\n    private async handleCast({\n        agent,\n        cast,\n        memory,\n        thread,\n    }: {\n        agent: Profile;\n        cast: Cast;\n        memory: Memory;\n        thread: Cast[];\n    }) {\n        if (cast.profile.fid === agent.fid) {\n            elizaLogger.info(\"skipping cast from bot itself\", cast.hash);\n            return;\n        }\n\n        if (!memory.content.text) {\n            elizaLogger.info(\"skipping cast with no text\", cast.hash);\n            return { text: \"\", action: \"IGNORE\" };\n        }\n\n        const currentPost = formatCast(cast);\n\n        const { timeline } = await this.client.getTimeline({\n            fid: agent.fid,\n            pageSize: 10,\n        });\n\n        const formattedTimeline = formatTimeline(\n            this.runtime.character,\n            timeline\n        );\n\n        const formattedConversation = thread\n            .map(\n                (cast) => `@${cast.profile.username} (${new Date(\n                    cast.timestamp\n                ).toLocaleString(\"en-US\", {\n                    hour: \"2-digit\",\n                    minute: \"2-digit\",\n                    month: \"short\",\n                    day: \"numeric\",\n                })}):\n                ${cast.text}`\n            )\n            .join(\"\\n\\n\");\n\n        const state = await this.runtime.composeState(memory, {\n            farcasterUsername: agent.username,\n            timeline: formattedTimeline,\n            currentPost,\n            formattedConversation,\n        });\n\n        const shouldRespondContext = composeContext({\n            state,\n            template:\n                this.runtime.character.templates\n                    ?.farcasterShouldRespondTemplate ||\n                this.runtime.character?.templates?.shouldRespondTemplate ||\n                shouldRespondTemplate,\n        });\n\n        const memoryId = castUuid({\n            agentId: this.runtime.agentId,\n            hash: cast.hash,\n        });\n\n        const castMemory =\n            await this.runtime.messageManager.getMemoryById(memoryId);\n\n        if (!castMemory) {\n            await this.runtime.messageManager.createMemory(\n                createCastMemory({\n                    roomId: memory.roomId,\n                    runtime: this.runtime,\n                    cast,\n                })\n            );\n        }\n\n        const shouldRespondResponse = await generateShouldRespond({\n            runtime: this.runtime,\n            context: shouldRespondContext,\n            modelClass: ModelClass.SMALL,\n        });\n\n        if (\n            shouldRespondResponse === \"IGNORE\" ||\n            shouldRespondResponse === \"STOP\"\n        ) {\n            elizaLogger.info(\n                `Not responding to cast because generated ShouldRespond was ${shouldRespondResponse}`\n            );\n            return;\n        }\n\n        const context = composeContext({\n            state,\n            template:\n                this.runtime.character.templates\n                    ?.farcasterMessageHandlerTemplate ??\n                this.runtime.character?.templates?.messageHandlerTemplate ??\n                messageHandlerTemplate,\n        });\n\n        const responseContent = await generateMessageResponse({\n            runtime: this.runtime,\n            context,\n            modelClass: ModelClass.LARGE,\n        });\n\n        responseContent.inReplyTo = memoryId;\n\n        if (!responseContent.text) return;\n\n        if (this.runtime.getSetting(\"FARCASTER_DRY_RUN\") === \"true\") {\n            elizaLogger.info(\n                `Dry run: would have responded to cast ${cast.hash} with ${responseContent.text}`\n            );\n            return;\n        }\n\n        const callback: HandlerCallback = async (\n            content: Content,\n            files: any[]\n        ) => {\n            try {\n                if (memoryId && !content.inReplyTo) {\n                    content.inReplyTo = memoryId;\n                }\n                const results = await sendCast({\n                    runtime: this.runtime,\n                    client: this.client,\n                    signerUuid: this.signerUuid,\n                    profile: cast.profile,\n                    content: content,\n                    roomId: memory.roomId,\n                    inReplyTo: {\n                        fid: cast.authorFid,\n                        hash: cast.hash,\n                    },\n                });\n                // sendCast lost response action, so we need to add it back here\n                results[0].memory.content.action = content.action;\n\n                for (const { memory } of results) {\n                    await this.runtime.messageManager.createMemory(memory);\n                }\n                return results.map((result) => result.memory);\n            } catch (error) {\n                console.error(\"Error sending response cast:\", error);\n                return [];\n            }\n        };\n\n        const responseMessages = await callback(responseContent);\n\n        const newState = await this.runtime.updateRecentMessageState(state);\n\n        await this.runtime.processActions(\n            memory,\n            responseMessages,\n            newState,\n            callback\n        );\n    }\n}\n"],"mappings":"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","names":["elizaLogger","stringToUuid","elizaLogger","elizaLogger","stringToUuid","elizaLogger","stringToUuid","elizaLogger","stringToUuid","composeContext","ModelClass","stringToUuid","elizaLogger","elizaLogger","stringToUuid","cast","composeContext","ModelClass","memory","NeynarAPIClient","elizaLogger"]}